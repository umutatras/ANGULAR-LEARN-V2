{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Pipe, Directive, Input, Output, Component, ChangeDetectionStrategy, ViewEncapsulation, NgModule } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nfunction PaginationControlsComponent_ul_3_li_1_a_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"a\", 12);\n    i0.ɵɵlistener(\"keyup.enter\", function PaginationControlsComponent_ul_3_li_1_a_1_Template_a_keyup_enter_0_listener() {\n      i0.ɵɵrestoreView(_r8);\n      i0.ɵɵnextContext(3);\n      const _r0 = i0.ɵɵreference(1);\n      return i0.ɵɵresetView(_r0.previous());\n    })(\"click\", function PaginationControlsComponent_ul_3_li_1_a_1_Template_a_click_0_listener() {\n      i0.ɵɵrestoreView(_r8);\n      i0.ɵɵnextContext(3);\n      const _r0 = i0.ɵɵreference(1);\n      return i0.ɵɵresetView(_r0.previous());\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"span\", 13);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r5.previousLabel, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r5.screenReaderPageLabel);\n  }\n}\nfunction PaginationControlsComponent_ul_3_li_1_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"span\", 13);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r6.previousLabel, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r6.screenReaderPageLabel);\n  }\n}\nfunction PaginationControlsComponent_ul_3_li_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 9);\n    i0.ɵɵtemplate(1, PaginationControlsComponent_ul_3_li_1_a_1_Template, 4, 2, \"a\", 10);\n    i0.ɵɵtemplate(2, PaginationControlsComponent_ul_3_li_1_span_2_Template, 4, 2, \"span\", 11);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵnextContext(2);\n    const _r0 = i0.ɵɵreference(1);\n    i0.ɵɵclassProp(\"disabled\", _r0.isFirstPage());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", 1 < _r0.getCurrent());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", _r0.isFirstPage());\n  }\n}\nfunction PaginationControlsComponent_ul_3_li_4_a_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"a\", 12);\n    i0.ɵɵlistener(\"keyup.enter\", function PaginationControlsComponent_ul_3_li_4_a_1_Template_a_keyup_enter_0_listener() {\n      i0.ɵɵrestoreView(_r15);\n      const page_r10 = i0.ɵɵnextContext().$implicit;\n      i0.ɵɵnextContext(2);\n      const _r0 = i0.ɵɵreference(1);\n      return i0.ɵɵresetView(_r0.setCurrent(page_r10.value));\n    })(\"click\", function PaginationControlsComponent_ul_3_li_4_a_1_Template_a_click_0_listener() {\n      i0.ɵɵrestoreView(_r15);\n      const page_r10 = i0.ɵɵnextContext().$implicit;\n      i0.ɵɵnextContext(2);\n      const _r0 = i0.ɵɵreference(1);\n      return i0.ɵɵresetView(_r0.setCurrent(page_r10.value));\n    });\n    i0.ɵɵelementStart(1, \"span\", 13);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"span\");\n    i0.ɵɵtext(4);\n    i0.ɵɵpipe(5, \"number\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const page_r10 = i0.ɵɵnextContext().$implicit;\n    const ctx_r11 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r11.screenReaderPageLabel, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(page_r10.label === \"...\" ? page_r10.label : i0.ɵɵpipeBind2(5, 2, page_r10.label, \"\"));\n  }\n}\nfunction PaginationControlsComponent_ul_3_li_4_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"span\", 16)(2, \"span\", 13);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"span\");\n    i0.ɵɵtext(5);\n    i0.ɵɵpipe(6, \"number\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const page_r10 = i0.ɵɵnextContext().$implicit;\n    const ctx_r12 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r12.screenReaderCurrentLabel, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(page_r10.label === \"...\" ? page_r10.label : i0.ɵɵpipeBind2(6, 2, page_r10.label, \"\"));\n  }\n}\nfunction PaginationControlsComponent_ul_3_li_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtemplate(1, PaginationControlsComponent_ul_3_li_4_a_1_Template, 6, 5, \"a\", 10);\n    i0.ɵɵtemplate(2, PaginationControlsComponent_ul_3_li_4_ng_container_2_Template, 7, 5, \"ng-container\", 15);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const page_r10 = ctx.$implicit;\n    i0.ɵɵnextContext(2);\n    const _r0 = i0.ɵɵreference(1);\n    i0.ɵɵclassProp(\"current\", _r0.getCurrent() === page_r10.value)(\"ellipsis\", page_r10.label === \"...\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", _r0.getCurrent() !== page_r10.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", _r0.getCurrent() === page_r10.value);\n  }\n}\nfunction PaginationControlsComponent_ul_3_li_5_a_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r23 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"a\", 12);\n    i0.ɵɵlistener(\"keyup.enter\", function PaginationControlsComponent_ul_3_li_5_a_1_Template_a_keyup_enter_0_listener() {\n      i0.ɵɵrestoreView(_r23);\n      i0.ɵɵnextContext(3);\n      const _r0 = i0.ɵɵreference(1);\n      return i0.ɵɵresetView(_r0.next());\n    })(\"click\", function PaginationControlsComponent_ul_3_li_5_a_1_Template_a_click_0_listener() {\n      i0.ɵɵrestoreView(_r23);\n      i0.ɵɵnextContext(3);\n      const _r0 = i0.ɵɵreference(1);\n      return i0.ɵɵresetView(_r0.next());\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"span\", 13);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r20 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r20.nextLabel, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r20.screenReaderPageLabel);\n  }\n}\nfunction PaginationControlsComponent_ul_3_li_5_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"span\", 13);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r21 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r21.nextLabel, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r21.screenReaderPageLabel);\n  }\n}\nfunction PaginationControlsComponent_ul_3_li_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 17);\n    i0.ɵɵtemplate(1, PaginationControlsComponent_ul_3_li_5_a_1_Template, 4, 2, \"a\", 10);\n    i0.ɵɵtemplate(2, PaginationControlsComponent_ul_3_li_5_span_2_Template, 4, 2, \"span\", 11);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵnextContext(2);\n    const _r0 = i0.ɵɵreference(1);\n    i0.ɵɵclassProp(\"disabled\", _r0.isLastPage());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !_r0.isLastPage());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", _r0.isLastPage());\n  }\n}\nfunction PaginationControlsComponent_ul_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ul\", 4);\n    i0.ɵɵtemplate(1, PaginationControlsComponent_ul_3_li_1_Template, 3, 4, \"li\", 5);\n    i0.ɵɵelementStart(2, \"li\", 6);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(4, PaginationControlsComponent_ul_3_li_4_Template, 3, 6, \"li\", 7);\n    i0.ɵɵtemplate(5, PaginationControlsComponent_ul_3_li_5_Template, 3, 4, \"li\", 8);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    const _r0 = i0.ɵɵreference(1);\n    i0.ɵɵclassProp(\"responsive\", ctx_r1.responsive);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.directionLinks);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\" \", _r0.getCurrent(), \" / \", _r0.getLastPage(), \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", _r0.pages)(\"ngForTrackBy\", ctx_r1.trackByIndex);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.directionLinks);\n  }\n}\nclass PaginationService {\n  constructor() {\n    this.change = new EventEmitter();\n    this.instances = {};\n    this.DEFAULT_ID = 'DEFAULT_PAGINATION_ID';\n  }\n  defaultId() {\n    return this.DEFAULT_ID;\n  }\n  /**\r\n   * Register a PaginationInstance with this service. Returns a\r\n   * boolean value signifying whether the instance is new or\r\n   * updated (true = new or updated, false = unchanged).\r\n   */\n  register(instance) {\n    if (instance.id == null) {\n      instance.id = this.DEFAULT_ID;\n    }\n    if (!this.instances[instance.id]) {\n      this.instances[instance.id] = instance;\n      return true;\n    } else {\n      return this.updateInstance(instance);\n    }\n  }\n  /**\r\n   * Check each property of the instance and update any that have changed. Return\r\n   * true if any changes were made, else return false.\r\n   */\n  updateInstance(instance) {\n    let changed = false;\n    for (let prop in this.instances[instance.id]) {\n      if (instance[prop] !== this.instances[instance.id][prop]) {\n        this.instances[instance.id][prop] = instance[prop];\n        changed = true;\n      }\n    }\n    return changed;\n  }\n  /**\r\n   * Returns the current page number.\r\n   */\n  getCurrentPage(id) {\n    if (this.instances[id]) {\n      return this.instances[id].currentPage;\n    }\n    return 1;\n  }\n  /**\r\n   * Sets the current page number.\r\n   */\n  setCurrentPage(id, page) {\n    if (this.instances[id]) {\n      let instance = this.instances[id];\n      let maxPage = Math.ceil(instance.totalItems / instance.itemsPerPage);\n      if (page <= maxPage && 1 <= page) {\n        this.instances[id].currentPage = page;\n        this.change.emit(id);\n      }\n    }\n  }\n  /**\r\n   * Sets the value of instance.totalItems\r\n   */\n  setTotalItems(id, totalItems) {\n    if (this.instances[id] && 0 <= totalItems) {\n      this.instances[id].totalItems = totalItems;\n      this.change.emit(id);\n    }\n  }\n  /**\r\n   * Sets the value of instance.itemsPerPage.\r\n   */\n  setItemsPerPage(id, itemsPerPage) {\n    if (this.instances[id]) {\n      this.instances[id].itemsPerPage = itemsPerPage;\n      this.change.emit(id);\n    }\n  }\n  /**\r\n   * Returns a clone of the pagination instance object matching the id. If no\r\n   * id specified, returns the instance corresponding to the default id.\r\n   */\n  getInstance(id = this.DEFAULT_ID) {\n    if (this.instances[id]) {\n      return this.clone(this.instances[id]);\n    }\n    return {};\n  }\n  /**\r\n   * Perform a shallow clone of an object.\r\n   */\n  clone(obj) {\n    var target = {};\n    for (var i in obj) {\n      if (obj.hasOwnProperty(i)) {\n        target[i] = obj[i];\n      }\n    }\n    return target;\n  }\n}\nconst LARGE_NUMBER = Number.MAX_SAFE_INTEGER;\nclass PaginatePipe {\n  constructor(service) {\n    this.service = service;\n    // store the values from the last time the pipe was invoked\n    this.state = {};\n  }\n  transform(collection, args) {\n    // When an observable is passed through the AsyncPipe, it will output\n    // `null` until the subscription resolves. In this case, we want to\n    // use the cached data from the `state` object to prevent the NgFor\n    // from flashing empty until the real values arrive.\n    if (!(collection instanceof Array)) {\n      let _id = args.id || this.service.defaultId();\n      if (this.state[_id]) {\n        return this.state[_id].slice;\n      } else {\n        return collection;\n      }\n    }\n    let serverSideMode = args.totalItems && args.totalItems !== collection.length;\n    let instance = this.createInstance(collection, args);\n    let id = instance.id;\n    let start, end;\n    let perPage = instance.itemsPerPage;\n    let emitChange = this.service.register(instance);\n    if (!serverSideMode && collection instanceof Array) {\n      perPage = +perPage || LARGE_NUMBER;\n      start = (instance.currentPage - 1) * perPage;\n      end = start + perPage;\n      let isIdentical = this.stateIsIdentical(id, collection, start, end);\n      if (isIdentical) {\n        return this.state[id].slice;\n      } else {\n        let slice = collection.slice(start, end);\n        this.saveState(id, collection, slice, start, end);\n        this.service.change.emit(id);\n        return slice;\n      }\n    } else {\n      if (emitChange) {\n        this.service.change.emit(id);\n      }\n      // save the state for server-side collection to avoid null\n      // flash as new data loads.\n      this.saveState(id, collection, collection, start, end);\n      return collection;\n    }\n  }\n  /**\r\n   * Create an PaginationInstance object, using defaults for any optional properties not supplied.\r\n   */\n  createInstance(collection, config) {\n    this.checkConfig(config);\n    return {\n      id: config.id != null ? config.id : this.service.defaultId(),\n      itemsPerPage: +config.itemsPerPage || 0,\n      currentPage: +config.currentPage || 1,\n      totalItems: +config.totalItems || collection.length\n    };\n  }\n  /**\r\n   * Ensure the argument passed to the filter contains the required properties.\r\n   */\n  checkConfig(config) {\n    const required = ['itemsPerPage', 'currentPage'];\n    const missing = required.filter(prop => !(prop in config));\n    if (0 < missing.length) {\n      throw new Error(`PaginatePipe: Argument is missing the following required properties: ${missing.join(', ')}`);\n    }\n  }\n  /**\r\n   * To avoid returning a brand new array each time the pipe is run, we store the state of the sliced\r\n   * array for a given id. This means that the next time the pipe is run on this collection & id, we just\r\n   * need to check that the collection, start and end points are all identical, and if so, return the\r\n   * last sliced array.\r\n   */\n  saveState(id, collection, slice, start, end) {\n    this.state[id] = {\n      collection,\n      size: collection.length,\n      slice,\n      start,\n      end\n    };\n  }\n  /**\r\n   * For a given id, returns true if the collection, size, start and end values are identical.\r\n   */\n  stateIsIdentical(id, collection, start, end) {\n    let state = this.state[id];\n    if (!state) {\n      return false;\n    }\n    let isMetaDataIdentical = state.size === collection.length && state.start === start && state.end === end;\n    if (!isMetaDataIdentical) {\n      return false;\n    }\n    return state.slice.every((element, index) => element === collection[start + index]);\n  }\n}\nPaginatePipe.ɵfac = function PaginatePipe_Factory(t) {\n  return new (t || PaginatePipe)(i0.ɵɵdirectiveInject(PaginationService, 16));\n};\nPaginatePipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"paginate\",\n  type: PaginatePipe,\n  pure: false\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PaginatePipe, [{\n    type: Pipe,\n    args: [{\n      name: 'paginate',\n      pure: false\n    }]\n  }], function () {\n    return [{\n      type: PaginationService\n    }];\n  }, null);\n})();\n\n/**\r\n * The default template and styles for the pagination links are borrowed directly\r\n * from Zurb Foundation 6: http://foundation.zurb.com/sites/docs/pagination.html\r\n */\nconst DEFAULT_TEMPLATE = `\n    <pagination-template  #p=\"paginationApi\"\n                         [id]=\"id\"\n                         [maxSize]=\"maxSize\"\n                         (pageChange)=\"pageChange.emit($event)\"\n                         (pageBoundsCorrection)=\"pageBoundsCorrection.emit($event)\">\n    <nav role=\"navigation\" [attr.aria-label]=\"screenReaderPaginationLabel\">\n    <ul class=\"ngx-pagination\" \n        [class.responsive]=\"responsive\"\n        *ngIf=\"!(autoHide && p.pages.length <= 1)\">\n\n        <li class=\"pagination-previous\" [class.disabled]=\"p.isFirstPage()\" *ngIf=\"directionLinks\"> \n            <a tabindex=\"0\" *ngIf=\"1 < p.getCurrent()\" (keyup.enter)=\"p.previous()\" (click)=\"p.previous()\">\n                {{ previousLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\n            </a>\n            <span *ngIf=\"p.isFirstPage()\" aria-disabled=\"true\">\n                {{ previousLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\n            </span>\n        </li> \n\n        <li class=\"small-screen\">\n            {{ p.getCurrent() }} / {{ p.getLastPage() }}\n        </li>\n\n        <li [class.current]=\"p.getCurrent() === page.value\" \n            [class.ellipsis]=\"page.label === '...'\"\n            *ngFor=\"let page of p.pages; trackBy: trackByIndex\">\n            <a tabindex=\"0\" (keyup.enter)=\"p.setCurrent(page.value)\" (click)=\"p.setCurrent(page.value)\" *ngIf=\"p.getCurrent() !== page.value\">\n                <span class=\"show-for-sr\">{{ screenReaderPageLabel }} </span>\n                <span>{{ (page.label === '...') ? page.label : (page.label | number:'') }}</span>\n            </a>\n            <ng-container *ngIf=\"p.getCurrent() === page.value\">\n              <span aria-live=\"polite\">\n                <span class=\"show-for-sr\">{{ screenReaderCurrentLabel }} </span>\n                <span>{{ (page.label === '...') ? page.label : (page.label | number:'') }}</span> \n              </span>\n            </ng-container>\n        </li>\n\n        <li class=\"pagination-next\" [class.disabled]=\"p.isLastPage()\" *ngIf=\"directionLinks\">\n            <a tabindex=\"0\" *ngIf=\"!p.isLastPage()\" (keyup.enter)=\"p.next()\" (click)=\"p.next()\">\n                 {{ nextLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\n            </a>\n            <span *ngIf=\"p.isLastPage()\" aria-disabled=\"true\">\n                 {{ nextLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\n            </span>\n        </li>\n\n    </ul>\n    </nav>\n    </pagination-template>\n    `;\nconst DEFAULT_STYLES = `\n.ngx-pagination {\n  margin-left: 0;\n  margin-bottom: 1rem; }\n  .ngx-pagination::before, .ngx-pagination::after {\n    content: ' ';\n    display: table; }\n  .ngx-pagination::after {\n    clear: both; }\n  .ngx-pagination li {\n    -moz-user-select: none;\n    -webkit-user-select: none;\n    -ms-user-select: none;\n    margin-right: 0.0625rem;\n    border-radius: 0; }\n  .ngx-pagination li {\n    display: inline-block; }\n  .ngx-pagination a,\n  .ngx-pagination button {\n    color: #0a0a0a; \n    display: block;\n    padding: 0.1875rem 0.625rem;\n    border-radius: 0; }\n    .ngx-pagination a:hover,\n    .ngx-pagination button:hover {\n      background: #e6e6e6; }\n  .ngx-pagination .current {\n    padding: 0.1875rem 0.625rem;\n    background: #2199e8;\n    color: #fefefe;\n    cursor: default; }\n  .ngx-pagination .disabled {\n    padding: 0.1875rem 0.625rem;\n    color: #cacaca;\n    cursor: default; } \n    .ngx-pagination .disabled:hover {\n      background: transparent; }\n  .ngx-pagination a, .ngx-pagination button {\n    cursor: pointer; }\n\n.ngx-pagination .pagination-previous a::before,\n.ngx-pagination .pagination-previous.disabled::before { \n  content: '«';\n  display: inline-block;\n  margin-right: 0.5rem; }\n\n.ngx-pagination .pagination-next a::after,\n.ngx-pagination .pagination-next.disabled::after {\n  content: '»';\n  display: inline-block;\n  margin-left: 0.5rem; }\n\n.ngx-pagination .show-for-sr {\n  position: absolute !important;\n  width: 1px;\n  height: 1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0); }\n.ngx-pagination .small-screen {\n  display: none; }\n@media screen and (max-width: 601px) {\n  .ngx-pagination.responsive .small-screen {\n    display: inline-block; } \n  .ngx-pagination.responsive li:not(.small-screen):not(.pagination-previous):not(.pagination-next) {\n    display: none; }\n}\n  `;\n\n/**\r\n * This directive is what powers all pagination controls components, including the default one.\r\n * It exposes an API which is hooked up to the PaginationService to keep the PaginatePipe in sync\r\n * with the pagination controls.\r\n */\nclass PaginationControlsDirective {\n  constructor(service, changeDetectorRef) {\n    this.service = service;\n    this.changeDetectorRef = changeDetectorRef;\n    this.maxSize = 7;\n    this.pageChange = new EventEmitter();\n    this.pageBoundsCorrection = new EventEmitter();\n    this.pages = [];\n    this.changeSub = this.service.change.subscribe(id => {\n      if (this.id === id) {\n        this.updatePageLinks();\n        this.changeDetectorRef.markForCheck();\n        this.changeDetectorRef.detectChanges();\n      }\n    });\n  }\n  ngOnInit() {\n    if (this.id === undefined) {\n      this.id = this.service.defaultId();\n    }\n    this.updatePageLinks();\n  }\n  ngOnChanges(changes) {\n    this.updatePageLinks();\n  }\n  ngOnDestroy() {\n    this.changeSub.unsubscribe();\n  }\n  /**\r\n   * Go to the previous page\r\n   */\n  previous() {\n    this.checkValidId();\n    this.setCurrent(this.getCurrent() - 1);\n  }\n  /**\r\n   * Go to the next page\r\n   */\n  next() {\n    this.checkValidId();\n    this.setCurrent(this.getCurrent() + 1);\n  }\n  /**\r\n   * Returns true if current page is first page\r\n   */\n  isFirstPage() {\n    return this.getCurrent() === 1;\n  }\n  /**\r\n   * Returns true if current page is last page\r\n   */\n  isLastPage() {\n    return this.getLastPage() === this.getCurrent();\n  }\n  /**\r\n   * Set the current page number.\r\n   */\n  setCurrent(page) {\n    this.pageChange.emit(page);\n  }\n  /**\r\n   * Get the current page number.\r\n   */\n  getCurrent() {\n    return this.service.getCurrentPage(this.id);\n  }\n  /**\r\n   * Returns the last page number\r\n   */\n  getLastPage() {\n    let inst = this.service.getInstance(this.id);\n    if (inst.totalItems < 1) {\n      // when there are 0 or fewer (an error case) items, there are no \"pages\" as such,\n      // but it makes sense to consider a single, empty page as the last page.\n      return 1;\n    }\n    return Math.ceil(inst.totalItems / inst.itemsPerPage);\n  }\n  getTotalItems() {\n    return this.service.getInstance(this.id).totalItems;\n  }\n  checkValidId() {\n    if (this.service.getInstance(this.id).id == null) {\n      console.warn(`PaginationControlsDirective: the specified id \"${this.id}\" does not match any registered PaginationInstance`);\n    }\n  }\n  /**\r\n   * Updates the page links and checks that the current page is valid. Should run whenever the\r\n   * PaginationService.change stream emits a value matching the current ID, or when any of the\r\n   * input values changes.\r\n   */\n  updatePageLinks() {\n    let inst = this.service.getInstance(this.id);\n    const correctedCurrentPage = this.outOfBoundCorrection(inst);\n    if (correctedCurrentPage !== inst.currentPage) {\n      setTimeout(() => {\n        this.pageBoundsCorrection.emit(correctedCurrentPage);\n        this.pages = this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, this.maxSize);\n      });\n    } else {\n      this.pages = this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, this.maxSize);\n    }\n  }\n  /**\r\n   * Checks that the instance.currentPage property is within bounds for the current page range.\r\n   * If not, return a correct value for currentPage, or the current value if OK.\r\n   */\n  outOfBoundCorrection(instance) {\n    const totalPages = Math.ceil(instance.totalItems / instance.itemsPerPage);\n    if (totalPages < instance.currentPage && 0 < totalPages) {\n      return totalPages;\n    } else if (instance.currentPage < 1) {\n      return 1;\n    }\n    return instance.currentPage;\n  }\n  /**\r\n   * Returns an array of Page objects to use in the pagination controls.\r\n   */\n  createPageArray(currentPage, itemsPerPage, totalItems, paginationRange) {\n    // paginationRange could be a string if passed from attribute, so cast to number.\n    paginationRange = +paginationRange;\n    let pages = [];\n    // Return 1 as default page number\n    // Make sense to show 1 instead of empty when there are no items\n    const totalPages = Math.max(Math.ceil(totalItems / itemsPerPage), 1);\n    const halfWay = Math.ceil(paginationRange / 2);\n    const isStart = currentPage <= halfWay;\n    const isEnd = totalPages - halfWay < currentPage;\n    const isMiddle = !isStart && !isEnd;\n    let ellipsesNeeded = paginationRange < totalPages;\n    let i = 1;\n    while (i <= totalPages && i <= paginationRange) {\n      let label;\n      let pageNumber = this.calculatePageNumber(i, currentPage, paginationRange, totalPages);\n      let openingEllipsesNeeded = i === 2 && (isMiddle || isEnd);\n      let closingEllipsesNeeded = i === paginationRange - 1 && (isMiddle || isStart);\n      if (ellipsesNeeded && (openingEllipsesNeeded || closingEllipsesNeeded)) {\n        label = '...';\n      } else {\n        label = pageNumber;\n      }\n      pages.push({\n        label: label,\n        value: pageNumber\n      });\n      i++;\n    }\n    return pages;\n  }\n  /**\r\n   * Given the position in the sequence of pagination links [i],\r\n   * figure out what page number corresponds to that position.\r\n   */\n  calculatePageNumber(i, currentPage, paginationRange, totalPages) {\n    let halfWay = Math.ceil(paginationRange / 2);\n    if (i === paginationRange) {\n      return totalPages;\n    } else if (i === 1) {\n      return i;\n    } else if (paginationRange < totalPages) {\n      if (totalPages - halfWay < currentPage) {\n        return totalPages - paginationRange + i;\n      } else if (halfWay < currentPage) {\n        return currentPage - halfWay + i;\n      } else {\n        return i;\n      }\n    } else {\n      return i;\n    }\n  }\n}\nPaginationControlsDirective.ɵfac = function PaginationControlsDirective_Factory(t) {\n  return new (t || PaginationControlsDirective)(i0.ɵɵdirectiveInject(PaginationService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\nPaginationControlsDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: PaginationControlsDirective,\n  selectors: [[\"pagination-template\"], [\"\", \"pagination-template\", \"\"]],\n  inputs: {\n    id: \"id\",\n    maxSize: \"maxSize\"\n  },\n  outputs: {\n    pageChange: \"pageChange\",\n    pageBoundsCorrection: \"pageBoundsCorrection\"\n  },\n  exportAs: [\"paginationApi\"],\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PaginationControlsDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'pagination-template,[pagination-template]',\n      exportAs: 'paginationApi'\n    }]\n  }], function () {\n    return [{\n      type: PaginationService\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    id: [{\n      type: Input\n    }],\n    maxSize: [{\n      type: Input\n    }],\n    pageChange: [{\n      type: Output\n    }],\n    pageBoundsCorrection: [{\n      type: Output\n    }]\n  });\n})();\nfunction coerceToBoolean(input) {\n  return !!input && input !== 'false';\n}\n/**\r\n * The default pagination controls component. Actually just a default implementation of a custom template.\r\n */\nclass PaginationControlsComponent {\n  constructor() {\n    this.maxSize = 7;\n    this.previousLabel = 'Previous';\n    this.nextLabel = 'Next';\n    this.screenReaderPaginationLabel = 'Pagination';\n    this.screenReaderPageLabel = 'page';\n    this.screenReaderCurrentLabel = `You're on page`;\n    this.pageChange = new EventEmitter();\n    this.pageBoundsCorrection = new EventEmitter();\n    this._directionLinks = true;\n    this._autoHide = false;\n    this._responsive = false;\n  }\n  get directionLinks() {\n    return this._directionLinks;\n  }\n  set directionLinks(value) {\n    this._directionLinks = coerceToBoolean(value);\n  }\n  get autoHide() {\n    return this._autoHide;\n  }\n  set autoHide(value) {\n    this._autoHide = coerceToBoolean(value);\n  }\n  get responsive() {\n    return this._responsive;\n  }\n  set responsive(value) {\n    this._responsive = coerceToBoolean(value);\n  }\n  trackByIndex(index) {\n    return index;\n  }\n}\nPaginationControlsComponent.ɵfac = function PaginationControlsComponent_Factory(t) {\n  return new (t || PaginationControlsComponent)();\n};\nPaginationControlsComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: PaginationControlsComponent,\n  selectors: [[\"pagination-controls\"]],\n  inputs: {\n    id: \"id\",\n    maxSize: \"maxSize\",\n    directionLinks: \"directionLinks\",\n    autoHide: \"autoHide\",\n    responsive: \"responsive\",\n    previousLabel: \"previousLabel\",\n    nextLabel: \"nextLabel\",\n    screenReaderPaginationLabel: \"screenReaderPaginationLabel\",\n    screenReaderPageLabel: \"screenReaderPageLabel\",\n    screenReaderCurrentLabel: \"screenReaderCurrentLabel\"\n  },\n  outputs: {\n    pageChange: \"pageChange\",\n    pageBoundsCorrection: \"pageBoundsCorrection\"\n  },\n  decls: 4,\n  vars: 4,\n  consts: [[3, \"id\", \"maxSize\", \"pageChange\", \"pageBoundsCorrection\"], [\"p\", \"paginationApi\"], [\"role\", \"navigation\"], [\"class\", \"ngx-pagination\", 3, \"responsive\", 4, \"ngIf\"], [1, \"ngx-pagination\"], [\"class\", \"pagination-previous\", 3, \"disabled\", 4, \"ngIf\"], [1, \"small-screen\"], [3, \"current\", \"ellipsis\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"class\", \"pagination-next\", 3, \"disabled\", 4, \"ngIf\"], [1, \"pagination-previous\"], [\"tabindex\", \"0\", 3, \"keyup.enter\", \"click\", 4, \"ngIf\"], [\"aria-disabled\", \"true\", 4, \"ngIf\"], [\"tabindex\", \"0\", 3, \"keyup.enter\", \"click\"], [1, \"show-for-sr\"], [\"aria-disabled\", \"true\"], [4, \"ngIf\"], [\"aria-live\", \"polite\"], [1, \"pagination-next\"]],\n  template: function PaginationControlsComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"pagination-template\", 0, 1);\n      i0.ɵɵlistener(\"pageChange\", function PaginationControlsComponent_Template_pagination_template_pageChange_0_listener($event) {\n        return ctx.pageChange.emit($event);\n      })(\"pageBoundsCorrection\", function PaginationControlsComponent_Template_pagination_template_pageBoundsCorrection_0_listener($event) {\n        return ctx.pageBoundsCorrection.emit($event);\n      });\n      i0.ɵɵelementStart(2, \"nav\", 2);\n      i0.ɵɵtemplate(3, PaginationControlsComponent_ul_3_Template, 6, 8, \"ul\", 3);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(1);\n      i0.ɵɵproperty(\"id\", ctx.id)(\"maxSize\", ctx.maxSize);\n      i0.ɵɵadvance(2);\n      i0.ɵɵattribute(\"aria-label\", ctx.screenReaderPaginationLabel);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !(ctx.autoHide && _r0.pages.length <= 1));\n    }\n  },\n  dependencies: [PaginationControlsDirective, i2.NgIf, i2.NgForOf, i2.DecimalPipe],\n  styles: [\".ngx-pagination{margin-left:0;margin-bottom:1rem}.ngx-pagination:before,.ngx-pagination:after{content:\\\" \\\";display:table}.ngx-pagination:after{clear:both}.ngx-pagination li{-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none;margin-right:.0625rem;border-radius:0}.ngx-pagination li{display:inline-block}.ngx-pagination a,.ngx-pagination button{color:#0a0a0a;display:block;padding:.1875rem .625rem;border-radius:0}.ngx-pagination a:hover,.ngx-pagination button:hover{background:#e6e6e6}.ngx-pagination .current{padding:.1875rem .625rem;background:#2199e8;color:#fefefe;cursor:default}.ngx-pagination .disabled{padding:.1875rem .625rem;color:#cacaca;cursor:default}.ngx-pagination .disabled:hover{background:transparent}.ngx-pagination a,.ngx-pagination button{cursor:pointer}.ngx-pagination .pagination-previous a:before,.ngx-pagination .pagination-previous.disabled:before{content:\\\"\\\\ab\\\";display:inline-block;margin-right:.5rem}.ngx-pagination .pagination-next a:after,.ngx-pagination .pagination-next.disabled:after{content:\\\"\\\\bb\\\";display:inline-block;margin-left:.5rem}.ngx-pagination .show-for-sr{position:absolute!important;width:1px;height:1px;overflow:hidden;clip:rect(0,0,0,0)}.ngx-pagination .small-screen{display:none}@media screen and (max-width: 601px){.ngx-pagination.responsive .small-screen{display:inline-block}.ngx-pagination.responsive li:not(.small-screen):not(.pagination-previous):not(.pagination-next){display:none}}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PaginationControlsComponent, [{\n    type: Component,\n    args: [{\n      selector: 'pagination-controls',\n      template: DEFAULT_TEMPLATE,\n      styles: [DEFAULT_STYLES],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], null, {\n    id: [{\n      type: Input\n    }],\n    maxSize: [{\n      type: Input\n    }],\n    directionLinks: [{\n      type: Input\n    }],\n    autoHide: [{\n      type: Input\n    }],\n    responsive: [{\n      type: Input\n    }],\n    previousLabel: [{\n      type: Input\n    }],\n    nextLabel: [{\n      type: Input\n    }],\n    screenReaderPaginationLabel: [{\n      type: Input\n    }],\n    screenReaderPageLabel: [{\n      type: Input\n    }],\n    screenReaderCurrentLabel: [{\n      type: Input\n    }],\n    pageChange: [{\n      type: Output\n    }],\n    pageBoundsCorrection: [{\n      type: Output\n    }]\n  });\n})();\nclass NgxPaginationModule {}\nNgxPaginationModule.ɵfac = function NgxPaginationModule_Factory(t) {\n  return new (t || NgxPaginationModule)();\n};\nNgxPaginationModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxPaginationModule\n});\nNgxPaginationModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [PaginationService],\n  imports: [[CommonModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxPaginationModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [PaginatePipe, PaginationControlsComponent, PaginationControlsDirective],\n      providers: [PaginationService],\n      exports: [PaginatePipe, PaginationControlsComponent, PaginationControlsDirective]\n    }]\n  }], null, null);\n})();\n\n/*\r\n * Public API Surface of ngx-pagination\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NgxPaginationModule, PaginatePipe, PaginationControlsComponent, PaginationControlsDirective, PaginationService };","map":{"version":3,"names":["_r0","previous","PaginationControlsComponent_ul_3_li_1_a_1_Template_a_click_0_listener","rf","ctx_r5","PaginationControlsComponent_ul_3_li_1_span_2_Template","ctx","ctx_r6","PaginationControlsComponent_ul_3_li_1_Template","PaginationControlsComponent_ul_3_li_4_a_1_Template","_r15","setCurrent","page_r10","value","PaginationControlsComponent_ul_3_li_4_a_1_Template_a_click_0_listener","PaginationControlsComponent_ul_3_li_4_ng_container_2_Template","PaginationControlsComponent_ul_3_li_4_Template","$implicit","label","PaginationControlsComponent_ul_3_li_5_a_1_Template","_r23","next","PaginationControlsComponent_ul_3_li_5_a_1_Template_a_click_0_listener","ctx_r20","PaginationControlsComponent_ul_3_li_5_span_2_Template","ctx_r21","PaginationControlsComponent_ul_3_li_5_Template","PaginationControlsComponent_ul_3_Template","ctx_r1","trackByIndex","PaginationService","constructor","change","EventEmitter","instances","DEFAULT_ID","defaultId","register","instance","id","updateInstance","changed","prop","getCurrentPage","currentPage","setCurrentPage","page","maxPage","Math","ceil","totalItems","itemsPerPage","emit","setTotalItems","setItemsPerPage","getInstance","clone","obj","target","i","hasOwnProperty","LARGE_NUMBER","Number","MAX_SAFE_INTEGER","PaginatePipe","service","state","transform","collection","args","Array","_id","slice","serverSideMode","length","createInstance","start","end","perPage","emitChange","isIdentical","stateIsIdentical","saveState","config","checkConfig","required","missing","filter","Error","join","size","isMetaDataIdentical","every","element","index","pure","Pipe","name","DEFAULT_TEMPLATE","DEFAULT_STYLES","PaginationControlsDirective","changeDetectorRef","maxSize","pageChange","pageBoundsCorrection","pages","changeSub","subscribe","updatePageLinks","markForCheck","detectChanges","ngOnInit","undefined","ngOnChanges","changes","ngOnDestroy","unsubscribe","checkValidId","getCurrent","isFirstPage","isLastPage","getLastPage","inst","getTotalItems","console","warn","correctedCurrentPage","outOfBoundCorrection","setTimeout","createPageArray","totalPages","paginationRange","max","halfWay","isStart","isEnd","isMiddle","ellipsesNeeded","pageNumber","calculatePageNumber","openingEllipsesNeeded","closingEllipsesNeeded","push","i0","ChangeDetectorRef","selectors","inputs","outputs","exportAs","features","Directive","selector","Input","Output","coerceToBoolean","input","PaginationControlsComponent","previousLabel","nextLabel","screenReaderPaginationLabel","screenReaderPageLabel","screenReaderCurrentLabel","_directionLinks","_autoHide","_responsive","directionLinks","autoHide","responsive","decls","vars","consts","template","PaginationControlsComponent_Template","$event","PaginationControlsComponent_Template_pagination_template_pageBoundsCorrection_0_listener","dependencies","i2","NgIf","NgForOf","DecimalPipe","styles","encapsulation","changeDetection","Component","ChangeDetectionStrategy","OnPush","ViewEncapsulation","None","NgxPaginationModule","ɵmod","ɵinj","imports","CommonModule","NgModule","declarations","providers","exports"],"sources":["C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\projects\\ngx-pagination\\src\\lib\\pagination.service.ts","C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\projects\\ngx-pagination\\src\\lib\\paginate.pipe.ts","C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\projects\\ngx-pagination\\src\\lib\\template.ts","C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\projects\\ngx-pagination\\src\\lib\\pagination-controls.directive.ts","C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\projects\\ngx-pagination\\src\\lib\\pagination-controls.component.ts","C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\projects\\ngx-pagination\\src\\lib\\ngx-pagination.module.ts","C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\projects\\ngx-pagination\\src\\public-api.ts","C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\projects\\ngx-pagination\\src\\ngx-pagination.ts"],"sourcesContent":["import {EventEmitter} from '@angular/core'\r\nimport {PaginationInstance} from './pagination-instance';\r\n\r\nexport class PaginationService {\r\n\r\n    public change: EventEmitter<string> = new EventEmitter<string>();\r\n\r\n    private instances: { [id: string]: PaginationInstance } = {};\r\n    private DEFAULT_ID = 'DEFAULT_PAGINATION_ID';\r\n\r\n    public defaultId(): string { return this.DEFAULT_ID }\r\n\r\n    /**\r\n     * Register a PaginationInstance with this service. Returns a\r\n     * boolean value signifying whether the instance is new or\r\n     * updated (true = new or updated, false = unchanged).\r\n     */\r\n    public register(instance: PaginationInstance): boolean {\r\n        if (instance.id == null) {\r\n            instance.id = this.DEFAULT_ID;\r\n        }\r\n\r\n        if (!this.instances[instance.id]) {\r\n            this.instances[instance.id] = instance;\r\n            return true;\r\n        } else {\r\n            return this.updateInstance(instance);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check each property of the instance and update any that have changed. Return\r\n     * true if any changes were made, else return false.\r\n     */\r\n    private updateInstance(instance: PaginationInstance): boolean {\r\n        let changed = false;\r\n        for (let prop in this.instances[instance.id]) {\r\n            if (instance[prop] !== this.instances[instance.id][prop]) {\r\n                this.instances[instance.id][prop] = instance[prop];\r\n                changed = true;\r\n            }\r\n        }\r\n        return changed;\r\n    }\r\n\r\n    /**\r\n     * Returns the current page number.\r\n     */\r\n    public getCurrentPage(id: string): number {\r\n        if (this.instances[id]) {\r\n            return this.instances[id].currentPage;\r\n        }\r\n        return 1;\r\n    }\r\n\r\n    /**\r\n     * Sets the current page number.\r\n     */\r\n    public setCurrentPage(id: string, page: number) {\r\n        if (this.instances[id]) {\r\n            let instance = this.instances[id];\r\n            let maxPage = Math.ceil(instance.totalItems / instance.itemsPerPage);\r\n            if (page <= maxPage && 1 <= page) {\r\n                this.instances[id].currentPage = page;\r\n                this.change.emit(id);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the value of instance.totalItems\r\n     */\r\n    public setTotalItems(id: string, totalItems: number) {\r\n        if (this.instances[id] && 0 <= totalItems) {\r\n            this.instances[id].totalItems = totalItems;\r\n            this.change.emit(id);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the value of instance.itemsPerPage.\r\n     */\r\n    public setItemsPerPage(id: string, itemsPerPage: number) {\r\n        if (this.instances[id]) {\r\n            this.instances[id].itemsPerPage = itemsPerPage;\r\n            this.change.emit(id);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a clone of the pagination instance object matching the id. If no\r\n     * id specified, returns the instance corresponding to the default id.\r\n     */\r\n    public getInstance(id: string = this.DEFAULT_ID): PaginationInstance {\r\n        if (this.instances[id]) {\r\n            return this.clone(this.instances[id]);\r\n        }\r\n        return {} as PaginationInstance;\r\n    }\r\n\r\n    /**\r\n     * Perform a shallow clone of an object.\r\n     */\r\n    private clone(obj: any): any {\r\n        var target = {};\r\n        for (var i in obj) {\r\n            if (obj.hasOwnProperty(i)) {\r\n                target[i] = obj[i];\r\n            }\r\n        }\r\n        return target;\r\n    }\r\n\r\n}\r\n","import {Pipe} from \"@angular/core\";\r\nimport {PaginationService} from \"./pagination.service\";\r\nimport {PaginationInstance} from './pagination-instance';\r\n\r\nconst LARGE_NUMBER = Number.MAX_SAFE_INTEGER;\r\n\r\nexport type Collection<T> = T[] | ReadonlyArray<T>;\r\n\r\nexport interface PaginatePipeArgs {\r\n    id?: string;\r\n    itemsPerPage?: string | number;\r\n    currentPage?: string | number;\r\n    totalItems?: string | number;\r\n}\r\n\r\nexport interface PipeState {\r\n    collection: ArrayLike<any>;\r\n    size: number;\r\n    start: number;\r\n    end: number;\r\n    slice: ArrayLike<any>;\r\n}\r\n\r\n@Pipe({\r\n    name: 'paginate',\r\n    pure: false\r\n})\r\nexport class PaginatePipe {\r\n\r\n    // store the values from the last time the pipe was invoked\r\n    private state: { [id: string]: PipeState } = {};\r\n\r\n    constructor(private service: PaginationService) {\r\n    }\r\n\r\n    public transform<T, U extends Collection<T>>(collection: U, args: PaginatePipeArgs): U {\r\n\r\n        // When an observable is passed through the AsyncPipe, it will output\r\n        // `null` until the subscription resolves. In this case, we want to\r\n        // use the cached data from the `state` object to prevent the NgFor\r\n        // from flashing empty until the real values arrive.\r\n        if (!(collection instanceof Array)) {\r\n            let _id = args.id || this.service.defaultId();\r\n            if (this.state[_id]) {\r\n                return this.state[_id].slice as U;\r\n            } else {\r\n                return collection;\r\n            }\r\n        }\r\n\r\n        let serverSideMode = args.totalItems && args.totalItems !== collection.length;\r\n        let instance = this.createInstance(collection, args);\r\n        let id = instance.id;\r\n        let start, end;\r\n        let perPage = instance.itemsPerPage;\r\n\r\n        let emitChange = this.service.register(instance);\r\n\r\n        if (!serverSideMode && collection instanceof Array) {\r\n            perPage = +perPage || LARGE_NUMBER;\r\n            start = (instance.currentPage - 1) * perPage;\r\n            end = start + perPage;\r\n\r\n            let isIdentical = this.stateIsIdentical(id, collection, start, end);\r\n            if (isIdentical) {\r\n                return this.state[id].slice as U;\r\n            } else {\r\n                let slice = collection.slice(start, end);\r\n                this.saveState(id, collection, slice, start, end);\r\n                this.service.change.emit(id);\r\n                return slice as U;\r\n            }\r\n        } else {\r\n            if (emitChange) {\r\n                this.service.change.emit(id);\r\n            }\r\n\r\n            // save the state for server-side collection to avoid null\r\n            // flash as new data loads.\r\n            this.saveState(id, collection, collection, start, end);\r\n\r\n            return collection;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create an PaginationInstance object, using defaults for any optional properties not supplied.\r\n     */\r\n    private createInstance(collection: readonly any[], config: PaginatePipeArgs): PaginationInstance {\r\n        this.checkConfig(config);\r\n\r\n        return {\r\n            id: config.id != null ? config.id : this.service.defaultId(),\r\n            itemsPerPage: +config.itemsPerPage || 0,\r\n            currentPage: +config.currentPage || 1,\r\n            totalItems: +config.totalItems || collection.length\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Ensure the argument passed to the filter contains the required properties.\r\n     */\r\n    private checkConfig(config: PaginatePipeArgs): void {\r\n        const required = ['itemsPerPage', 'currentPage'];\r\n\r\n        const missing = required.filter(prop => !(prop in config));\r\n        if (0 < missing.length) {\r\n            throw new Error(`PaginatePipe: Argument is missing the following required properties: ${missing.join(', ')}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * To avoid returning a brand new array each time the pipe is run, we store the state of the sliced\r\n     * array for a given id. This means that the next time the pipe is run on this collection & id, we just\r\n     * need to check that the collection, start and end points are all identical, and if so, return the\r\n     * last sliced array.\r\n     */\r\n    private saveState(id: string, collection: ArrayLike<any>, slice: ArrayLike<any>, start: number, end: number) {\r\n        this.state[id] = {\r\n            collection,\r\n            size: collection.length,\r\n            slice,\r\n            start,\r\n            end\r\n        };\r\n    }\r\n\r\n    /**\r\n     * For a given id, returns true if the collection, size, start and end values are identical.\r\n     */\r\n    private stateIsIdentical(id: string, collection: ArrayLike<any>, start: number, end: number): boolean {\r\n        let state = this.state[id];\r\n        if (!state) {\r\n            return false;\r\n        }\r\n        let isMetaDataIdentical = state.size === collection.length &&\r\n            state.start === start &&\r\n            state.end === end;\r\n\r\n        if(!isMetaDataIdentical) {\r\n            return false;\r\n        }\r\n\r\n        return (state.slice as Array<any>).every((element, index) => element === collection[start + index]);\r\n    }\r\n}\r\n","/**\r\n * The default template and styles for the pagination links are borrowed directly\r\n * from Zurb Foundation 6: http://foundation.zurb.com/sites/docs/pagination.html\r\n */\r\n\r\nexport const DEFAULT_TEMPLATE = `\r\n    <pagination-template  #p=\"paginationApi\"\r\n                         [id]=\"id\"\r\n                         [maxSize]=\"maxSize\"\r\n                         (pageChange)=\"pageChange.emit($event)\"\r\n                         (pageBoundsCorrection)=\"pageBoundsCorrection.emit($event)\">\r\n    <nav role=\"navigation\" [attr.aria-label]=\"screenReaderPaginationLabel\">\r\n    <ul class=\"ngx-pagination\" \r\n        [class.responsive]=\"responsive\"\r\n        *ngIf=\"!(autoHide && p.pages.length <= 1)\">\r\n\r\n        <li class=\"pagination-previous\" [class.disabled]=\"p.isFirstPage()\" *ngIf=\"directionLinks\"> \r\n            <a tabindex=\"0\" *ngIf=\"1 < p.getCurrent()\" (keyup.enter)=\"p.previous()\" (click)=\"p.previous()\">\r\n                {{ previousLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\r\n            </a>\r\n            <span *ngIf=\"p.isFirstPage()\" aria-disabled=\"true\">\r\n                {{ previousLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\r\n            </span>\r\n        </li> \r\n\r\n        <li class=\"small-screen\">\r\n            {{ p.getCurrent() }} / {{ p.getLastPage() }}\r\n        </li>\r\n\r\n        <li [class.current]=\"p.getCurrent() === page.value\" \r\n            [class.ellipsis]=\"page.label === '...'\"\r\n            *ngFor=\"let page of p.pages; trackBy: trackByIndex\">\r\n            <a tabindex=\"0\" (keyup.enter)=\"p.setCurrent(page.value)\" (click)=\"p.setCurrent(page.value)\" *ngIf=\"p.getCurrent() !== page.value\">\r\n                <span class=\"show-for-sr\">{{ screenReaderPageLabel }} </span>\r\n                <span>{{ (page.label === '...') ? page.label : (page.label | number:'') }}</span>\r\n            </a>\r\n            <ng-container *ngIf=\"p.getCurrent() === page.value\">\r\n              <span aria-live=\"polite\">\r\n                <span class=\"show-for-sr\">{{ screenReaderCurrentLabel }} </span>\r\n                <span>{{ (page.label === '...') ? page.label : (page.label | number:'') }}</span> \r\n              </span>\r\n            </ng-container>\r\n        </li>\r\n\r\n        <li class=\"pagination-next\" [class.disabled]=\"p.isLastPage()\" *ngIf=\"directionLinks\">\r\n            <a tabindex=\"0\" *ngIf=\"!p.isLastPage()\" (keyup.enter)=\"p.next()\" (click)=\"p.next()\">\r\n                 {{ nextLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\r\n            </a>\r\n            <span *ngIf=\"p.isLastPage()\" aria-disabled=\"true\">\r\n                 {{ nextLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\r\n            </span>\r\n        </li>\r\n\r\n    </ul>\r\n    </nav>\r\n    </pagination-template>\r\n    `;\r\n\r\nexport const DEFAULT_STYLES = `\r\n.ngx-pagination {\r\n  margin-left: 0;\r\n  margin-bottom: 1rem; }\r\n  .ngx-pagination::before, .ngx-pagination::after {\r\n    content: ' ';\r\n    display: table; }\r\n  .ngx-pagination::after {\r\n    clear: both; }\r\n  .ngx-pagination li {\r\n    -moz-user-select: none;\r\n    -webkit-user-select: none;\r\n    -ms-user-select: none;\r\n    margin-right: 0.0625rem;\r\n    border-radius: 0; }\r\n  .ngx-pagination li {\r\n    display: inline-block; }\r\n  .ngx-pagination a,\r\n  .ngx-pagination button {\r\n    color: #0a0a0a; \r\n    display: block;\r\n    padding: 0.1875rem 0.625rem;\r\n    border-radius: 0; }\r\n    .ngx-pagination a:hover,\r\n    .ngx-pagination button:hover {\r\n      background: #e6e6e6; }\r\n  .ngx-pagination .current {\r\n    padding: 0.1875rem 0.625rem;\r\n    background: #2199e8;\r\n    color: #fefefe;\r\n    cursor: default; }\r\n  .ngx-pagination .disabled {\r\n    padding: 0.1875rem 0.625rem;\r\n    color: #cacaca;\r\n    cursor: default; } \r\n    .ngx-pagination .disabled:hover {\r\n      background: transparent; }\r\n  .ngx-pagination a, .ngx-pagination button {\r\n    cursor: pointer; }\r\n\r\n.ngx-pagination .pagination-previous a::before,\r\n.ngx-pagination .pagination-previous.disabled::before { \r\n  content: '«';\r\n  display: inline-block;\r\n  margin-right: 0.5rem; }\r\n\r\n.ngx-pagination .pagination-next a::after,\r\n.ngx-pagination .pagination-next.disabled::after {\r\n  content: '»';\r\n  display: inline-block;\r\n  margin-left: 0.5rem; }\r\n\r\n.ngx-pagination .show-for-sr {\r\n  position: absolute !important;\r\n  width: 1px;\r\n  height: 1px;\r\n  overflow: hidden;\r\n  clip: rect(0, 0, 0, 0); }\r\n.ngx-pagination .small-screen {\r\n  display: none; }\r\n@media screen and (max-width: 601px) {\r\n  .ngx-pagination.responsive .small-screen {\r\n    display: inline-block; } \r\n  .ngx-pagination.responsive li:not(.small-screen):not(.pagination-previous):not(.pagination-next) {\r\n    display: none; }\r\n}\r\n  `;\r\n","import {ChangeDetectorRef, Directive, EventEmitter, Input, Output} from '@angular/core';\r\nimport {Subscription} from 'rxjs';\r\n\r\nimport {PaginationService} from './pagination.service';\r\nimport {PaginationInstance} from './pagination-instance';\r\n\r\nexport interface Page {\r\n    label: string;\r\n    value: any;\r\n}\r\n\r\n/**\r\n * This directive is what powers all pagination controls components, including the default one.\r\n * It exposes an API which is hooked up to the PaginationService to keep the PaginatePipe in sync\r\n * with the pagination controls.\r\n */\r\n@Directive({\r\n    selector: 'pagination-template,[pagination-template]',\r\n    exportAs: 'paginationApi'\r\n})\r\nexport class PaginationControlsDirective {\r\n    @Input() id: string;\r\n    @Input() maxSize: number = 7;\r\n    @Output() pageChange: EventEmitter<number> = new EventEmitter<number>();\r\n    @Output() pageBoundsCorrection: EventEmitter<number> = new EventEmitter<number>();\r\n    pages: Page[] = [];\r\n\r\n    private changeSub: Subscription;\r\n\r\n    constructor(private service: PaginationService,\r\n                private changeDetectorRef: ChangeDetectorRef) {\r\n        this.changeSub = this.service.change\r\n            .subscribe(id => {\r\n                if (this.id === id) {\r\n                    this.updatePageLinks();\r\n                    this.changeDetectorRef.markForCheck();\r\n                    this.changeDetectorRef.detectChanges();\r\n                }\r\n            });\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (this.id === undefined) {\r\n            this.id = this.service.defaultId();\r\n        }\r\n        this.updatePageLinks();\r\n    }\r\n\r\n    ngOnChanges(changes: any) {\r\n        this.updatePageLinks();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.changeSub.unsubscribe();\r\n    }\r\n\r\n    /**\r\n     * Go to the previous page\r\n     */\r\n    previous() {\r\n        this.checkValidId();\r\n        this.setCurrent(this.getCurrent() - 1);\r\n    }\r\n\r\n    /**\r\n     * Go to the next page\r\n     */\r\n    next() {\r\n        this.checkValidId();\r\n        this.setCurrent(this.getCurrent() + 1);\r\n    }\r\n\r\n    /**\r\n     * Returns true if current page is first page\r\n     */\r\n    isFirstPage(): boolean {\r\n        return this.getCurrent() === 1;\r\n    }\r\n\r\n    /**\r\n     * Returns true if current page is last page\r\n     */\r\n    isLastPage(): boolean {\r\n        return this.getLastPage() === this.getCurrent();\r\n    }\r\n\r\n    /**\r\n     * Set the current page number.\r\n     */\r\n    setCurrent(page: number) {\r\n        this.pageChange.emit(page);\r\n    }\r\n\r\n    /**\r\n     * Get the current page number.\r\n     */\r\n    getCurrent(): number {\r\n        return this.service.getCurrentPage(this.id);\r\n    }\r\n\r\n    /**\r\n     * Returns the last page number\r\n     */\r\n    getLastPage(): number {\r\n        let inst = this.service.getInstance(this.id);\r\n        if (inst.totalItems < 1) {\r\n            // when there are 0 or fewer (an error case) items, there are no \"pages\" as such,\r\n            // but it makes sense to consider a single, empty page as the last page.\r\n            return 1;\r\n        }\r\n        return Math.ceil(inst.totalItems / inst.itemsPerPage);\r\n    }\r\n\r\n    getTotalItems(): number {\r\n        return this.service.getInstance(this.id).totalItems;\r\n    }\r\n\r\n    private checkValidId() {\r\n        if (this.service.getInstance(this.id).id == null) {\r\n            console.warn(`PaginationControlsDirective: the specified id \"${this.id}\" does not match any registered PaginationInstance`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the page links and checks that the current page is valid. Should run whenever the\r\n     * PaginationService.change stream emits a value matching the current ID, or when any of the\r\n     * input values changes.\r\n     */\r\n    private updatePageLinks() {\r\n        let inst = this.service.getInstance(this.id);\r\n        const correctedCurrentPage = this.outOfBoundCorrection(inst);\r\n\r\n        if (correctedCurrentPage !== inst.currentPage) {\r\n            setTimeout(() => {\r\n                this.pageBoundsCorrection.emit(correctedCurrentPage);\r\n                this.pages = this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, this.maxSize);\r\n            });\r\n        } else {\r\n            this.pages = this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, this.maxSize);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks that the instance.currentPage property is within bounds for the current page range.\r\n     * If not, return a correct value for currentPage, or the current value if OK.\r\n     */\r\n    private outOfBoundCorrection(instance: PaginationInstance): number {\r\n        const totalPages = Math.ceil(instance.totalItems / instance.itemsPerPage);\r\n        if (totalPages < instance.currentPage && 0 < totalPages) {\r\n            return totalPages;\r\n        } else if (instance.currentPage < 1) {\r\n            return 1;\r\n        }\r\n\r\n        return instance.currentPage;\r\n    }\r\n\r\n    /**\r\n     * Returns an array of Page objects to use in the pagination controls.\r\n     */\r\n    private createPageArray(currentPage: number, itemsPerPage: number, totalItems: number, paginationRange: number): Page[] {\r\n        // paginationRange could be a string if passed from attribute, so cast to number.\r\n        paginationRange = +paginationRange;\r\n        let pages = [];\r\n        \r\n        // Return 1 as default page number\r\n        // Make sense to show 1 instead of empty when there are no items\r\n        const totalPages = Math.max(Math.ceil(totalItems / itemsPerPage), 1);\r\n        const halfWay = Math.ceil(paginationRange / 2);\r\n\r\n        const isStart = currentPage <= halfWay;\r\n        const isEnd = totalPages - halfWay < currentPage;\r\n        const isMiddle = !isStart && !isEnd;\r\n\r\n        let ellipsesNeeded = paginationRange < totalPages;\r\n        let i = 1;\r\n\r\n        while (i <= totalPages && i <= paginationRange) {\r\n            let label;\r\n            let pageNumber = this.calculatePageNumber(i, currentPage, paginationRange, totalPages);\r\n            let openingEllipsesNeeded = (i === 2 && (isMiddle || isEnd));\r\n            let closingEllipsesNeeded = (i === paginationRange - 1 && (isMiddle || isStart));\r\n            if (ellipsesNeeded && (openingEllipsesNeeded || closingEllipsesNeeded)) {\r\n                label = '...';\r\n            } else {\r\n                label = pageNumber;\r\n            }\r\n            pages.push({\r\n                label: label,\r\n                value: pageNumber\r\n            });\r\n            i ++;\r\n        }\r\n        return pages;\r\n    }\r\n\r\n    /**\r\n     * Given the position in the sequence of pagination links [i],\r\n     * figure out what page number corresponds to that position.\r\n     */\r\n    private calculatePageNumber(i: number, currentPage: number, paginationRange: number, totalPages: number) {\r\n        let halfWay = Math.ceil(paginationRange / 2);\r\n        if (i === paginationRange) {\r\n            return totalPages;\r\n        } else if (i === 1) {\r\n            return i;\r\n        } else if (paginationRange < totalPages) {\r\n            if (totalPages - halfWay < currentPage) {\r\n                return totalPages - paginationRange + i;\r\n            } else if (halfWay < currentPage) {\r\n                return currentPage - halfWay + i;\r\n            } else {\r\n                return i;\r\n            }\r\n        } else {\r\n            return i;\r\n        }\r\n    }\r\n}\r\n","import {Component, Input, Output, EventEmitter, ChangeDetectionStrategy, ViewEncapsulation} from '@angular/core'\r\nimport {DEFAULT_TEMPLATE, DEFAULT_STYLES} from './template';\r\n\r\nfunction coerceToBoolean(input: string | boolean): boolean {\r\n    return !!input && input !== 'false';\r\n}\r\n\r\n/**\r\n * The default pagination controls component. Actually just a default implementation of a custom template.\r\n */\r\n@Component({\r\n    selector: 'pagination-controls',\r\n    template: DEFAULT_TEMPLATE,\r\n    styles: [DEFAULT_STYLES],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class PaginationControlsComponent {\r\n\r\n    @Input() id: string;\r\n    @Input() maxSize: number = 7;\r\n    @Input()\r\n    get directionLinks(): boolean {\r\n        return this._directionLinks;\r\n    }\r\n    set directionLinks(value: boolean) {\r\n        this._directionLinks = coerceToBoolean(value);\r\n    }\r\n    @Input()\r\n    get autoHide(): boolean {\r\n        return this._autoHide;\r\n    }\r\n    set autoHide(value: boolean) {\r\n        this._autoHide = coerceToBoolean(value);\r\n    }\r\n    @Input()\r\n    get responsive(): boolean {\r\n        return this._responsive;\r\n    }\r\n    set responsive(value: boolean) {\r\n        this._responsive = coerceToBoolean(value);\r\n    }\r\n    @Input() previousLabel: string = 'Previous';\r\n    @Input() nextLabel: string = 'Next';\r\n    @Input() screenReaderPaginationLabel: string = 'Pagination';\r\n    @Input() screenReaderPageLabel: string = 'page';\r\n    @Input() screenReaderCurrentLabel: string = `You're on page`;\r\n    @Output() pageChange: EventEmitter<number> = new EventEmitter<number>();\r\n    @Output() pageBoundsCorrection: EventEmitter<number> = new EventEmitter<number>();\r\n\r\n    private _directionLinks: boolean = true;\r\n    private _autoHide: boolean = false;\r\n    private _responsive: boolean = false;\r\n\r\n    trackByIndex(index: number) {\r\n        return index;\r\n    }\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {PaginatePipe} from './paginate.pipe';\r\nimport {PaginationService} from './pagination.service';\r\nimport {PaginationControlsComponent} from './pagination-controls.component';\r\nimport {PaginationControlsDirective} from './pagination-controls.directive';\r\n\r\nexport {PaginationInstance} from './pagination-instance';\r\nexport {PaginationService} from './pagination.service';\r\nexport {PaginationControlsComponent} from './pagination-controls.component';\r\nexport {PaginationControlsDirective} from './pagination-controls.directive';\r\nexport {PaginatePipe} from './paginate.pipe';\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    declarations: [\r\n        PaginatePipe,\r\n        PaginationControlsComponent,\r\n        PaginationControlsDirective\r\n    ],\r\n    providers: [PaginationService],\r\n    exports: [PaginatePipe, PaginationControlsComponent, PaginationControlsDirective]\r\n})\r\nexport class NgxPaginationModule { }\r\n","/*\r\n * Public API Surface of ngx-pagination\r\n */\r\n\r\nexport * from './lib/paginate.pipe';\r\nexport * from './lib/pagination.service';\r\nexport * from './lib/pagination-controls.component';\r\nexport * from './lib/pagination-controls.directive';\r\nexport * from './lib/pagination-instance';\r\nexport * from './lib/ngx-pagination.module';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}