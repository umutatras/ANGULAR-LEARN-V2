{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, Pipe, Component, ChangeDetectionStrategy, Optional, Inject, Input, ViewChild, NgModule } from '@angular/core';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i1 from '@angular/platform-browser';\nconst _c0 = [\"overlay\"];\nfunction NgxSpinnerComponent_div_0_div_2_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\");\n  }\n}\nfunction NgxSpinnerComponent_div_0_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, NgxSpinnerComponent_div_0_div_2_div_1_Template, 1, 0, \"div\", 6);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassMap(ctx_r2.spinner.class);\n    i0.ɵɵstyleProp(\"color\", ctx_r2.spinner.color);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.spinner.divArray);\n  }\n}\nfunction NgxSpinnerComponent_div_0_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 7);\n    i0.ɵɵpipe(1, \"safeHtml\");\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"innerHTML\", i0.ɵɵpipeBind1(1, 1, ctx_r3.template), i0.ɵɵsanitizeHtml);\n  }\n}\nfunction NgxSpinnerComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1, 2);\n    i0.ɵɵtemplate(2, NgxSpinnerComponent_div_0_div_2_Template, 2, 5, \"div\", 3);\n    i0.ɵɵtemplate(3, NgxSpinnerComponent_div_0_div_3_Template, 2, 3, \"div\", 4);\n    i0.ɵɵelementStart(4, \"div\", 5);\n    i0.ɵɵprojection(5);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"background-color\", ctx_r0.spinner.bdColor)(\"z-index\", ctx_r0.spinner.zIndex)(\"position\", ctx_r0.spinner.fullScreen ? \"fixed\" : \"absolute\");\n    i0.ɵɵproperty(\"@.disabled\", ctx_r0.disableAnimation)(\"@fadeIn\", \"in\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.template);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.template);\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"z-index\", ctx_r0.spinner.zIndex);\n  }\n}\nconst _c1 = [\"*\"];\nconst LOADERS = {\n  \"ball-8bits\": 16,\n  \"ball-atom\": 4,\n  \"ball-beat\": 3,\n  \"ball-circus\": 5,\n  \"ball-climbing-dot\": 4,\n  \"ball-clip-rotate\": 1,\n  \"ball-clip-rotate-multiple\": 2,\n  \"ball-clip-rotate-pulse\": 2,\n  \"ball-elastic-dots\": 5,\n  \"ball-fall\": 3,\n  \"ball-fussion\": 4,\n  \"ball-grid-beat\": 9,\n  \"ball-grid-pulse\": 9,\n  \"ball-newton-cradle\": 4,\n  \"ball-pulse\": 3,\n  \"ball-pulse-rise\": 5,\n  \"ball-pulse-sync\": 3,\n  \"ball-rotate\": 1,\n  \"ball-running-dots\": 5,\n  \"ball-scale\": 1,\n  \"ball-scale-multiple\": 3,\n  \"ball-scale-pulse\": 2,\n  \"ball-scale-ripple\": 1,\n  \"ball-scale-ripple-multiple\": 3,\n  \"ball-spin\": 8,\n  \"ball-spin-clockwise\": 8,\n  \"ball-spin-clockwise-fade\": 8,\n  \"ball-spin-clockwise-fade-rotating\": 8,\n  \"ball-spin-fade\": 8,\n  \"ball-spin-fade-rotating\": 8,\n  \"ball-spin-rotate\": 2,\n  \"ball-square-clockwise-spin\": 8,\n  \"ball-square-spin\": 8,\n  \"ball-triangle-path\": 3,\n  \"ball-zig-zag\": 2,\n  \"ball-zig-zag-deflect\": 2,\n  cog: 1,\n  \"cube-transition\": 2,\n  fire: 3,\n  \"line-scale\": 5,\n  \"line-scale-party\": 5,\n  \"line-scale-pulse-out\": 5,\n  \"line-scale-pulse-out-rapid\": 5,\n  \"line-spin-clockwise-fade\": 8,\n  \"line-spin-clockwise-fade-rotating\": 8,\n  \"line-spin-fade\": 8,\n  \"line-spin-fade-rotating\": 8,\n  pacman: 6,\n  \"square-jelly-box\": 2,\n  \"square-loader\": 1,\n  \"square-spin\": 1,\n  timer: 1,\n  \"triangle-skew-spin\": 1\n};\nconst DEFAULTS = {\n  BD_COLOR: \"rgba(51,51,51,0.8)\",\n  SPINNER_COLOR: \"#fff\",\n  Z_INDEX: 99999\n};\nconst PRIMARY_SPINNER = \"primary\";\nclass NgxSpinner {\n  constructor(init) {\n    Object.assign(this, init);\n  }\n  static create(init) {\n    if (!init?.template && !init?.type) {\n      console.warn(`[ngx-spinner]: Property \"type\" is missed. Please, provide animation type to <ngx-spinner> component\n        and ensure css is added to angular.json file`);\n    }\n    return new NgxSpinner(init);\n  }\n}\nclass NgxSpinnerService {\n  /**\n   * Creates an instance of NgxSpinnerService.\n   * @memberof NgxSpinnerService\n   */\n  constructor() {\n    /**\n     * Spinner observable\n     *\n     * @memberof NgxSpinnerService\n     */\n    // private spinnerObservable = new ReplaySubject<NgxSpinner>(1);\n    this.spinnerObservable = new BehaviorSubject(null);\n  }\n  /**\n   * Get subscription of desired spinner\n   * @memberof NgxSpinnerService\n   **/\n  getSpinner(name) {\n    return this.spinnerObservable.asObservable().pipe(filter(x => x && x.name === name));\n  }\n  /**\n   * To show spinner\n   *\n   * @memberof NgxSpinnerService\n   */\n  show(name = PRIMARY_SPINNER, spinner) {\n    return new Promise((resolve, _reject) => {\n      setTimeout(() => {\n        if (spinner && Object.keys(spinner).length) {\n          spinner[\"name\"] = name;\n          this.spinnerObservable.next(new NgxSpinner({\n            ...spinner,\n            show: true\n          }));\n          resolve(true);\n        } else {\n          this.spinnerObservable.next(new NgxSpinner({\n            name,\n            show: true\n          }));\n          resolve(true);\n        }\n      }, 10);\n    });\n  }\n  /**\n   * To hide spinner\n   *\n   * @memberof NgxSpinnerService\n   */\n  hide(name = PRIMARY_SPINNER, debounce = 10) {\n    return new Promise((resolve, _reject) => {\n      setTimeout(() => {\n        this.spinnerObservable.next(new NgxSpinner({\n          name,\n          show: false\n        }));\n        resolve(true);\n      }, debounce);\n    });\n  }\n  static {\n    this.ɵfac = function NgxSpinnerService_Factory(t) {\n      return new (t || NgxSpinnerService)();\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: NgxSpinnerService,\n      factory: NgxSpinnerService.ɵfac,\n      providedIn: \"root\"\n    });\n  }\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxSpinnerService, [{\n    type: Injectable,\n    args: [{\n      providedIn: \"root\"\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\nconst NGX_SPINNER_CONFIG = new InjectionToken(\"NGX_SPINNER_CONFIG\");\nclass SafeHtmlPipe {\n  constructor(_sanitizer) {\n    this._sanitizer = _sanitizer;\n  }\n  transform(v) {\n    if (v) {\n      return this._sanitizer.bypassSecurityTrustHtml(v);\n    }\n  }\n  static {\n    this.ɵfac = function SafeHtmlPipe_Factory(t) {\n      return new (t || SafeHtmlPipe)(i0.ɵɵdirectiveInject(i1.DomSanitizer, 16));\n    };\n  }\n  static {\n    this.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n      name: \"safeHtml\",\n      type: SafeHtmlPipe,\n      pure: true\n    });\n  }\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SafeHtmlPipe, [{\n    type: Pipe,\n    args: [{\n      name: \"safeHtml\"\n    }]\n  }], function () {\n    return [{\n      type: i1.DomSanitizer\n    }];\n  }, null);\n})();\nclass NgxSpinnerComponent {\n  // TODO: https://github.com/Napster2210/ngx-spinner/issues/259\n  // @HostListener(\"document:keydown\", [\"$event\"])\n  // handleKeyboardEvent(event: KeyboardEvent) {\n  //   if (this.spinnerDOM && this.spinnerDOM.nativeElement) {\n  //     if (\n  //       this.fullScreen ||\n  //       (!this.fullScreen && this.isSpinnerZone(event.target))\n  //     ) {\n  //       event.returnValue = false;\n  //       event.preventDefault();\n  //     }\n  //   }\n  // }\n  /**\n   * Creates an instance of NgxSpinnerComponent.\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  constructor(spinnerService, changeDetector, elementRef, globalConfig) {\n    this.spinnerService = spinnerService;\n    this.changeDetector = changeDetector;\n    this.elementRef = elementRef;\n    this.globalConfig = globalConfig;\n    /**\n     * To enable/disable animation\n     *\n     * @type {boolean}\n     * @memberof NgxSpinnerComponent\n     */\n    this.disableAnimation = false;\n    /**\n     * Spinner Object\n     *\n     * @memberof NgxSpinnerComponent\n     */\n    this.spinner = new NgxSpinner();\n    /**\n     * Unsubscribe from spinner's observable\n     *\n     * @memberof NgxSpinnerComponent\n     **/\n    this.ngUnsubscribe = new Subject();\n    /**\n     * To set default ngx-spinner options\n     *\n     * @memberof NgxSpinnerComponent\n     */\n    this.setDefaultOptions = () => {\n      const {\n        type\n      } = this.globalConfig ?? {};\n      this.spinner = NgxSpinner.create({\n        name: this.name,\n        bdColor: this.bdColor,\n        size: this.size,\n        color: this.color,\n        type: this.type ?? type,\n        fullScreen: this.fullScreen,\n        divArray: this.divArray,\n        divCount: this.divCount,\n        show: this.show,\n        zIndex: this.zIndex,\n        template: this.template,\n        showSpinner: this.showSpinner\n      });\n    };\n    this.bdColor = DEFAULTS.BD_COLOR;\n    this.zIndex = DEFAULTS.Z_INDEX;\n    this.color = DEFAULTS.SPINNER_COLOR;\n    this.size = \"large\";\n    this.fullScreen = true;\n    this.name = PRIMARY_SPINNER;\n    this.template = null;\n    this.showSpinner = false;\n    this.divArray = [];\n    this.divCount = 0;\n    this.show = false;\n  }\n  initObservable() {\n    this.spinnerService.getSpinner(this.name).pipe(takeUntil(this.ngUnsubscribe)).subscribe(spinner => {\n      this.setDefaultOptions();\n      Object.assign(this.spinner, spinner);\n      if (spinner.show) {\n        this.onInputChange();\n      }\n      this.changeDetector.detectChanges();\n    });\n  }\n  /**\n   * Initialization method\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  ngOnInit() {\n    this.setDefaultOptions();\n    this.initObservable();\n  }\n  /**\n   * To check event triggers inside the Spinner Zone\n   *\n   * @param {*} element\n   * @returns {boolean}\n   * @memberof NgxSpinnerComponent\n   */\n  isSpinnerZone(element) {\n    if (element === this.elementRef.nativeElement.parentElement) {\n      return true;\n    }\n    return element.parentNode && this.isSpinnerZone(element.parentNode);\n  }\n  /**\n   * On changes event for input variables\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  ngOnChanges(changes) {\n    for (const propName in changes) {\n      if (propName) {\n        const changedProp = changes[propName];\n        if (changedProp.isFirstChange()) {\n          return;\n        } else if (typeof changedProp.currentValue !== \"undefined\" && changedProp.currentValue !== changedProp.previousValue) {\n          if (changedProp.currentValue !== \"\") {\n            this.spinner[propName] = changedProp.currentValue;\n            if (propName === \"showSpinner\") {\n              if (changedProp.currentValue) {\n                this.spinnerService.show(this.spinner.name, this.spinner);\n              } else {\n                this.spinnerService.hide(this.spinner.name);\n              }\n            }\n            if (propName === \"name\") {\n              this.initObservable();\n            }\n          }\n        }\n      }\n    }\n  }\n  /**\n   * To get class for spinner\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  getClass(type, size) {\n    this.spinner.divCount = LOADERS[type];\n    this.spinner.divArray = Array(this.spinner.divCount).fill(0).map((_, i) => i);\n    let sizeClass = \"\";\n    switch (size.toLowerCase()) {\n      case \"small\":\n        sizeClass = \"la-sm\";\n        break;\n      case \"medium\":\n        sizeClass = \"la-2x\";\n        break;\n      case \"large\":\n        sizeClass = \"la-3x\";\n        break;\n      default:\n        break;\n    }\n    return \"la-\" + type + \" \" + sizeClass;\n  }\n  /**\n   * Check if input variables have changed\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  onInputChange() {\n    this.spinner.class = this.getClass(this.spinner.type, this.spinner.size);\n  }\n  /**\n   * Component destroy event\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  ngOnDestroy() {\n    this.ngUnsubscribe.next();\n    this.ngUnsubscribe.complete();\n  }\n  static {\n    this.ɵfac = function NgxSpinnerComponent_Factory(t) {\n      return new (t || NgxSpinnerComponent)(i0.ɵɵdirectiveInject(NgxSpinnerService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(NGX_SPINNER_CONFIG, 8));\n    };\n  }\n  static {\n    this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: NgxSpinnerComponent,\n      selectors: [[\"ngx-spinner\"]],\n      viewQuery: function NgxSpinnerComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.spinnerDOM = _t.first);\n        }\n      },\n      inputs: {\n        bdColor: \"bdColor\",\n        size: \"size\",\n        color: \"color\",\n        type: \"type\",\n        fullScreen: \"fullScreen\",\n        name: \"name\",\n        zIndex: \"zIndex\",\n        template: \"template\",\n        showSpinner: \"showSpinner\",\n        disableAnimation: \"disableAnimation\"\n      },\n      features: [i0.ɵɵNgOnChangesFeature],\n      ngContentSelectors: _c1,\n      decls: 1,\n      vars: 1,\n      consts: [[\"class\", \"ngx-spinner-overlay\", 3, \"background-color\", \"z-index\", \"position\", 4, \"ngIf\"], [1, \"ngx-spinner-overlay\"], [\"overlay\", \"\"], [3, \"class\", \"color\", 4, \"ngIf\"], [3, \"innerHTML\", 4, \"ngIf\"], [1, \"loading-text\"], [4, \"ngFor\", \"ngForOf\"], [3, \"innerHTML\"]],\n      template: function NgxSpinnerComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef();\n          i0.ɵɵtemplate(0, NgxSpinnerComponent_div_0_Template, 6, 12, \"div\", 0);\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"ngIf\", ctx.spinner.show);\n        }\n      },\n      dependencies: [i2.NgForOf, i2.NgIf, SafeHtmlPipe],\n      styles: [\".ngx-spinner-overlay[_ngcontent-%COMP%]{position:fixed;top:0;left:0;width:100%;height:100%}.ngx-spinner-overlay[_ngcontent-%COMP%] > div[_ngcontent-%COMP%]:not(.loading-text){top:50%;left:50%;margin:0;position:absolute;transform:translate(-50%,-50%)}.loading-text[_ngcontent-%COMP%]{position:absolute;top:60%;left:50%;transform:translate(-50%,-60%)}\"],\n      data: {\n        animation: [trigger(\"fadeIn\", [state(\"in\", style({\n          opacity: 1\n        })), transition(\":enter\", [style({\n          opacity: 0\n        }), animate(300)]), transition(\":leave\", animate(200, style({\n          opacity: 0\n        })))])]\n      },\n      changeDetection: 0\n    });\n  }\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxSpinnerComponent, [{\n    type: Component,\n    args: [{\n      selector: \"ngx-spinner\",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger(\"fadeIn\", [state(\"in\", style({\n        opacity: 1\n      })), transition(\":enter\", [style({\n        opacity: 0\n      }), animate(300)]), transition(\":leave\", animate(200, style({\n        opacity: 0\n      })))])],\n      template: \"<div\\n  [@.disabled]=\\\"disableAnimation\\\"\\n  [@fadeIn]=\\\"'in'\\\"\\n  *ngIf=\\\"spinner.show\\\"\\n  class=\\\"ngx-spinner-overlay\\\"\\n  [style.background-color]=\\\"spinner.bdColor\\\"\\n  [style.z-index]=\\\"spinner.zIndex\\\"\\n  [style.position]=\\\"spinner.fullScreen ? 'fixed' : 'absolute'\\\"\\n  #overlay\\n>\\n  <div *ngIf=\\\"!template\\\" [class]=\\\"spinner.class\\\" [style.color]=\\\"spinner.color\\\">\\n    <div *ngFor=\\\"let index of spinner.divArray\\\"></div>\\n  </div>\\n  <div *ngIf=\\\"template\\\" [innerHTML]=\\\"template | safeHtml\\\"></div>\\n  <div class=\\\"loading-text\\\" [style.z-index]=\\\"spinner.zIndex\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</div>\\n\",\n      styles: [\".ngx-spinner-overlay{position:fixed;top:0;left:0;width:100%;height:100%}.ngx-spinner-overlay>div:not(.loading-text){top:50%;left:50%;margin:0;position:absolute;transform:translate(-50%,-50%)}.loading-text{position:absolute;top:60%;left:50%;transform:translate(-50%,-60%)}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: NgxSpinnerService\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [NGX_SPINNER_CONFIG]\n      }]\n    }];\n  }, {\n    bdColor: [{\n      type: Input\n    }],\n    size: [{\n      type: Input\n    }],\n    color: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    fullScreen: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    zIndex: [{\n      type: Input\n    }],\n    template: [{\n      type: Input\n    }],\n    showSpinner: [{\n      type: Input\n    }],\n    disableAnimation: [{\n      type: Input\n    }],\n    spinnerDOM: [{\n      type: ViewChild,\n      args: [\"overlay\"]\n    }]\n  });\n})();\nclass NgxSpinnerModule {\n  static forRoot(config) {\n    return {\n      ngModule: NgxSpinnerModule,\n      providers: [{\n        provide: NGX_SPINNER_CONFIG,\n        useValue: config\n      }]\n    };\n  }\n  static {\n    this.ɵfac = function NgxSpinnerModule_Factory(t) {\n      return new (t || NgxSpinnerModule)();\n    };\n  }\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: NgxSpinnerModule\n    });\n  }\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      imports: [CommonModule]\n    });\n  }\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxSpinnerModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [NgxSpinnerComponent, SafeHtmlPipe],\n      exports: [NgxSpinnerComponent]\n    }]\n  }], null, null);\n})();\n\n/*\n * Public API Surface of ngx-spinner\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DEFAULTS, LOADERS, NgxSpinner, NgxSpinnerComponent, NgxSpinnerModule, NgxSpinnerService, PRIMARY_SPINNER };","map":{"version":3,"names":["NgxSpinnerComponent_div_0_div_2_Template","rf","ctx","ctx_r2","NgxSpinnerComponent_div_0_div_3_Template","NgxSpinnerComponent_div_0_Template","ctx_r0","spinner","zIndex","fullScreen","_c1","LOADERS","cog","fire","pacman","timer","DEFAULTS","BD_COLOR","SPINNER_COLOR","Z_INDEX","PRIMARY_SPINNER","NgxSpinner","constructor","init","Object","assign","create","template","type","console","warn","NgxSpinnerService","spinnerObservable","BehaviorSubject","getSpinner","name","asObservable","pipe","filter","x","show","Promise","resolve","_reject","setTimeout","keys","length","next","hide","debounce","ɵprov","factory","ɵfac","providedIn","Injectable","args","NGX_SPINNER_CONFIG","InjectionToken","SafeHtmlPipe","_sanitizer","transform","v","bypassSecurityTrustHtml","i1","DomSanitizer","pure","Pipe","NgxSpinnerComponent","spinnerService","changeDetector","elementRef","globalConfig","disableAnimation","ngUnsubscribe","Subject","setDefaultOptions","bdColor","size","color","divArray","divCount","showSpinner","initObservable","takeUntil","subscribe","onInputChange","detectChanges","ngOnInit","isSpinnerZone","element","nativeElement","parentElement","parentNode","ngOnChanges","changes","propName","changedProp","isFirstChange","currentValue","previousValue","getClass","Array","fill","map","_","i","sizeClass","toLowerCase","class","ngOnDestroy","complete","NgxSpinnerComponent_Factory","t","i0","ChangeDetectorRef","ElementRef","selectors","viewQuery","NgxSpinnerComponent_Query","dependencies","i2","NgForOf","NgIf","styles","data","animation","trigger","state","style","opacity","transition","animate","changeDetection","Component","selector","ChangeDetectionStrategy","OnPush","animations","Optional","Inject","Input","spinnerDOM","ViewChild","NgxSpinnerModule","forRoot","config","ngModule","providers","provide","useValue","ɵmod","ɵinj","CommonModule","NgModule","imports","declarations","exports"],"sources":["C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\projects\\ngx-spinner\\src\\lib\\ngx-spinner.enum.ts","C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\projects\\ngx-spinner\\src\\lib\\ngx-spinner.service.ts","C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\projects\\ngx-spinner\\src\\lib\\config.ts","C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\projects\\ngx-spinner\\src\\lib\\safe-html.pipe.ts","C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\projects\\ngx-spinner\\src\\lib\\ngx-spinner.component.ts","C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\projects\\ngx-spinner\\src\\lib\\ngx-spinner.component.html","C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\projects\\ngx-spinner\\src\\lib\\ngx-spinner.module.ts","C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\projects\\ngx-spinner\\src\\public_api.ts","C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\projects\\ngx-spinner\\src\\ngx-spinner.ts"],"sourcesContent":["export const LOADERS = {\n  \"ball-8bits\": 16,\n  \"ball-atom\": 4,\n  \"ball-beat\": 3,\n  \"ball-circus\": 5,\n  \"ball-climbing-dot\": 4,\n  \"ball-clip-rotate\": 1,\n  \"ball-clip-rotate-multiple\": 2,\n  \"ball-clip-rotate-pulse\": 2,\n  \"ball-elastic-dots\": 5,\n  \"ball-fall\": 3,\n  \"ball-fussion\": 4,\n  \"ball-grid-beat\": 9,\n  \"ball-grid-pulse\": 9,\n  \"ball-newton-cradle\": 4,\n  \"ball-pulse\": 3,\n  \"ball-pulse-rise\": 5,\n  \"ball-pulse-sync\": 3,\n  \"ball-rotate\": 1,\n  \"ball-running-dots\": 5,\n  \"ball-scale\": 1,\n  \"ball-scale-multiple\": 3,\n  \"ball-scale-pulse\": 2,\n  \"ball-scale-ripple\": 1,\n  \"ball-scale-ripple-multiple\": 3,\n  \"ball-spin\": 8,\n  \"ball-spin-clockwise\": 8,\n  \"ball-spin-clockwise-fade\": 8,\n  \"ball-spin-clockwise-fade-rotating\": 8,\n  \"ball-spin-fade\": 8,\n  \"ball-spin-fade-rotating\": 8,\n  \"ball-spin-rotate\": 2,\n  \"ball-square-clockwise-spin\": 8,\n  \"ball-square-spin\": 8,\n  \"ball-triangle-path\": 3,\n  \"ball-zig-zag\": 2,\n  \"ball-zig-zag-deflect\": 2,\n  cog: 1,\n  \"cube-transition\": 2,\n  fire: 3,\n  \"line-scale\": 5,\n  \"line-scale-party\": 5,\n  \"line-scale-pulse-out\": 5,\n  \"line-scale-pulse-out-rapid\": 5,\n  \"line-spin-clockwise-fade\": 8,\n  \"line-spin-clockwise-fade-rotating\": 8,\n  \"line-spin-fade\": 8,\n  \"line-spin-fade-rotating\": 8,\n  pacman: 6,\n  \"square-jelly-box\": 2,\n  \"square-loader\": 1,\n  \"square-spin\": 1,\n  timer: 1,\n  \"triangle-skew-spin\": 1,\n};\n\nexport const DEFAULTS = {\n  BD_COLOR: \"rgba(51,51,51,0.8)\",\n  SPINNER_COLOR: \"#fff\",\n  Z_INDEX: 99999,\n};\n\nexport const PRIMARY_SPINNER = \"primary\";\n\nexport type Size = \"default\" | \"small\" | \"medium\" | \"large\";\n\nexport interface Spinner {\n  bdColor?: string;\n  size?: Size;\n  color?: string;\n  type?: string;\n  fullScreen?: boolean;\n  zIndex?: number;\n  template?: string;\n  showSpinner?: boolean;\n}\n\nexport class NgxSpinner {\n  name: string;\n  bdColor: string;\n  size: Size;\n  color: string;\n  type: string;\n  class: string;\n  divCount: number;\n  divArray: Array<number>;\n  fullScreen: boolean;\n  show: boolean;\n  zIndex: number;\n  template: string;\n  showSpinner: boolean;\n\n  constructor(init?: Partial<NgxSpinner>) {\n    Object.assign(this, init);\n  }\n\n  static create(init?: Partial<NgxSpinner>): NgxSpinner {\n    if (!init?.template && !init?.type) {\n      console.warn(`[ngx-spinner]: Property \"type\" is missed. Please, provide animation type to <ngx-spinner> component\n        and ensure css is added to angular.json file`);\n    }\n    return new NgxSpinner(init);\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { Observable, BehaviorSubject } from \"rxjs\";\nimport { filter } from \"rxjs/operators\";\nimport { NgxSpinner, PRIMARY_SPINNER, Spinner } from \"./ngx-spinner.enum\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class NgxSpinnerService {\n  /**\n   * Spinner observable\n   *\n   * @memberof NgxSpinnerService\n   */\n  // private spinnerObservable = new ReplaySubject<NgxSpinner>(1);\n  public spinnerObservable = new BehaviorSubject<NgxSpinner>(null);\n  /**\n   * Creates an instance of NgxSpinnerService.\n   * @memberof NgxSpinnerService\n   */\n  constructor() {}\n  /**\n   * Get subscription of desired spinner\n   * @memberof NgxSpinnerService\n   **/\n  getSpinner(name: string): Observable<NgxSpinner> {\n    return this.spinnerObservable\n      .asObservable()\n      .pipe(filter((x: NgxSpinner) => x && x.name === name));\n  }\n  /**\n   * To show spinner\n   *\n   * @memberof NgxSpinnerService\n   */\n  show(name: string = PRIMARY_SPINNER, spinner?: Spinner) {\n    return new Promise((resolve, _reject) => {\n      setTimeout(() => {\n        if (spinner && Object.keys(spinner).length) {\n          spinner[\"name\"] = name;\n          this.spinnerObservable.next(\n            new NgxSpinner({ ...spinner, show: true })\n          );\n          resolve(true);\n        } else {\n          this.spinnerObservable.next(new NgxSpinner({ name, show: true }));\n          resolve(true);\n        }\n      }, 10);\n    });\n  }\n  /**\n   * To hide spinner\n   *\n   * @memberof NgxSpinnerService\n   */\n  hide(name: string = PRIMARY_SPINNER, debounce: number = 10) {\n    return new Promise((resolve, _reject) => {\n      setTimeout(() => {\n        this.spinnerObservable.next(new NgxSpinner({ name, show: false }));\n        resolve(true);\n      }, debounce);\n    });\n  }\n}\n","import { InjectionToken } from \"@angular/core\";\n\nexport interface NgxSpinnerConfig {\n  type?: string;\n}\n\nexport const NGX_SPINNER_CONFIG = new InjectionToken<NgxSpinnerConfig>(\n  \"NGX_SPINNER_CONFIG\"\n);\n","import { DomSanitizer, SafeHtml } from \"@angular/platform-browser\";\nimport { Pipe, PipeTransform } from \"@angular/core\";\n\n@Pipe({\n  name: \"safeHtml\",\n})\nexport class SafeHtmlPipe implements PipeTransform {\n  constructor(private _sanitizer: DomSanitizer) {}\n\n  transform(v: string): SafeHtml {\n    if (v) {\n      return this._sanitizer.bypassSecurityTrustHtml(v);\n    }\n  }\n}\n","import {\n  Component,\n  OnDestroy,\n  Input,\n  OnInit,\n  OnChanges,\n  SimpleChange,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  HostListener,\n  ViewChild,\n  ElementRef,\n  Optional,\n  Inject,\n} from \"@angular/core\";\nimport { NgxSpinnerService } from \"./ngx-spinner.service\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\nimport {\n  LOADERS,\n  DEFAULTS,\n  Size,\n  NgxSpinner,\n  PRIMARY_SPINNER,\n} from \"./ngx-spinner.enum\";\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n} from \"@angular/animations\";\nimport { NgxSpinnerConfig, NGX_SPINNER_CONFIG } from \"./config\";\n\n@Component({\n  selector: \"ngx-spinner\",\n  templateUrl: \"ngx-spinner.component.html\",\n  styleUrls: [\"./ngx-spinner.component.css\"],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger(\"fadeIn\", [\n      state(\"in\", style({ opacity: 1 })),\n      transition(\":enter\", [style({ opacity: 0 }), animate(300)]),\n      transition(\":leave\", animate(200, style({ opacity: 0 }))),\n    ]),\n  ],\n})\nexport class NgxSpinnerComponent implements OnDestroy, OnInit, OnChanges {\n  /**\n   * To set backdrop color\n   * Only supports RGBA color format\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() bdColor: string;\n  /**\n   * To set spinner size\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() size: Size;\n  /**\n   * To set spinner color(DEFAULTS.SPINNER_COLOR)\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() color: string;\n  /**\n   * To set type of spinner\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() type: string;\n  /**\n   * To toggle fullscreen mode\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() fullScreen: boolean;\n  /**\n   * Spinner name\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() name: string;\n  /**\n   * z-index value\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() zIndex: number;\n  /**\n   * Custom template for spinner/loader\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() template: string;\n  /**\n   * Show/Hide the spinner\n   *\n   * @type {boolean}\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() showSpinner: boolean;\n\n  /**\n   * To enable/disable animation\n   *\n   * @type {boolean}\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() disableAnimation: boolean = false;\n  /**\n   * Spinner Object\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  spinner: NgxSpinner = new NgxSpinner();\n  /**\n   * Array for spinner's div\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  divArray: Array<number>;\n  /**\n   * Counter for div\n   *\n   * @memberof NgxSpinnerComponent\n   *\n   */\n  divCount: number;\n  /**\n   * Show spinner\n   *\n   * @memberof NgxSpinnerComponent\n   **/\n  show: boolean;\n  /**\n   * Unsubscribe from spinner's observable\n   *\n   * @memberof NgxSpinnerComponent\n   **/\n  ngUnsubscribe: Subject<void> = new Subject();\n  /**\n   * Element Reference\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  @ViewChild(\"overlay\") spinnerDOM: { nativeElement: any };\n\n  // TODO: https://github.com/Napster2210/ngx-spinner/issues/259\n  // @HostListener(\"document:keydown\", [\"$event\"])\n  // handleKeyboardEvent(event: KeyboardEvent) {\n  //   if (this.spinnerDOM && this.spinnerDOM.nativeElement) {\n  //     if (\n  //       this.fullScreen ||\n  //       (!this.fullScreen && this.isSpinnerZone(event.target))\n  //     ) {\n  //       event.returnValue = false;\n  //       event.preventDefault();\n  //     }\n  //   }\n  // }\n\n  /**\n   * Creates an instance of NgxSpinnerComponent.\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  constructor(\n    private spinnerService: NgxSpinnerService,\n    private changeDetector: ChangeDetectorRef,\n    private elementRef: ElementRef,\n    @Optional()\n    @Inject(NGX_SPINNER_CONFIG)\n    private globalConfig: NgxSpinnerConfig\n  ) {\n    this.bdColor = DEFAULTS.BD_COLOR;\n    this.zIndex = DEFAULTS.Z_INDEX;\n    this.color = DEFAULTS.SPINNER_COLOR;\n    this.size = \"large\";\n    this.fullScreen = true;\n    this.name = PRIMARY_SPINNER;\n    this.template = null;\n    this.showSpinner = false;\n\n    this.divArray = [];\n    this.divCount = 0;\n    this.show = false;\n  }\n\n  initObservable() {\n    this.spinnerService\n      .getSpinner(this.name)\n      .pipe(takeUntil(this.ngUnsubscribe))\n      .subscribe((spinner: NgxSpinner) => {\n        this.setDefaultOptions();\n        Object.assign(this.spinner, spinner);\n        if (spinner.show) {\n          this.onInputChange();\n        }\n        this.changeDetector.detectChanges();\n      });\n  }\n\n  /**\n   * Initialization method\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  ngOnInit() {\n    this.setDefaultOptions();\n    this.initObservable();\n  }\n\n  /**\n   * To check event triggers inside the Spinner Zone\n   *\n   * @param {*} element\n   * @returns {boolean}\n   * @memberof NgxSpinnerComponent\n   */\n  isSpinnerZone(element: any): boolean {\n    if (element === this.elementRef.nativeElement.parentElement) {\n      return true;\n    }\n    return element.parentNode && this.isSpinnerZone(element.parentNode);\n  }\n\n  /**\n   * To set default ngx-spinner options\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  setDefaultOptions = () => {\n    const { type } = this.globalConfig ?? {};\n    this.spinner = NgxSpinner.create({\n      name: this.name,\n      bdColor: this.bdColor,\n      size: this.size,\n      color: this.color,\n      type: this.type ?? type,\n      fullScreen: this.fullScreen,\n      divArray: this.divArray,\n      divCount: this.divCount,\n      show: this.show,\n      zIndex: this.zIndex,\n      template: this.template,\n      showSpinner: this.showSpinner,\n    });\n  };\n  /**\n   * On changes event for input variables\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  ngOnChanges(changes: { [propKey: string]: SimpleChange }) {\n    for (const propName in changes) {\n      if (propName) {\n        const changedProp = changes[propName];\n        if (changedProp.isFirstChange()) {\n          return;\n        } else if (\n          typeof changedProp.currentValue !== \"undefined\" &&\n          changedProp.currentValue !== changedProp.previousValue\n        ) {\n          if (changedProp.currentValue !== \"\") {\n            this.spinner[propName] = changedProp.currentValue;\n            if (propName === \"showSpinner\") {\n              if (changedProp.currentValue) {\n                this.spinnerService.show(this.spinner.name, this.spinner);\n              } else {\n                this.spinnerService.hide(this.spinner.name);\n              }\n            }\n\n            if (propName === \"name\") {\n              this.initObservable();\n            }\n          }\n        }\n      }\n    }\n  }\n  /**\n   * To get class for spinner\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  getClass(type: string, size: Size): string {\n    this.spinner.divCount = LOADERS[type];\n    this.spinner.divArray = Array(this.spinner.divCount)\n      .fill(0)\n      .map((_, i) => i);\n    let sizeClass = \"\";\n    switch (size.toLowerCase()) {\n      case \"small\":\n        sizeClass = \"la-sm\";\n        break;\n      case \"medium\":\n        sizeClass = \"la-2x\";\n        break;\n      case \"large\":\n        sizeClass = \"la-3x\";\n        break;\n      default:\n        break;\n    }\n    return \"la-\" + type + \" \" + sizeClass;\n  }\n  /**\n   * Check if input variables have changed\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  onInputChange() {\n    this.spinner.class = this.getClass(this.spinner.type, this.spinner.size);\n  }\n  /**\n   * Component destroy event\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  ngOnDestroy() {\n    this.ngUnsubscribe.next();\n    this.ngUnsubscribe.complete();\n  }\n}\n","<div\n  [@.disabled]=\"disableAnimation\"\n  [@fadeIn]=\"'in'\"\n  *ngIf=\"spinner.show\"\n  class=\"ngx-spinner-overlay\"\n  [style.background-color]=\"spinner.bdColor\"\n  [style.z-index]=\"spinner.zIndex\"\n  [style.position]=\"spinner.fullScreen ? 'fixed' : 'absolute'\"\n  #overlay\n>\n  <div *ngIf=\"!template\" [class]=\"spinner.class\" [style.color]=\"spinner.color\">\n    <div *ngFor=\"let index of spinner.divArray\"></div>\n  </div>\n  <div *ngIf=\"template\" [innerHTML]=\"template | safeHtml\"></div>\n  <div class=\"loading-text\" [style.z-index]=\"spinner.zIndex\">\n    <ng-content></ng-content>\n  </div>\n</div>\n","import { ModuleWithProviders, NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { NgxSpinnerComponent } from \"./ngx-spinner.component\";\nimport { SafeHtmlPipe } from \"./safe-html.pipe\";\nimport { NgxSpinnerConfig, NGX_SPINNER_CONFIG } from \"./config\";\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [NgxSpinnerComponent, SafeHtmlPipe],\n  exports: [NgxSpinnerComponent],\n})\nexport class NgxSpinnerModule {\n  static forRoot(\n    config?: NgxSpinnerConfig\n  ): ModuleWithProviders<NgxSpinnerModule> {\n    return {\n      ngModule: NgxSpinnerModule,\n      providers: [{ provide: NGX_SPINNER_CONFIG, useValue: config }],\n    };\n  }\n}\n","/*\n * Public API Surface of ngx-spinner\n */\nexport * from \"./lib/ngx-spinner.service\";\nexport * from \"./lib/ngx-spinner.component\";\nexport * from \"./lib/ngx-spinner.module\";\nexport * from \"./lib/ngx-spinner.enum\";\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}