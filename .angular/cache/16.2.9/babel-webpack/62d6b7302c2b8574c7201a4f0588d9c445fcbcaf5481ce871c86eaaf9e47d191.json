{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class SimpleIfDirective {\n  set simpleIf(result) {\n    if (result) {\n      this.templateRef.createEmbeddedView(this.templateRef);\n    } else {\n      this.viewContainer.clear();\n    }\n  }\n  constructor(templateRef, viewContainer) {\n    this.templateRef = templateRef;\n    this.viewContainer = viewContainer;\n  }\n  static #_ = this.ɵfac = function SimpleIfDirective_Factory(t) {\n    return new (t || SimpleIfDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(i0.ViewContainerRef));\n  };\n  static #_2 = this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: SimpleIfDirective,\n    selectors: [[\"\", \"simpleIf\", \"\"]],\n    inputs: {\n      simpleIf: \"simpleIf\"\n    }\n  });\n}","map":{"version":3,"names":["SimpleIfDirective","simpleIf","result","templateRef","createEmbeddedView","viewContainer","clear","constructor","_","i0","ɵɵdirectiveInject","TemplateRef","ViewContainerRef","_2","selectors","inputs"],"sources":["C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\src\\app\\components\\simple-if.directive.ts"],"sourcesContent":["import { Directive, TemplateRef, ViewContainerRef,Input } from '@angular/core';\n\n@Directive({\n  selector: '[simpleIf]'\n})\nexport class SimpleIfDirective {\n  @Input() set simpleIf(result:boolean){\n    if(result)\n    {\n      this.templateRef.createEmbeddedView(this.templateRef);\n    }\n    else\n    {\n      this.viewContainer.clear();\n    }\n\n  }\n\n  constructor(private templateRef:TemplateRef<any>,private viewContainer:ViewContainerRef) { }\n\n}\n"],"mappings":";AAKA,OAAM,MAAOA,iBAAiB;EAC5B,IAAaC,QAAQA,CAACC,MAAc;IAClC,IAAGA,MAAM,EACT;MACE,IAAI,CAACC,WAAW,CAACC,kBAAkB,CAAC,IAAI,CAACD,WAAW,CAAC;KACtD,MAED;MACE,IAAI,CAACE,aAAa,CAACC,KAAK,EAAE;;EAG9B;EAEAC,YAAoBJ,WAA4B,EAASE,aAA8B;IAAnE,KAAAF,WAAW,GAAXA,WAAW;IAA0B,KAAAE,aAAa,GAAbA,aAAa;EAAqB;EAAC,QAAAG,CAAA,G;qBAbjFR,iBAAiB,EAAAS,EAAA,CAAAC,iBAAA,CAAAD,EAAA,CAAAE,WAAA,GAAAF,EAAA,CAAAC,iBAAA,CAAAD,EAAA,CAAAG,gBAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAjBb,iBAAiB;IAAAc,SAAA;IAAAC,MAAA;MAAAd,QAAA;IAAA;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}