{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, InjectionToken, inject, Injectable, ComponentFactoryResolver, ApplicationRef, SecurityContext, Injector, Inject, Component, HostBinding, HostListener, makeEnvironmentProviders, NgModule } from '@angular/core';\nimport { style, state, animate, transition, trigger } from '@angular/animations';\nimport { DOCUMENT, NgIf } from '@angular/common';\nimport { Subject } from 'rxjs';\nimport * as i2 from '@angular/platform-browser';\nconst _c0 = [\"toast-component\", \"\"];\nfunction Toast_button_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 5);\n    i0.ɵɵlistener(\"click\", function Toast_button_0_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.remove());\n    });\n    i0.ɵɵelementStart(1, \"span\", 6);\n    i0.ɵɵtext(2, \"\\xD7\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction Toast_div_1_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"[\", ctx_r7.duplicatesCount + 1, \"]\");\n  }\n}\nfunction Toast_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵtemplate(2, Toast_div_1_ng_container_2_Template, 2, 1, \"ng-container\", 4);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r1.options.titleClass);\n    i0.ɵɵattribute(\"aria-label\", ctx_r1.title);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.title, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.duplicatesCount);\n  }\n}\nfunction Toast_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 7);\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r2.options.messageClass);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r2.message, i0.ɵɵsanitizeHtml);\n  }\n}\nfunction Toast_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r3.options.messageClass);\n    i0.ɵɵattribute(\"aria-label\", ctx_r3.message);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.message, \" \");\n  }\n}\nfunction Toast_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"div\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"width\", ctx_r4.width + \"%\");\n  }\n}\nfunction ToastNoAnimation_button_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 5);\n    i0.ɵɵlistener(\"click\", function ToastNoAnimation_button_0_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.remove());\n    });\n    i0.ɵɵelementStart(1, \"span\", 6);\n    i0.ɵɵtext(2, \"\\xD7\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction ToastNoAnimation_div_1_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"[\", ctx_r7.duplicatesCount + 1, \"]\");\n  }\n}\nfunction ToastNoAnimation_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵtemplate(2, ToastNoAnimation_div_1_ng_container_2_Template, 2, 1, \"ng-container\", 4);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r1.options.titleClass);\n    i0.ɵɵattribute(\"aria-label\", ctx_r1.title);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.title, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.duplicatesCount);\n  }\n}\nfunction ToastNoAnimation_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 7);\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r2.options.messageClass);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r2.message, i0.ɵɵsanitizeHtml);\n  }\n}\nfunction ToastNoAnimation_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r3.options.messageClass);\n    i0.ɵɵattribute(\"aria-label\", ctx_r3.message);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.message, \" \");\n  }\n}\nfunction ToastNoAnimation_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"div\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"width\", ctx_r4.width + \"%\");\n  }\n}\nclass ToastContainerDirective {\n  el;\n  constructor(el) {\n    this.el = el;\n  }\n  getContainerElement() {\n    return this.el.nativeElement;\n  }\n  static ɵfac = function ToastContainerDirective_Factory(t) {\n    return new (t || ToastContainerDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: ToastContainerDirective,\n    selectors: [[\"\", \"toastContainer\", \"\"]],\n    exportAs: [\"toastContainer\"],\n    standalone: true\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ToastContainerDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[toastContainer]',\n      exportAs: 'toastContainer',\n      standalone: true\n    }]\n  }], () => [{\n    type: i0.ElementRef\n  }], null);\n})();\n\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nclass ComponentPortal {\n  _attachedHost;\n  /** The type of the component that will be instantiated for attachment. */\n  component;\n  /**\n   * [Optional] Where the attached component should live in Angular's *logical* component tree.\n   * This is different from where the component *renders*, which is determined by the PortalHost.\n   * The origin necessary when the host is outside of the Angular application context.\n   */\n  viewContainerRef;\n  /** Injector used for the instantiation of the component. */\n  injector;\n  constructor(component, injector) {\n    this.component = component;\n    this.injector = injector;\n  }\n  /** Attach this portal to a host. */\n  attach(host, newestOnTop) {\n    this._attachedHost = host;\n    return host.attach(this, newestOnTop);\n  }\n  /** Detach this portal from its host */\n  detach() {\n    const host = this._attachedHost;\n    if (host) {\n      this._attachedHost = undefined;\n      return host.detach();\n    }\n  }\n  /** Whether this portal is attached to a host. */\n  get isAttached() {\n    return this._attachedHost != null;\n  }\n  /**\n   * Sets the PortalHost reference without performing `attach()`. This is used directly by\n   * the PortalHost when it is performing an `attach()` or `detach()`.\n   */\n  setAttachedHost(host) {\n    this._attachedHost = host;\n  }\n}\n/**\n * Partial implementation of PortalHost that only deals with attaching a\n * ComponentPortal\n */\nclass BasePortalHost {\n  /** The portal currently attached to the host. */\n  _attachedPortal;\n  /** A function that will permanently dispose this host. */\n  _disposeFn;\n  attach(portal, newestOnTop) {\n    this._attachedPortal = portal;\n    return this.attachComponentPortal(portal, newestOnTop);\n  }\n  detach() {\n    if (this._attachedPortal) {\n      this._attachedPortal.setAttachedHost();\n    }\n    this._attachedPortal = undefined;\n    if (this._disposeFn) {\n      this._disposeFn();\n      this._disposeFn = undefined;\n    }\n  }\n  setDisposeFn(fn) {\n    this._disposeFn = fn;\n  }\n}\n\n/**\n * Reference to a toast opened via the Toastr service.\n */\nclass ToastRef {\n  _overlayRef;\n  /** The instance of component opened into the toast. */\n  componentInstance;\n  /** Count of duplicates of this toast */\n  duplicatesCount = 0;\n  /** Subject for notifying the user that the toast has finished closing. */\n  _afterClosed = new Subject();\n  /** triggered when toast is activated */\n  _activate = new Subject();\n  /** notifies the toast that it should close before the timeout */\n  _manualClose = new Subject();\n  /** notifies the toast that it should reset the timeouts */\n  _resetTimeout = new Subject();\n  /** notifies the toast that it should count a duplicate toast */\n  _countDuplicate = new Subject();\n  constructor(_overlayRef) {\n    this._overlayRef = _overlayRef;\n  }\n  manualClose() {\n    this._manualClose.next();\n    this._manualClose.complete();\n  }\n  manualClosed() {\n    return this._manualClose.asObservable();\n  }\n  timeoutReset() {\n    return this._resetTimeout.asObservable();\n  }\n  countDuplicate() {\n    return this._countDuplicate.asObservable();\n  }\n  /**\n   * Close the toast.\n   */\n  close() {\n    this._overlayRef.detach();\n    this._afterClosed.next();\n    this._manualClose.next();\n    this._afterClosed.complete();\n    this._manualClose.complete();\n    this._activate.complete();\n    this._resetTimeout.complete();\n    this._countDuplicate.complete();\n  }\n  /** Gets an observable that is notified when the toast is finished closing. */\n  afterClosed() {\n    return this._afterClosed.asObservable();\n  }\n  isInactive() {\n    return this._activate.isStopped;\n  }\n  activate() {\n    this._activate.next();\n    this._activate.complete();\n  }\n  /** Gets an observable that is notified when the toast has started opening. */\n  afterActivate() {\n    return this._activate.asObservable();\n  }\n  /** Reset the toast timouts and count duplicates */\n  onDuplicate(resetTimeout, countDuplicate) {\n    if (resetTimeout) {\n      this._resetTimeout.next();\n    }\n    if (countDuplicate) {\n      this._countDuplicate.next(++this.duplicatesCount);\n    }\n  }\n}\n\n/**\n * Everything a toast needs to launch\n */\nclass ToastPackage {\n  toastId;\n  config;\n  message;\n  title;\n  toastType;\n  toastRef;\n  _onTap = new Subject();\n  _onAction = new Subject();\n  constructor(toastId, config, message, title, toastType, toastRef) {\n    this.toastId = toastId;\n    this.config = config;\n    this.message = message;\n    this.title = title;\n    this.toastType = toastType;\n    this.toastRef = toastRef;\n    this.toastRef.afterClosed().subscribe(() => {\n      this._onAction.complete();\n      this._onTap.complete();\n    });\n  }\n  /** Fired on click */\n  triggerTap() {\n    this._onTap.next();\n    if (this.config.tapToDismiss) {\n      this._onTap.complete();\n    }\n  }\n  onTap() {\n    return this._onTap.asObservable();\n  }\n  /** available for use in custom toast */\n  triggerAction(action) {\n    this._onAction.next(action);\n  }\n  onAction() {\n    return this._onAction.asObservable();\n  }\n}\nconst DefaultNoComponentGlobalConfig = {\n  maxOpened: 0,\n  autoDismiss: false,\n  newestOnTop: true,\n  preventDuplicates: false,\n  countDuplicates: false,\n  resetTimeoutOnDuplicate: false,\n  includeTitleDuplicates: false,\n  iconClasses: {\n    error: 'toast-error',\n    info: 'toast-info',\n    success: 'toast-success',\n    warning: 'toast-warning'\n  },\n  // Individual\n  closeButton: false,\n  disableTimeOut: false,\n  timeOut: 5000,\n  extendedTimeOut: 1000,\n  enableHtml: false,\n  progressBar: false,\n  toastClass: 'ngx-toastr',\n  positionClass: 'toast-top-right',\n  titleClass: 'toast-title',\n  messageClass: 'toast-message',\n  easing: 'ease-in',\n  easeTime: 300,\n  tapToDismiss: true,\n  onActivateTick: false,\n  progressAnimation: 'decreasing'\n};\nconst TOAST_CONFIG = new InjectionToken('ToastConfig');\n\n/**\n * A PortalHost for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n *\n * This is the only part of the portal core that directly touches the DOM.\n */\nclass DomPortalHost extends BasePortalHost {\n  _hostDomElement;\n  _componentFactoryResolver;\n  _appRef;\n  constructor(_hostDomElement, _componentFactoryResolver, _appRef) {\n    super();\n    this._hostDomElement = _hostDomElement;\n    this._componentFactoryResolver = _componentFactoryResolver;\n    this._appRef = _appRef;\n  }\n  /**\n   * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n   * @param portal Portal to be attached\n   */\n  attachComponentPortal(portal, newestOnTop) {\n    const componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\n    let componentRef;\n    // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n    // for the component (in terms of Angular's component tree, not rendering).\n    // When the ViewContainerRef is missing, we use the factory to create the component directly\n    // and then manually attach the ChangeDetector for that component to the application (which\n    // happens automatically when using a ViewContainer).\n    componentRef = componentFactory.create(portal.injector);\n    // When creating a component outside of a ViewContainer, we need to manually register\n    // its ChangeDetector with the application. This API is unfortunately not yet published\n    // in Angular core. The change detector must also be deregistered when the component\n    // is destroyed to prevent memory leaks.\n    this._appRef.attachView(componentRef.hostView);\n    this.setDisposeFn(() => {\n      this._appRef.detachView(componentRef.hostView);\n      componentRef.destroy();\n    });\n    // At this point the component has been instantiated, so we move it to the location in the DOM\n    // where we want it to be rendered.\n    if (newestOnTop) {\n      this._hostDomElement.insertBefore(this._getComponentRootNode(componentRef), this._hostDomElement.firstChild);\n    } else {\n      this._hostDomElement.appendChild(this._getComponentRootNode(componentRef));\n    }\n    return componentRef;\n  }\n  /** Gets the root HTMLElement for an instantiated component. */\n  _getComponentRootNode(componentRef) {\n    return componentRef.hostView.rootNodes[0];\n  }\n}\n\n/** Container inside which all toasts will render. */\nclass OverlayContainer {\n  _document = inject(DOCUMENT);\n  _containerElement;\n  ngOnDestroy() {\n    if (this._containerElement && this._containerElement.parentNode) {\n      this._containerElement.parentNode.removeChild(this._containerElement);\n    }\n  }\n  /**\n   * This method returns the overlay container element. It will lazily\n   * create the element the first time  it is called to facilitate using\n   * the container in non-browser environments.\n   * @returns the container element\n   */\n  getContainerElement() {\n    if (!this._containerElement) {\n      this._createContainer();\n    }\n    return this._containerElement;\n  }\n  /**\n   * Create the overlay container element, which is simply a div\n   * with the 'cdk-overlay-container' class on the document body\n   * and 'aria-live=\"polite\"'\n   */\n  _createContainer() {\n    const container = this._document.createElement('div');\n    container.classList.add('overlay-container');\n    container.setAttribute('aria-live', 'polite');\n    this._document.body.appendChild(container);\n    this._containerElement = container;\n  }\n  static ɵfac = function OverlayContainer_Factory(t) {\n    return new (t || OverlayContainer)();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: OverlayContainer,\n    factory: OverlayContainer.ɵfac,\n    providedIn: 'root'\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(OverlayContainer, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n  _portalHost;\n  constructor(_portalHost) {\n    this._portalHost = _portalHost;\n  }\n  attach(portal, newestOnTop = true) {\n    return this._portalHost.attach(portal, newestOnTop);\n  }\n  /**\n   * Detaches an overlay from a portal.\n   * @returns Resolves when the overlay has been detached.\n   */\n  detach() {\n    return this._portalHost.detach();\n  }\n}\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n  _overlayContainer = inject(OverlayContainer);\n  _componentFactoryResolver = inject(ComponentFactoryResolver);\n  _appRef = inject(ApplicationRef);\n  _document = inject(DOCUMENT);\n  // Namespace panes by overlay container\n  _paneElements = new Map();\n  /**\n   * Creates an overlay.\n   * @returns A reference to the created overlay.\n   */\n  create(positionClass, overlayContainer) {\n    // get existing pane if possible\n    return this._createOverlayRef(this.getPaneElement(positionClass, overlayContainer));\n  }\n  getPaneElement(positionClass = '', overlayContainer) {\n    if (!this._paneElements.get(overlayContainer)) {\n      this._paneElements.set(overlayContainer, {});\n    }\n    if (!this._paneElements.get(overlayContainer)[positionClass]) {\n      this._paneElements.get(overlayContainer)[positionClass] = this._createPaneElement(positionClass, overlayContainer);\n    }\n    return this._paneElements.get(overlayContainer)[positionClass];\n  }\n  /**\n   * Creates the DOM element for an overlay and appends it to the overlay container.\n   * @returns Newly-created pane element\n   */\n  _createPaneElement(positionClass, overlayContainer) {\n    const pane = this._document.createElement('div');\n    pane.id = 'toast-container';\n    pane.classList.add(positionClass);\n    pane.classList.add('toast-container');\n    if (!overlayContainer) {\n      this._overlayContainer.getContainerElement().appendChild(pane);\n    } else {\n      overlayContainer.getContainerElement().appendChild(pane);\n    }\n    return pane;\n  }\n  /**\n   * Create a DomPortalHost into which the overlay content can be loaded.\n   * @param pane The DOM element to turn into a portal host.\n   * @returns A portal host for the given DOM element.\n   */\n  _createPortalHost(pane) {\n    return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef);\n  }\n  /**\n   * Creates an OverlayRef for an overlay in the given DOM element.\n   * @param pane DOM element for the overlay\n   */\n  _createOverlayRef(pane) {\n    return new OverlayRef(this._createPortalHost(pane));\n  }\n  static ɵfac = function Overlay_Factory(t) {\n    return new (t || Overlay)();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: Overlay,\n    factory: Overlay.ɵfac,\n    providedIn: 'root'\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Overlay, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\nclass ToastrService {\n  overlay;\n  _injector;\n  sanitizer;\n  ngZone;\n  toastrConfig;\n  currentlyActive = 0;\n  toasts = [];\n  overlayContainer;\n  previousToastMessage;\n  index = 0;\n  constructor(token, overlay, _injector, sanitizer, ngZone) {\n    this.overlay = overlay;\n    this._injector = _injector;\n    this.sanitizer = sanitizer;\n    this.ngZone = ngZone;\n    this.toastrConfig = {\n      ...token.default,\n      ...token.config\n    };\n    if (token.config.iconClasses) {\n      this.toastrConfig.iconClasses = {\n        ...token.default.iconClasses,\n        ...token.config.iconClasses\n      };\n    }\n  }\n  /** show toast */\n  show(message, title, override = {}, type = '') {\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show successful toast */\n  success(message, title, override = {}) {\n    const type = this.toastrConfig.iconClasses.success || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show error toast */\n  error(message, title, override = {}) {\n    const type = this.toastrConfig.iconClasses.error || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show info toast */\n  info(message, title, override = {}) {\n    const type = this.toastrConfig.iconClasses.info || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show warning toast */\n  warning(message, title, override = {}) {\n    const type = this.toastrConfig.iconClasses.warning || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /**\n   * Remove all or a single toast by id\n   */\n  clear(toastId) {\n    // Call every toastRef manualClose function\n    for (const toast of this.toasts) {\n      if (toastId !== undefined) {\n        if (toast.toastId === toastId) {\n          toast.toastRef.manualClose();\n          return;\n        }\n      } else {\n        toast.toastRef.manualClose();\n      }\n    }\n  }\n  /**\n   * Remove and destroy a single toast by id\n   */\n  remove(toastId) {\n    const found = this._findToast(toastId);\n    if (!found) {\n      return false;\n    }\n    found.activeToast.toastRef.close();\n    this.toasts.splice(found.index, 1);\n    this.currentlyActive = this.currentlyActive - 1;\n    if (!this.toastrConfig.maxOpened || !this.toasts.length) {\n      return false;\n    }\n    if (this.currentlyActive < this.toastrConfig.maxOpened && this.toasts[this.currentlyActive]) {\n      const p = this.toasts[this.currentlyActive].toastRef;\n      if (!p.isInactive()) {\n        this.currentlyActive = this.currentlyActive + 1;\n        p.activate();\n      }\n    }\n    return true;\n  }\n  /**\n   * Determines if toast message is already shown\n   */\n  findDuplicate(title = '', message = '', resetOnDuplicate, countDuplicates) {\n    const {\n      includeTitleDuplicates\n    } = this.toastrConfig;\n    for (const toast of this.toasts) {\n      const hasDuplicateTitle = includeTitleDuplicates && toast.title === title;\n      if ((!includeTitleDuplicates || hasDuplicateTitle) && toast.message === message) {\n        toast.toastRef.onDuplicate(resetOnDuplicate, countDuplicates);\n        return toast;\n      }\n    }\n    return null;\n  }\n  /** create a clone of global config and apply individual settings */\n  applyConfig(override = {}) {\n    return {\n      ...this.toastrConfig,\n      ...override\n    };\n  }\n  /**\n   * Find toast object by id\n   */\n  _findToast(toastId) {\n    for (let i = 0; i < this.toasts.length; i++) {\n      if (this.toasts[i].toastId === toastId) {\n        return {\n          index: i,\n          activeToast: this.toasts[i]\n        };\n      }\n    }\n    return null;\n  }\n  /**\n   * Determines the need to run inside angular's zone then builds the toast\n   */\n  _preBuildNotification(toastType, message, title, config) {\n    if (config.onActivateTick) {\n      return this.ngZone.run(() => this._buildNotification(toastType, message, title, config));\n    }\n    return this._buildNotification(toastType, message, title, config);\n  }\n  /**\n   * Creates and attaches toast data to component\n   * returns the active toast, or in case preventDuplicates is enabled the original/non-duplicate active toast.\n   */\n  _buildNotification(toastType, message, title, config) {\n    if (!config.toastComponent) {\n      throw new Error('toastComponent required');\n    }\n    // max opened and auto dismiss = true\n    // if timeout = 0 resetting it would result in setting this.hideTime = Date.now(). Hence, we only want to reset timeout if there is\n    // a timeout at all\n    const duplicate = this.findDuplicate(title, message, this.toastrConfig.resetTimeoutOnDuplicate && config.timeOut > 0, this.toastrConfig.countDuplicates);\n    if ((this.toastrConfig.includeTitleDuplicates && title || message) && this.toastrConfig.preventDuplicates && duplicate !== null) {\n      return duplicate;\n    }\n    this.previousToastMessage = message;\n    let keepInactive = false;\n    if (this.toastrConfig.maxOpened && this.currentlyActive >= this.toastrConfig.maxOpened) {\n      keepInactive = true;\n      if (this.toastrConfig.autoDismiss) {\n        this.clear(this.toasts[0].toastId);\n      }\n    }\n    const overlayRef = this.overlay.create(config.positionClass, this.overlayContainer);\n    this.index = this.index + 1;\n    let sanitizedMessage = message;\n    if (message && config.enableHtml) {\n      sanitizedMessage = this.sanitizer.sanitize(SecurityContext.HTML, message);\n    }\n    const toastRef = new ToastRef(overlayRef);\n    const toastPackage = new ToastPackage(this.index, config, sanitizedMessage, title, toastType, toastRef);\n    /** New injector that contains an instance of `ToastPackage`. */\n    const providers = [{\n      provide: ToastPackage,\n      useValue: toastPackage\n    }];\n    const toastInjector = Injector.create({\n      providers,\n      parent: this._injector\n    });\n    const component = new ComponentPortal(config.toastComponent, toastInjector);\n    const portal = overlayRef.attach(component, config.newestOnTop);\n    toastRef.componentInstance = portal.instance;\n    const ins = {\n      toastId: this.index,\n      title: title || '',\n      message: message || '',\n      toastRef,\n      onShown: toastRef.afterActivate(),\n      onHidden: toastRef.afterClosed(),\n      onTap: toastPackage.onTap(),\n      onAction: toastPackage.onAction(),\n      portal\n    };\n    if (!keepInactive) {\n      this.currentlyActive = this.currentlyActive + 1;\n      setTimeout(() => {\n        ins.toastRef.activate();\n      });\n    }\n    this.toasts.push(ins);\n    return ins;\n  }\n  static ɵfac = function ToastrService_Factory(t) {\n    return new (t || ToastrService)(i0.ɵɵinject(TOAST_CONFIG), i0.ɵɵinject(Overlay), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i2.DomSanitizer), i0.ɵɵinject(i0.NgZone));\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ToastrService,\n    factory: ToastrService.ɵfac,\n    providedIn: 'root'\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ToastrService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [TOAST_CONFIG]\n    }]\n  }, {\n    type: Overlay\n  }, {\n    type: i0.Injector\n  }, {\n    type: i2.DomSanitizer\n  }, {\n    type: i0.NgZone\n  }], null);\n})();\nclass Toast {\n  toastrService;\n  toastPackage;\n  ngZone;\n  message;\n  title;\n  options;\n  duplicatesCount;\n  originalTimeout;\n  /** width of progress bar */\n  width = -1;\n  /** a combination of toast type and options.toastClass */\n  toastClasses = '';\n  /** controls animation */\n  state;\n  /** hides component when waiting to be displayed */\n  get displayStyle() {\n    if (this.state.value === 'inactive') {\n      return 'none';\n    }\n    return;\n  }\n  timeout;\n  intervalId;\n  hideTime;\n  sub;\n  sub1;\n  sub2;\n  sub3;\n  constructor(toastrService, toastPackage, ngZone) {\n    this.toastrService = toastrService;\n    this.toastPackage = toastPackage;\n    this.ngZone = ngZone;\n    this.message = toastPackage.message;\n    this.title = toastPackage.title;\n    this.options = toastPackage.config;\n    this.originalTimeout = toastPackage.config.timeOut;\n    this.toastClasses = `${toastPackage.toastType} ${toastPackage.config.toastClass}`;\n    this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n      this.activateToast();\n    });\n    this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n      this.remove();\n    });\n    this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\n      this.resetTimeout();\n    });\n    this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(count => {\n      this.duplicatesCount = count;\n    });\n    this.state = {\n      value: 'inactive',\n      params: {\n        easeTime: this.toastPackage.config.easeTime,\n        easing: 'ease-in'\n      }\n    };\n  }\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n    this.sub1.unsubscribe();\n    this.sub2.unsubscribe();\n    this.sub3.unsubscribe();\n    clearInterval(this.intervalId);\n    clearTimeout(this.timeout);\n  }\n  /**\n   * activates toast and sets timeout\n   */\n  activateToast() {\n    this.state = {\n      ...this.state,\n      value: 'active'\n    };\n    if (!(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') && this.options.timeOut) {\n      this.outsideTimeout(() => this.remove(), this.options.timeOut);\n      this.hideTime = new Date().getTime() + this.options.timeOut;\n      if (this.options.progressBar) {\n        this.outsideInterval(() => this.updateProgress(), 10);\n      }\n    }\n  }\n  /**\n   * updates progress bar width\n   */\n  updateProgress() {\n    if (this.width === 0 || this.width === 100 || !this.options.timeOut) {\n      return;\n    }\n    const now = new Date().getTime();\n    const remaining = this.hideTime - now;\n    this.width = remaining / this.options.timeOut * 100;\n    if (this.options.progressAnimation === 'increasing') {\n      this.width = 100 - this.width;\n    }\n    if (this.width <= 0) {\n      this.width = 0;\n    }\n    if (this.width >= 100) {\n      this.width = 100;\n    }\n  }\n  resetTimeout() {\n    clearTimeout(this.timeout);\n    clearInterval(this.intervalId);\n    this.state = {\n      ...this.state,\n      value: 'active'\n    };\n    this.outsideTimeout(() => this.remove(), this.originalTimeout);\n    this.options.timeOut = this.originalTimeout;\n    this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n    this.width = -1;\n    if (this.options.progressBar) {\n      this.outsideInterval(() => this.updateProgress(), 10);\n    }\n  }\n  /**\n   * tells toastrService to remove this toast after animation time\n   */\n  remove() {\n    if (this.state.value === 'removed') {\n      return;\n    }\n    clearTimeout(this.timeout);\n    this.state = {\n      ...this.state,\n      value: 'removed'\n    };\n    this.outsideTimeout(() => this.toastrService.remove(this.toastPackage.toastId), +this.toastPackage.config.easeTime);\n  }\n  tapToast() {\n    if (this.state.value === 'removed') {\n      return;\n    }\n    this.toastPackage.triggerTap();\n    if (this.options.tapToDismiss) {\n      this.remove();\n    }\n  }\n  stickAround() {\n    if (this.state.value === 'removed') {\n      return;\n    }\n    if (this.options.disableTimeOut !== 'extendedTimeOut') {\n      clearTimeout(this.timeout);\n      this.options.timeOut = 0;\n      this.hideTime = 0;\n      // disable progressBar\n      clearInterval(this.intervalId);\n      this.width = 0;\n    }\n  }\n  delayedHideToast() {\n    if (this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut' || this.options.extendedTimeOut === 0 || this.state.value === 'removed') {\n      return;\n    }\n    this.outsideTimeout(() => this.remove(), this.options.extendedTimeOut);\n    this.options.timeOut = this.options.extendedTimeOut;\n    this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n    this.width = -1;\n    if (this.options.progressBar) {\n      this.outsideInterval(() => this.updateProgress(), 10);\n    }\n  }\n  outsideTimeout(func, timeout) {\n    if (this.ngZone) {\n      this.ngZone.runOutsideAngular(() => this.timeout = setTimeout(() => this.runInsideAngular(func), timeout));\n    } else {\n      this.timeout = setTimeout(() => func(), timeout);\n    }\n  }\n  outsideInterval(func, timeout) {\n    if (this.ngZone) {\n      this.ngZone.runOutsideAngular(() => this.intervalId = setInterval(() => this.runInsideAngular(func), timeout));\n    } else {\n      this.intervalId = setInterval(() => func(), timeout);\n    }\n  }\n  runInsideAngular(func) {\n    if (this.ngZone) {\n      this.ngZone.run(() => func());\n    } else {\n      func();\n    }\n  }\n  static ɵfac = function Toast_Factory(t) {\n    return new (t || Toast)(i0.ɵɵdirectiveInject(ToastrService), i0.ɵɵdirectiveInject(ToastPackage), i0.ɵɵdirectiveInject(i0.NgZone));\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: Toast,\n    selectors: [[\"\", \"toast-component\", \"\"]],\n    hostVars: 5,\n    hostBindings: function Toast_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function Toast_click_HostBindingHandler() {\n          return ctx.tapToast();\n        })(\"mouseenter\", function Toast_mouseenter_HostBindingHandler() {\n          return ctx.stickAround();\n        })(\"mouseleave\", function Toast_mouseleave_HostBindingHandler() {\n          return ctx.delayedHideToast();\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵsyntheticHostProperty(\"@flyInOut\", ctx.state);\n        i0.ɵɵclassMap(ctx.toastClasses);\n        i0.ɵɵstyleProp(\"display\", ctx.displayStyle);\n      }\n    },\n    standalone: true,\n    features: [i0.ɵɵStandaloneFeature],\n    attrs: _c0,\n    decls: 5,\n    vars: 5,\n    consts: [[\"type\", \"button\", \"class\", \"toast-close-button\", \"aria-label\", \"Close\", 3, \"click\", 4, \"ngIf\"], [3, \"class\", 4, \"ngIf\"], [\"role\", \"alert\", 3, \"class\", \"innerHTML\", 4, \"ngIf\"], [\"role\", \"alert\", 3, \"class\", 4, \"ngIf\"], [4, \"ngIf\"], [\"type\", \"button\", \"aria-label\", \"Close\", 1, \"toast-close-button\", 3, \"click\"], [\"aria-hidden\", \"true\"], [\"role\", \"alert\", 3, \"innerHTML\"], [\"role\", \"alert\"], [1, \"toast-progress\"]],\n    template: function Toast_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, Toast_button_0_Template, 3, 0, \"button\", 0);\n        i0.ɵɵtemplate(1, Toast_div_1_Template, 3, 5, \"div\", 1);\n        i0.ɵɵtemplate(2, Toast_div_2_Template, 1, 3, \"div\", 2);\n        i0.ɵɵtemplate(3, Toast_div_3_Template, 2, 4, \"div\", 3);\n        i0.ɵɵtemplate(4, Toast_div_4_Template, 2, 2, \"div\", 4);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.options.closeButton);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.title);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.message && ctx.options.enableHtml);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.message && !ctx.options.enableHtml);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.options.progressBar);\n      }\n    },\n    dependencies: [NgIf],\n    encapsulation: 2,\n    data: {\n      animation: [trigger('flyInOut', [state('inactive', style({\n        opacity: 0\n      })), state('active', style({\n        opacity: 1\n      })), state('removed', style({\n        opacity: 0\n      })), transition('inactive => active', animate('{{ easeTime }}ms {{ easing }}')), transition('active => removed', animate('{{ easeTime }}ms {{ easing }}'))])]\n    }\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Toast, [{\n    type: Component,\n    args: [{\n      selector: '[toast-component]',\n      template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" type=\"button\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width + '%'\"></div>\n  </div>\n  `,\n      animations: [trigger('flyInOut', [state('inactive', style({\n        opacity: 0\n      })), state('active', style({\n        opacity: 1\n      })), state('removed', style({\n        opacity: 0\n      })), transition('inactive => active', animate('{{ easeTime }}ms {{ easing }}')), transition('active => removed', animate('{{ easeTime }}ms {{ easing }}'))])],\n      preserveWhitespaces: false,\n      standalone: true,\n      imports: [NgIf]\n    }]\n  }], () => [{\n    type: ToastrService\n  }, {\n    type: ToastPackage\n  }, {\n    type: i0.NgZone\n  }], {\n    toastClasses: [{\n      type: HostBinding,\n      args: ['class']\n    }],\n    state: [{\n      type: HostBinding,\n      args: ['@flyInOut']\n    }],\n    displayStyle: [{\n      type: HostBinding,\n      args: ['style.display']\n    }],\n    tapToast: [{\n      type: HostListener,\n      args: ['click']\n    }],\n    stickAround: [{\n      type: HostListener,\n      args: ['mouseenter']\n    }],\n    delayedHideToast: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\nconst DefaultGlobalConfig = {\n  ...DefaultNoComponentGlobalConfig,\n  toastComponent: Toast\n};\n/**\n * @description\n * Provides the `TOAST_CONFIG` token with the given config.\n *\n * @param config The config to configure toastr.\n * @returns The environment providers.\n *\n * @example\n * ```ts\n * import { provideToastr } from 'ngx-toastr';\n *\n * bootstrap(AppComponent, {\n *   providers: [\n *     provideToastr({\n *       timeOut: 2000,\n *       positionClass: 'toast-top-right',\n *     }),\n *   ],\n * })\n */\nconst provideToastr = (config = {}) => {\n  const providers = [{\n    provide: TOAST_CONFIG,\n    useValue: {\n      default: DefaultGlobalConfig,\n      config\n    }\n  }];\n  return makeEnvironmentProviders(providers);\n};\nclass ToastrModule {\n  static forRoot(config = {}) {\n    return {\n      ngModule: ToastrModule,\n      providers: [provideToastr(config)]\n    };\n  }\n  static ɵfac = function ToastrModule_Factory(t) {\n    return new (t || ToastrModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: ToastrModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ToastrModule, [{\n    type: NgModule,\n    args: [{\n      imports: [Toast],\n      exports: [Toast]\n    }]\n  }], null, null);\n})();\nclass ToastrComponentlessModule {\n  static forRoot(config = {}) {\n    return {\n      ngModule: ToastrModule,\n      providers: [{\n        provide: TOAST_CONFIG,\n        useValue: {\n          default: DefaultNoComponentGlobalConfig,\n          config\n        }\n      }]\n    };\n  }\n  static ɵfac = function ToastrComponentlessModule_Factory(t) {\n    return new (t || ToastrComponentlessModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: ToastrComponentlessModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ToastrComponentlessModule, [{\n    type: NgModule,\n    args: [{}]\n  }], null, null);\n})();\nclass ToastNoAnimation {\n  toastrService;\n  toastPackage;\n  appRef;\n  message;\n  title;\n  options;\n  duplicatesCount;\n  originalTimeout;\n  /** width of progress bar */\n  width = -1;\n  /** a combination of toast type and options.toastClass */\n  toastClasses = '';\n  /** hides component when waiting to be displayed */\n  get displayStyle() {\n    if (this.state === 'inactive') {\n      return 'none';\n    }\n    return null;\n  }\n  /** controls animation */\n  state = 'inactive';\n  timeout;\n  intervalId;\n  hideTime;\n  sub;\n  sub1;\n  sub2;\n  sub3;\n  constructor(toastrService, toastPackage, appRef) {\n    this.toastrService = toastrService;\n    this.toastPackage = toastPackage;\n    this.appRef = appRef;\n    this.message = toastPackage.message;\n    this.title = toastPackage.title;\n    this.options = toastPackage.config;\n    this.originalTimeout = toastPackage.config.timeOut;\n    this.toastClasses = `${toastPackage.toastType} ${toastPackage.config.toastClass}`;\n    this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n      this.activateToast();\n    });\n    this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n      this.remove();\n    });\n    this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\n      this.resetTimeout();\n    });\n    this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(count => {\n      this.duplicatesCount = count;\n    });\n  }\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n    this.sub1.unsubscribe();\n    this.sub2.unsubscribe();\n    this.sub3.unsubscribe();\n    clearInterval(this.intervalId);\n    clearTimeout(this.timeout);\n  }\n  /**\n   * activates toast and sets timeout\n   */\n  activateToast() {\n    this.state = 'active';\n    if (!(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') && this.options.timeOut) {\n      this.timeout = setTimeout(() => {\n        this.remove();\n      }, this.options.timeOut);\n      this.hideTime = new Date().getTime() + this.options.timeOut;\n      if (this.options.progressBar) {\n        this.intervalId = setInterval(() => this.updateProgress(), 10);\n      }\n    }\n    if (this.options.onActivateTick) {\n      this.appRef.tick();\n    }\n  }\n  /**\n   * updates progress bar width\n   */\n  updateProgress() {\n    if (this.width === 0 || this.width === 100 || !this.options.timeOut) {\n      return;\n    }\n    const now = new Date().getTime();\n    const remaining = this.hideTime - now;\n    this.width = remaining / this.options.timeOut * 100;\n    if (this.options.progressAnimation === 'increasing') {\n      this.width = 100 - this.width;\n    }\n    if (this.width <= 0) {\n      this.width = 0;\n    }\n    if (this.width >= 100) {\n      this.width = 100;\n    }\n  }\n  resetTimeout() {\n    clearTimeout(this.timeout);\n    clearInterval(this.intervalId);\n    this.state = 'active';\n    this.options.timeOut = this.originalTimeout;\n    this.timeout = setTimeout(() => this.remove(), this.originalTimeout);\n    this.hideTime = new Date().getTime() + (this.originalTimeout || 0);\n    this.width = -1;\n    if (this.options.progressBar) {\n      this.intervalId = setInterval(() => this.updateProgress(), 10);\n    }\n  }\n  /**\n   * tells toastrService to remove this toast after animation time\n   */\n  remove() {\n    if (this.state === 'removed') {\n      return;\n    }\n    clearTimeout(this.timeout);\n    this.state = 'removed';\n    this.timeout = setTimeout(() => this.toastrService.remove(this.toastPackage.toastId));\n  }\n  tapToast() {\n    if (this.state === 'removed') {\n      return;\n    }\n    this.toastPackage.triggerTap();\n    if (this.options.tapToDismiss) {\n      this.remove();\n    }\n  }\n  stickAround() {\n    if (this.state === 'removed') {\n      return;\n    }\n    clearTimeout(this.timeout);\n    this.options.timeOut = 0;\n    this.hideTime = 0;\n    // disable progressBar\n    clearInterval(this.intervalId);\n    this.width = 0;\n  }\n  delayedHideToast() {\n    if (this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut' || this.options.extendedTimeOut === 0 || this.state === 'removed') {\n      return;\n    }\n    this.timeout = setTimeout(() => this.remove(), this.options.extendedTimeOut);\n    this.options.timeOut = this.options.extendedTimeOut;\n    this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n    this.width = -1;\n    if (this.options.progressBar) {\n      this.intervalId = setInterval(() => this.updateProgress(), 10);\n    }\n  }\n  static ɵfac = function ToastNoAnimation_Factory(t) {\n    return new (t || ToastNoAnimation)(i0.ɵɵdirectiveInject(ToastrService), i0.ɵɵdirectiveInject(ToastPackage), i0.ɵɵdirectiveInject(i0.ApplicationRef));\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: ToastNoAnimation,\n    selectors: [[\"\", \"toast-component\", \"\"]],\n    hostVars: 4,\n    hostBindings: function ToastNoAnimation_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function ToastNoAnimation_click_HostBindingHandler() {\n          return ctx.tapToast();\n        })(\"mouseenter\", function ToastNoAnimation_mouseenter_HostBindingHandler() {\n          return ctx.stickAround();\n        })(\"mouseleave\", function ToastNoAnimation_mouseleave_HostBindingHandler() {\n          return ctx.delayedHideToast();\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵclassMap(ctx.toastClasses);\n        i0.ɵɵstyleProp(\"display\", ctx.displayStyle);\n      }\n    },\n    standalone: true,\n    features: [i0.ɵɵStandaloneFeature],\n    attrs: _c0,\n    decls: 5,\n    vars: 5,\n    consts: [[\"type\", \"button\", \"class\", \"toast-close-button\", \"aria-label\", \"Close\", 3, \"click\", 4, \"ngIf\"], [3, \"class\", 4, \"ngIf\"], [\"role\", \"alert\", 3, \"class\", \"innerHTML\", 4, \"ngIf\"], [\"role\", \"alert\", 3, \"class\", 4, \"ngIf\"], [4, \"ngIf\"], [\"type\", \"button\", \"aria-label\", \"Close\", 1, \"toast-close-button\", 3, \"click\"], [\"aria-hidden\", \"true\"], [\"role\", \"alert\", 3, \"innerHTML\"], [\"role\", \"alert\"], [1, \"toast-progress\"]],\n    template: function ToastNoAnimation_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, ToastNoAnimation_button_0_Template, 3, 0, \"button\", 0);\n        i0.ɵɵtemplate(1, ToastNoAnimation_div_1_Template, 3, 5, \"div\", 1);\n        i0.ɵɵtemplate(2, ToastNoAnimation_div_2_Template, 1, 3, \"div\", 2);\n        i0.ɵɵtemplate(3, ToastNoAnimation_div_3_Template, 2, 4, \"div\", 3);\n        i0.ɵɵtemplate(4, ToastNoAnimation_div_4_Template, 2, 2, \"div\", 4);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.options.closeButton);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.title);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.message && ctx.options.enableHtml);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.message && !ctx.options.enableHtml);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.options.progressBar);\n      }\n    },\n    dependencies: [NgIf],\n    encapsulation: 2\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ToastNoAnimation, [{\n    type: Component,\n    args: [{\n      selector: '[toast-component]',\n      template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" type=\"button\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width + '%'\"></div>\n  </div>\n  `,\n      standalone: true,\n      imports: [NgIf]\n    }]\n  }], () => [{\n    type: ToastrService\n  }, {\n    type: ToastPackage\n  }, {\n    type: i0.ApplicationRef\n  }], {\n    toastClasses: [{\n      type: HostBinding,\n      args: ['class']\n    }],\n    displayStyle: [{\n      type: HostBinding,\n      args: ['style.display']\n    }],\n    tapToast: [{\n      type: HostListener,\n      args: ['click']\n    }],\n    stickAround: [{\n      type: HostListener,\n      args: ['mouseenter']\n    }],\n    delayedHideToast: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\nconst DefaultNoAnimationsGlobalConfig = {\n  ...DefaultNoComponentGlobalConfig,\n  toastComponent: ToastNoAnimation\n};\nclass ToastNoAnimationModule {\n  static forRoot(config = {}) {\n    return {\n      ngModule: ToastNoAnimationModule,\n      providers: [{\n        provide: TOAST_CONFIG,\n        useValue: {\n          default: DefaultNoAnimationsGlobalConfig,\n          config\n        }\n      }]\n    };\n  }\n  static ɵfac = function ToastNoAnimationModule_Factory(t) {\n    return new (t || ToastNoAnimationModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: ToastNoAnimationModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ToastNoAnimationModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ToastNoAnimation],\n      exports: [ToastNoAnimation]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BasePortalHost, ComponentPortal, DefaultGlobalConfig, DefaultNoAnimationsGlobalConfig, DefaultNoComponentGlobalConfig, Overlay, OverlayContainer, OverlayRef, TOAST_CONFIG, Toast, ToastContainerDirective, ToastNoAnimation, ToastNoAnimationModule, ToastPackage, ToastRef, ToastrComponentlessModule, ToastrModule, ToastrService, provideToastr };","map":{"version":3,"names":["ToastContainerDirective","el","constructor","getContainerElement","nativeElement","i0","ElementRef","selectors","exportAs","standalone","Directive","args","selector","ComponentPortal","_attachedHost","component","viewContainerRef","injector","attach","host","newestOnTop","detach","undefined","isAttached","setAttachedHost","BasePortalHost","_attachedPortal","_disposeFn","portal","attachComponentPortal","setDisposeFn","fn","ToastRef","_overlayRef","componentInstance","duplicatesCount","_afterClosed","Subject","_activate","_manualClose","_resetTimeout","_countDuplicate","manualClose","next","complete","manualClosed","asObservable","timeoutReset","countDuplicate","close","afterClosed","isInactive","isStopped","activate","afterActivate","onDuplicate","resetTimeout","ToastPackage","toastId","config","message","title","toastType","toastRef","_onTap","_onAction","subscribe","triggerTap","tapToDismiss","onTap","triggerAction","action","onAction","DefaultNoComponentGlobalConfig","maxOpened","autoDismiss","preventDuplicates","countDuplicates","resetTimeoutOnDuplicate","includeTitleDuplicates","iconClasses","error","info","success","warning","closeButton","disableTimeOut","timeOut","extendedTimeOut","enableHtml","progressBar","toastClass","positionClass","titleClass","messageClass","easing","easeTime","onActivateTick","progressAnimation","TOAST_CONFIG","InjectionToken","DomPortalHost","_hostDomElement","_componentFactoryResolver","_appRef","componentFactory","resolveComponentFactory","componentRef","create","attachView","hostView","detachView","destroy","insertBefore","_getComponentRootNode","firstChild","appendChild","rootNodes","OverlayContainer","_document","inject","DOCUMENT","_containerElement","ngOnDestroy","parentNode","removeChild","_createContainer","container","createElement","classList","add","setAttribute","body","ɵprov","factory","ɵfac","providedIn","Injectable","OverlayRef","_portalHost","Overlay","_overlayContainer","ComponentFactoryResolver","ApplicationRef","_paneElements","Map","overlayContainer","_createOverlayRef","getPaneElement","get","set","_createPaneElement","pane","id","_createPortalHost","ToastrService","overlay","_injector","sanitizer","ngZone","toastrConfig","currentlyActive","toasts","previousToastMessage","index","token","default","show","override","type","_preBuildNotification","applyConfig","clear","toast","remove","found","_findToast","activeToast","splice","length","p","findDuplicate","resetOnDuplicate","hasDuplicateTitle","i","run","_buildNotification","toastComponent","Error","duplicate","keepInactive","overlayRef","sanitizedMessage","sanitize","SecurityContext","HTML","toastPackage","providers","provide","useValue","toastInjector","Injector","parent","instance","ins","onShown","onHidden","setTimeout","push","ToastrService_Factory","t","i2","DomSanitizer","NgZone","Inject","Toast","toastrService","options","originalTimeout","width","toastClasses","state","displayStyle","value","timeout","intervalId","hideTime","sub","sub1","sub2","sub3","activateToast","count","params","unsubscribe","clearInterval","clearTimeout","outsideTimeout","Date","getTime","outsideInterval","updateProgress","now","remaining","tapToast","stickAround","delayedHideToast","func","runOutsideAngular","runInsideAngular","setInterval","ɵcmp","hostVars","hostBindings","Toast_HostBindings","rf","ctx","Toast_mouseenter_HostBindingHandler","Toast_mouseleave_HostBindingHandler","NgIf","encapsulation","data","animation","trigger","style","opacity","transition","animate","Component","template","animations","preserveWhitespaces","imports","HostBinding","HostListener","DefaultGlobalConfig","provideToastr","makeEnvironmentProviders","ToastrModule","forRoot","ngModule","NgModule","exports","ToastrComponentlessModule","ToastNoAnimation","appRef","tick","ToastNoAnimation_HostBindings","ToastNoAnimation_mouseenter_HostBindingHandler","ToastNoAnimation_mouseleave_HostBindingHandler","DefaultNoAnimationsGlobalConfig","ToastNoAnimationModule"],"sources":["C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\node_modules\\src\\lib\\toastr\\toast.directive.ts","C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\node_modules\\src\\lib\\portal\\portal.ts","C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\node_modules\\src\\lib\\toastr\\toast-ref.ts","C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\node_modules\\src\\lib\\toastr\\toastr-config.ts","C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\node_modules\\src\\lib\\portal\\dom-portal-host.ts","C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\node_modules\\src\\lib\\overlay\\overlay-container.ts","C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\node_modules\\src\\lib\\overlay\\overlay-ref.ts","C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\node_modules\\src\\lib\\overlay\\overlay.ts","C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\node_modules\\src\\lib\\toastr\\toastr.service.ts","C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\node_modules\\src\\lib\\toastr\\toast.component.ts","C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\node_modules\\src\\lib\\toastr\\toast.provider.ts","C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\node_modules\\src\\lib\\toastr\\toastr.module.ts","C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\node_modules\\src\\lib\\toastr\\toast-noanimation.component.ts","C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\node_modules\\src\\lib\\ngx-toastr.ts"],"sourcesContent":["import { Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[toastContainer]',\n  exportAs: 'toastContainer',\n  standalone: true\n})\nexport class ToastContainerDirective {\n  constructor(private el: ElementRef) { }\n  getContainerElement(): HTMLElement {\n    return this.el.nativeElement;\n  }\n}\n","import {\n  ComponentRef,\n  Injector,\n  ViewContainerRef\n} from '@angular/core';\n\nexport interface ComponentType<T> {\n  new (...args: any[]): T;\n}\n\n\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nexport class ComponentPortal<T> {\n  private _attachedHost?: BasePortalHost;\n  /** The type of the component that will be instantiated for attachment. */\n  component: ComponentType<T>;\n\n  /**\n   * [Optional] Where the attached component should live in Angular's *logical* component tree.\n   * This is different from where the component *renders*, which is determined by the PortalHost.\n   * The origin necessary when the host is outside of the Angular application context.\n   */\n  viewContainerRef!: ViewContainerRef;\n\n  /** Injector used for the instantiation of the component. */\n  injector: Injector;\n\n  constructor(component: ComponentType<T>, injector: Injector) {\n    this.component = component;\n    this.injector = injector;\n  }\n\n  /** Attach this portal to a host. */\n  attach(host: BasePortalHost, newestOnTop: boolean): ComponentRef<any> {\n    this._attachedHost = host;\n    return host.attach(this, newestOnTop);\n  }\n\n  /** Detach this portal from its host */\n  detach() {\n    const host = this._attachedHost;\n    if (host) {\n      this._attachedHost = undefined;\n      return host.detach();\n    }\n  }\n\n  /** Whether this portal is attached to a host. */\n  get isAttached(): boolean {\n    return this._attachedHost != null;\n  }\n\n  /**\n   * Sets the PortalHost reference without performing `attach()`. This is used directly by\n   * the PortalHost when it is performing an `attach()` or `detach()`.\n   */\n  setAttachedHost(host?: BasePortalHost) {\n    this._attachedHost = host;\n  }\n}\n\n/**\n * Partial implementation of PortalHost that only deals with attaching a\n * ComponentPortal\n */\nexport abstract class BasePortalHost {\n  /** The portal currently attached to the host. */\n  private _attachedPortal?: ComponentPortal<any>;\n\n  /** A function that will permanently dispose this host. */\n  private _disposeFn?: () => void;\n\n  attach(portal: ComponentPortal<any>, newestOnTop: boolean) {\n    this._attachedPortal = portal;\n    return this.attachComponentPortal(portal, newestOnTop);\n  }\n\n  abstract attachComponentPortal<T>(portal: ComponentPortal<T>, newestOnTop: boolean): ComponentRef<T>;\n\n  detach() {\n    if (this._attachedPortal) {\n      this._attachedPortal.setAttachedHost();\n    }\n\n    this._attachedPortal = undefined;\n    if (this._disposeFn) {\n      this._disposeFn();\n      this._disposeFn = undefined;\n    }\n  }\n\n  setDisposeFn(fn: () => void) {\n    this._disposeFn = fn;\n  }\n}\n","import { Observable, Subject } from 'rxjs';\nimport { OverlayRef } from '../overlay/overlay-ref';\n\n/**\n * Reference to a toast opened via the Toastr service.\n */\nexport class ToastRef<T> {\n  /** The instance of component opened into the toast. */\n  componentInstance!: T;\n\n  /** Count of duplicates of this toast */\n  private duplicatesCount = 0;\n\n  /** Subject for notifying the user that the toast has finished closing. */\n  private _afterClosed = new Subject<void>();\n  /** triggered when toast is activated */\n  private _activate = new Subject<void>();\n  /** notifies the toast that it should close before the timeout */\n  private _manualClose = new Subject<void>();\n  /** notifies the toast that it should reset the timeouts */\n  private _resetTimeout = new Subject<void>();\n  /** notifies the toast that it should count a duplicate toast */\n  private _countDuplicate = new Subject<number>();\n\n  constructor(private _overlayRef: OverlayRef) {}\n\n  manualClose() {\n    this._manualClose.next();\n    this._manualClose.complete();\n  }\n\n  manualClosed(): Observable<any> {\n    return this._manualClose.asObservable();\n  }\n\n  timeoutReset(): Observable<any> {\n    return this._resetTimeout.asObservable();\n  }\n\n  countDuplicate(): Observable<number> {\n    return this._countDuplicate.asObservable();\n  }\n\n  /**\n   * Close the toast.\n   */\n  close(): void {\n    this._overlayRef.detach();\n    this._afterClosed.next();\n    this._manualClose.next();\n    this._afterClosed.complete();\n    this._manualClose.complete();\n    this._activate.complete();\n    this._resetTimeout.complete();\n    this._countDuplicate.complete();\n  }\n\n  /** Gets an observable that is notified when the toast is finished closing. */\n  afterClosed(): Observable<any> {\n    return this._afterClosed.asObservable();\n  }\n\n  isInactive() {\n    return this._activate.isStopped;\n  }\n\n  activate() {\n    this._activate.next();\n    this._activate.complete();\n  }\n\n  /** Gets an observable that is notified when the toast has started opening. */\n  afterActivate(): Observable<any> {\n    return this._activate.asObservable();\n  }\n\n  /** Reset the toast timouts and count duplicates */\n  onDuplicate(resetTimeout: boolean, countDuplicate: boolean) {\n    if (resetTimeout) {\n      this._resetTimeout.next();\n    }\n    if (countDuplicate) {\n      this._countDuplicate.next(++this.duplicatesCount);\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nimport { Observable, Subject } from 'rxjs';\n\nimport { ComponentType } from '../portal/portal';\nimport { ToastRef } from './toast-ref';\n\nexport type ProgressAnimationType = 'increasing' | 'decreasing';\nexport type DisableTimoutType = boolean | 'timeOut' | 'extendedTimeOut';\n\n/**\n * Configuration for an individual toast.\n */\nexport interface IndividualConfig<ConfigPayload = any> {\n  /**\n   * disable both timeOut and extendedTimeOut\n   * default: false\n   */\n  disableTimeOut: DisableTimoutType;\n  /**\n   * toast time to live in milliseconds\n   * default: 5000\n   */\n  timeOut: number;\n  /**\n   * toast show close button\n   * default: false\n   */\n  closeButton: boolean;\n  /**\n   * time to close after a user hovers over toast\n   * default: 1000\n   */\n  extendedTimeOut: number;\n  /**\n   * show toast progress bar\n   * default: false\n   */\n  progressBar: boolean;\n\n  /**\n   * changes toast progress bar animation\n   * default: decreasing\n   */\n  progressAnimation: ProgressAnimationType;\n\n  /**\n   * render html in toast message (possibly unsafe)\n   * default: false\n   */\n  enableHtml: boolean;\n  /**\n   * css class on toast component\n   * default: ngx-toastr\n   */\n  toastClass: string;\n  /**\n   * css class on toast container\n   * default: toast-top-right\n   */\n  positionClass: string;\n  /**\n   * css class on toast title\n   * default: toast-title\n   */\n  titleClass: string;\n  /**\n   * css class on toast message\n   * default: toast-message\n   */\n  messageClass: string;\n  /**\n   * animation easing on toast\n   * default: ease-in\n   */\n  easing: string;\n  /**\n   * animation ease time on toast\n   * default: 300\n   */\n  easeTime: string | number;\n  /**\n   * clicking on toast dismisses it\n   * default: true\n   */\n  tapToDismiss: boolean;\n  /**\n   * Angular toast component to be shown\n   * default: Toast\n   */\n  toastComponent?: ComponentType<any>;\n  /**\n   * Helps show toast from a websocket or from event outside Angular\n   * default: false\n   */\n  onActivateTick: boolean;\n  /**\n   * New toast placement\n   * default: true\n   */\n  newestOnTop: boolean;\n\n  /**\n   * Payload to pass to the toast component\n   */\n  payload?: ConfigPayload;\n}\n\nexport interface ToastrIconClasses {\n  error: string;\n  info: string;\n  success: string;\n  warning: string;\n  [key: string]: string;\n}\n\n/**\n * Global Toast configuration\n * Includes all IndividualConfig\n */\nexport interface GlobalConfig extends IndividualConfig {\n  /**\n   * max toasts opened. Toasts will be queued\n   * Zero is unlimited\n   * default: 0\n   */\n  maxOpened: number;\n  /**\n   * dismiss current toast when max is reached\n   * default: false\n   */\n  autoDismiss: boolean;\n  iconClasses: Partial<ToastrIconClasses>;\n  /**\n   * block duplicate messages\n   * default: false\n   */\n  preventDuplicates: boolean;\n  /**\n   * display the number of duplicate messages\n   * default: false\n   */\n  countDuplicates: boolean;\n  /**\n   * Reset toast timeout when there's a duplicate (preventDuplicates needs to be set to true)\n   * default: false\n   */\n  resetTimeoutOnDuplicate: boolean;\n  /**\n   * consider the title of a toast when checking if duplicate\n   * default: false\n   */\n  includeTitleDuplicates: boolean;\n}\n\n/**\n * Everything a toast needs to launch\n */\nexport class ToastPackage<ConfigPayload = any> {\n  private _onTap = new Subject<void>();\n  private _onAction = new Subject<any>();\n\n  constructor(\n    public toastId: number,\n    public config: IndividualConfig<ConfigPayload>,\n    public message: string | null | undefined,\n    public title: string | undefined,\n    public toastType: string,\n    public toastRef: ToastRef<any>,\n  ) {\n    this.toastRef.afterClosed().subscribe(() => {\n      this._onAction.complete();\n      this._onTap.complete();\n    });\n  }\n\n  /** Fired on click */\n  triggerTap(): void {\n    this._onTap.next();\n    if (this.config.tapToDismiss) {\n      this._onTap.complete();\n    }\n  }\n\n  onTap(): Observable<void> {\n    return this._onTap.asObservable();\n  }\n\n  /** available for use in custom toast */\n  triggerAction(action?: any): void {\n    this._onAction.next(action);\n  }\n\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n\n/** @deprecated use GlobalConfig */\nexport interface GlobalToastrConfig extends GlobalConfig {}\n/** @deprecated use IndividualConfig */\nexport interface IndividualToastrConfig extends IndividualConfig {}\n/** @deprecated use IndividualConfig */\nexport interface ToastrConfig extends IndividualConfig {}\n\nexport const DefaultNoComponentGlobalConfig: GlobalConfig = {\n  maxOpened: 0,\n  autoDismiss: false,\n  newestOnTop: true,\n  preventDuplicates: false,\n  countDuplicates: false,\n  resetTimeoutOnDuplicate: false,\n  includeTitleDuplicates: false,\n\n  iconClasses: {\n    error: 'toast-error',\n    info: 'toast-info',\n    success: 'toast-success',\n    warning: 'toast-warning',\n  },\n\n  // Individual\n  closeButton: false,\n  disableTimeOut: false,\n  timeOut: 5000,\n  extendedTimeOut: 1000,\n  enableHtml: false,\n  progressBar: false,\n  toastClass: 'ngx-toastr',\n  positionClass: 'toast-top-right',\n  titleClass: 'toast-title',\n  messageClass: 'toast-message',\n  easing: 'ease-in',\n  easeTime: 300,\n  tapToDismiss: true,\n  onActivateTick: false,\n  progressAnimation: 'decreasing',\n};\n\nexport interface ToastToken {\n  default: GlobalConfig;\n  config: Partial<GlobalConfig>;\n}\n\nexport const TOAST_CONFIG = new InjectionToken<ToastToken>('ToastConfig');\n","import {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  ComponentRef,\n  EmbeddedViewRef,\n} from '@angular/core';\nimport { BasePortalHost, ComponentPortal } from './portal';\n\n/**\n * A PortalHost for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n *\n * This is the only part of the portal core that directly touches the DOM.\n */\nexport class DomPortalHost extends BasePortalHost {\n  constructor(\n    private _hostDomElement: Element,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n  ) {\n    super();\n  }\n\n  /**\n   * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n   * @param portal Portal to be attached\n   */\n  attachComponentPortal<T>(\n    portal: ComponentPortal<T>,\n    newestOnTop: boolean,\n  ): ComponentRef<T> {\n    const componentFactory = this._componentFactoryResolver.resolveComponentFactory(\n      portal.component,\n    );\n    let componentRef: ComponentRef<T>;\n\n    // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n    // for the component (in terms of Angular's component tree, not rendering).\n    // When the ViewContainerRef is missing, we use the factory to create the component directly\n    // and then manually attach the ChangeDetector for that component to the application (which\n    // happens automatically when using a ViewContainer).\n    componentRef = componentFactory.create(portal.injector);\n\n    // When creating a component outside of a ViewContainer, we need to manually register\n    // its ChangeDetector with the application. This API is unfortunately not yet published\n    // in Angular core. The change detector must also be deregistered when the component\n    // is destroyed to prevent memory leaks.\n    this._appRef.attachView(componentRef.hostView);\n\n    this.setDisposeFn(() => {\n      this._appRef.detachView(componentRef.hostView);\n      componentRef.destroy();\n    });\n\n    // At this point the component has been instantiated, so we move it to the location in the DOM\n    // where we want it to be rendered.\n    if (newestOnTop) {\n      this._hostDomElement.insertBefore(\n        this._getComponentRootNode(componentRef),\n        this._hostDomElement.firstChild,\n      );\n    } else {\n      this._hostDomElement.appendChild(\n        this._getComponentRootNode(componentRef),\n      );\n    }\n\n    return componentRef;\n  }\n\n  /** Gets the root HTMLElement for an instantiated component. */\n  private _getComponentRootNode(componentRef: ComponentRef<any>): HTMLElement {\n    return (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { inject, Injectable, OnDestroy } from '@angular/core';\n\n/** Container inside which all toasts will render. */\n@Injectable({ providedIn: 'root' })\nexport class OverlayContainer implements OnDestroy {\n  protected _document = inject(DOCUMENT);\n  protected _containerElement!: HTMLElement;\n\n  ngOnDestroy() {\n    if (this._containerElement && this._containerElement.parentNode) {\n      this._containerElement.parentNode.removeChild(this._containerElement);\n    }\n  }\n\n  /**\n   * This method returns the overlay container element. It will lazily\n   * create the element the first time  it is called to facilitate using\n   * the container in non-browser environments.\n   * @returns the container element\n   */\n  getContainerElement(): HTMLElement {\n    if (!this._containerElement) {\n      this._createContainer();\n    }\n    return this._containerElement;\n  }\n\n  /**\n   * Create the overlay container element, which is simply a div\n   * with the 'cdk-overlay-container' class on the document body\n   * and 'aria-live=\"polite\"'\n   */\n  protected _createContainer(): void {\n    const container = this._document.createElement('div');\n    container.classList.add('overlay-container');\n    container.setAttribute('aria-live','polite');\n    this._document.body.appendChild(container);\n    this._containerElement = container;\n  }\n}\n","import { ComponentRef } from '@angular/core';\nimport { BasePortalHost, ComponentPortal } from '../portal/portal';\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nexport class OverlayRef {\n  constructor(private _portalHost: BasePortalHost) {}\n\n  attach(\n    portal: ComponentPortal<any>,\n    newestOnTop: boolean = true,\n  ): ComponentRef<any> {\n    return this._portalHost.attach(portal, newestOnTop);\n  }\n\n  /**\n   * Detaches an overlay from a portal.\n   * @returns Resolves when the overlay has been detached.\n   */\n  detach() {\n    return this._portalHost.detach();\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { ApplicationRef, ComponentFactoryResolver, inject, Injectable } from '@angular/core';\n\nimport { DomPortalHost } from '../portal/dom-portal-host';\nimport { ToastContainerDirective } from '../toastr/toast.directive';\nimport { OverlayContainer } from './overlay-container';\nimport { OverlayRef } from './overlay-ref';\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\n */\n@Injectable({ providedIn: 'root' })\nexport class Overlay {\n  private _overlayContainer = inject(OverlayContainer);\n  private _componentFactoryResolver = inject(ComponentFactoryResolver);\n  private _appRef = inject(ApplicationRef);\n  private _document = inject(DOCUMENT);\n\n  // Namespace panes by overlay container\n  private _paneElements: Map<ToastContainerDirective, Record<string, HTMLElement>> = new Map();\n\n  /**\n   * Creates an overlay.\n   * @returns A reference to the created overlay.\n   */\n  create(positionClass?: string, overlayContainer?: ToastContainerDirective): OverlayRef {\n    // get existing pane if possible\n    return this._createOverlayRef(this.getPaneElement(positionClass, overlayContainer));\n  }\n\n  getPaneElement(\n    positionClass: string = '',\n    overlayContainer?: ToastContainerDirective,\n  ): HTMLElement {\n    if (!this._paneElements.get(overlayContainer as ToastContainerDirective)) {\n      this._paneElements.set(overlayContainer as ToastContainerDirective, {});\n    }\n\n    if (!this._paneElements.get(overlayContainer as ToastContainerDirective)![positionClass]) {\n      this._paneElements.get(overlayContainer as ToastContainerDirective)![\n        positionClass\n      ] = this._createPaneElement(positionClass, overlayContainer);\n    }\n\n    return this._paneElements.get(overlayContainer as ToastContainerDirective)![positionClass];\n  }\n\n  /**\n   * Creates the DOM element for an overlay and appends it to the overlay container.\n   * @returns Newly-created pane element\n   */\n  private _createPaneElement(\n    positionClass: string,\n    overlayContainer?: ToastContainerDirective,\n  ): HTMLElement {\n    const pane = this._document.createElement('div');\n\n    pane.id = 'toast-container';\n    pane.classList.add(positionClass);\n    pane.classList.add('toast-container');\n\n    if (!overlayContainer) {\n      this._overlayContainer.getContainerElement().appendChild(pane);\n    } else {\n      overlayContainer.getContainerElement().appendChild(pane);\n    }\n\n    return pane;\n  }\n\n  /**\n   * Create a DomPortalHost into which the overlay content can be loaded.\n   * @param pane The DOM element to turn into a portal host.\n   * @returns A portal host for the given DOM element.\n   */\n  private _createPortalHost(pane: HTMLElement): DomPortalHost {\n    return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef);\n  }\n\n  /**\n   * Creates an OverlayRef for an overlay in the given DOM element.\n   * @param pane DOM element for the overlay\n   */\n  private _createOverlayRef(pane: HTMLElement): OverlayRef {\n    return new OverlayRef(this._createPortalHost(pane));\n  }\n}\n","import { ComponentRef, Inject, Injectable, Injector, NgZone, SecurityContext } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\n\nimport { Observable } from 'rxjs';\n\nimport { Overlay } from '../overlay/overlay';\nimport { ComponentPortal } from '../portal/portal';\nimport { ToastRef } from './toast-ref';\nimport { ToastContainerDirective } from './toast.directive';\nimport {\n  GlobalConfig,\n  IndividualConfig,\n  ToastPackage,\n  ToastToken,\n  TOAST_CONFIG,\n} from './toastr-config';\n\nexport interface ActiveToast<C> {\n  /** Your Toast ID. Use this to close it individually */\n  toastId: number;\n  /** the title of your toast. Stored to prevent duplicates */\n  title: string;\n  /** the message of your toast. Stored to prevent duplicates */\n  message: string;\n  /** a reference to the component see portal.ts */\n  portal: ComponentRef<C>;\n  /** a reference to your toast */\n  toastRef: ToastRef<C>;\n  /** triggered when toast is active */\n  onShown: Observable<void>;\n  /** triggered when toast is destroyed */\n  onHidden: Observable<void>;\n  /** triggered on toast click */\n  onTap: Observable<void>;\n  /** available for your use in custom toast */\n  onAction: Observable<any>;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ToastrService {\n  toastrConfig: GlobalConfig;\n  currentlyActive = 0;\n  toasts: ActiveToast<any>[] = [];\n  overlayContainer?: ToastContainerDirective;\n  previousToastMessage: string | undefined;\n  private index = 0;\n\n  constructor(\n    @Inject(TOAST_CONFIG) token: ToastToken,\n    private overlay: Overlay,\n    private _injector: Injector,\n    private sanitizer: DomSanitizer,\n    private ngZone: NgZone,\n  ) {\n    this.toastrConfig = {\n      ...token.default,\n      ...token.config,\n    };\n    if (token.config.iconClasses) {\n      this.toastrConfig.iconClasses = {\n        ...token.default.iconClasses,\n        ...token.config.iconClasses,\n      };\n    }\n  }\n  /** show toast */\n  show<ConfigPayload = any>(message?: string, title?: string, override: Partial<IndividualConfig<ConfigPayload>> = {}, type = '') {\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show successful toast */\n  success<ConfigPayload = any>(message?: string, title?: string, override: Partial<IndividualConfig<ConfigPayload>> = {}) {\n    const type = this.toastrConfig.iconClasses.success || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show error toast */\n  error<ConfigPayload = any>(message?: string, title?: string, override: Partial<IndividualConfig<ConfigPayload>> = {}) {\n    const type = this.toastrConfig.iconClasses.error || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show info toast */\n  info<ConfigPayload = any>(message?: string, title?: string, override: Partial<IndividualConfig<ConfigPayload>> = {}) {\n    const type = this.toastrConfig.iconClasses.info || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show warning toast */\n  warning<ConfigPayload = any>(message?: string, title?: string, override: Partial<IndividualConfig<ConfigPayload>> = {}) {\n    const type = this.toastrConfig.iconClasses.warning || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /**\n   * Remove all or a single toast by id\n   */\n  clear(toastId?: number) {\n    // Call every toastRef manualClose function\n    for (const toast of this.toasts) {\n      if (toastId !== undefined) {\n        if (toast.toastId === toastId) {\n          toast.toastRef.manualClose();\n          return;\n        }\n      } else {\n        toast.toastRef.manualClose();\n      }\n    }\n  }\n  /**\n   * Remove and destroy a single toast by id\n   */\n  remove(toastId: number) {\n    const found = this._findToast(toastId);\n    if (!found) {\n      return false;\n    }\n    found.activeToast.toastRef.close();\n    this.toasts.splice(found.index, 1);\n    this.currentlyActive = this.currentlyActive - 1;\n    if (!this.toastrConfig.maxOpened || !this.toasts.length) {\n      return false;\n    }\n    if (this.currentlyActive < this.toastrConfig.maxOpened && this.toasts[this.currentlyActive]) {\n      const p = this.toasts[this.currentlyActive].toastRef;\n      if (!p.isInactive()) {\n        this.currentlyActive = this.currentlyActive + 1;\n        p.activate();\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determines if toast message is already shown\n   */\n  findDuplicate(title = '', message = '', resetOnDuplicate: boolean, countDuplicates: boolean) {\n    const { includeTitleDuplicates } = this.toastrConfig;\n\n    for (const toast of this.toasts) {\n      const hasDuplicateTitle = includeTitleDuplicates && toast.title === title;\n      if ((!includeTitleDuplicates || hasDuplicateTitle) && toast.message === message) {\n        toast.toastRef.onDuplicate(resetOnDuplicate, countDuplicates);\n        return toast;\n      }\n    }\n\n    return null;\n  }\n\n  /** create a clone of global config and apply individual settings */\n  private applyConfig(override: Partial<IndividualConfig> = {}): GlobalConfig {\n    return { ...this.toastrConfig, ...override };\n  }\n\n  /**\n   * Find toast object by id\n   */\n  private _findToast(toastId: number): { index: number; activeToast: ActiveToast<any> } | null {\n    for (let i = 0; i < this.toasts.length; i++) {\n      if (this.toasts[i].toastId === toastId) {\n        return { index: i, activeToast: this.toasts[i] };\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Determines the need to run inside angular's zone then builds the toast\n   */\n  private _preBuildNotification(\n    toastType: string,\n    message: string | undefined,\n    title: string | undefined,\n    config: GlobalConfig,\n  ): ActiveToast<any> | null {\n    if (config.onActivateTick) {\n      return this.ngZone.run(() => this._buildNotification(toastType, message, title, config));\n    }\n    return this._buildNotification(toastType, message, title, config);\n  }\n\n  /**\n   * Creates and attaches toast data to component\n   * returns the active toast, or in case preventDuplicates is enabled the original/non-duplicate active toast.\n   */\n  private _buildNotification(\n    toastType: string,\n    message: string | undefined,\n    title: string | undefined,\n    config: GlobalConfig,\n  ): ActiveToast<any> | null {\n    if (!config.toastComponent) {\n      throw new Error('toastComponent required');\n    }\n    // max opened and auto dismiss = true\n    // if timeout = 0 resetting it would result in setting this.hideTime = Date.now(). Hence, we only want to reset timeout if there is\n    // a timeout at all\n    const duplicate = this.findDuplicate(\n      title,\n      message,\n      this.toastrConfig.resetTimeoutOnDuplicate && config.timeOut > 0,\n      this.toastrConfig.countDuplicates,\n    );\n    if (\n      ((this.toastrConfig.includeTitleDuplicates && title) || message) &&\n      this.toastrConfig.preventDuplicates &&\n      duplicate !== null\n    ) {\n      return duplicate;\n    }\n\n    this.previousToastMessage = message;\n    let keepInactive = false;\n    if (this.toastrConfig.maxOpened && this.currentlyActive >= this.toastrConfig.maxOpened) {\n      keepInactive = true;\n      if (this.toastrConfig.autoDismiss) {\n        this.clear(this.toasts[0].toastId);\n      }\n    }\n\n    const overlayRef = this.overlay.create(config.positionClass, this.overlayContainer);\n    this.index = this.index + 1;\n    let sanitizedMessage: string | undefined | null = message;\n    if (message && config.enableHtml) {\n      sanitizedMessage = this.sanitizer.sanitize(SecurityContext.HTML, message);\n    }\n\n    const toastRef = new ToastRef(overlayRef);\n    const toastPackage = new ToastPackage(\n      this.index,\n      config,\n      sanitizedMessage,\n      title,\n      toastType,\n      toastRef,\n    );\n\n    /** New injector that contains an instance of `ToastPackage`. */\n    const providers = [{provide: ToastPackage, useValue: toastPackage}];\n    const toastInjector = Injector.create({providers, parent: this._injector});\n\n    const component = new ComponentPortal(config.toastComponent, toastInjector);\n    const portal = overlayRef.attach(component, config.newestOnTop);\n    toastRef.componentInstance = portal.instance;\n    const ins: ActiveToast<any> = {\n      toastId: this.index,\n      title: title || '',\n      message: message || '',\n      toastRef,\n      onShown: toastRef.afterActivate(),\n      onHidden: toastRef.afterClosed(),\n      onTap: toastPackage.onTap(),\n      onAction: toastPackage.onAction(),\n      portal,\n    };\n\n    if (!keepInactive) {\n      this.currentlyActive = this.currentlyActive + 1;\n      setTimeout(() => {\n        ins.toastRef.activate();\n      });\n    }\n\n    this.toasts.push(ins);\n    return ins;\n  }\n}\n","import {\n  animate,\n  state,\n  style,\n  transition,\n  trigger\n} from '@angular/animations';\nimport {\n  Component,\n  HostBinding,\n  HostListener,\n  NgZone,\n  OnDestroy,\n} from '@angular/core';\nimport { NgIf } from '@angular/common';\nimport { Subscription } from 'rxjs';\nimport { IndividualConfig, ToastPackage } from './toastr-config';\nimport { ToastrService } from './toastr.service';\n\n@Component({\n  selector: '[toast-component]',\n  template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" type=\"button\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width + '%'\"></div>\n  </div>\n  `,\n  animations: [\n    trigger('flyInOut', [\n      state('inactive', style({ opacity: 0 })),\n      state('active', style({ opacity: 1 })),\n      state('removed', style({ opacity: 0 })),\n      transition('inactive => active', animate('{{ easeTime }}ms {{ easing }}')),\n      transition('active => removed', animate('{{ easeTime }}ms {{ easing }}')),\n    ]),\n  ],\n  preserveWhitespaces: false,\n  standalone: true,\n  imports: [NgIf],\n})\nexport class Toast<ConfigPayload = any> implements OnDestroy {\n  message?: string | null;\n  title?: string;\n  options: IndividualConfig<ConfigPayload>;\n  duplicatesCount!: number;\n  originalTimeout: number;\n  /** width of progress bar */\n  width = -1;\n  /** a combination of toast type and options.toastClass */\n  @HostBinding('class') toastClasses = '';\n  /** controls animation */\n  @HostBinding('@flyInOut') state!: {\n    value: 'inactive' | 'active' | 'removed';\n    params: { easeTime: number | string; easing: string };\n  };\n\n  /** hides component when waiting to be displayed */\n  @HostBinding('style.display')\n  get displayStyle(): string | undefined {\n    if (this.state.value === 'inactive') {\n      return 'none';\n    }\n\n    return;\n  }\n\n  private timeout: any;\n  private intervalId: any;\n  private hideTime!: number;\n  private sub: Subscription;\n  private sub1: Subscription;\n  private sub2: Subscription;\n  private sub3: Subscription;\n\n  constructor(\n    protected toastrService: ToastrService,\n    public toastPackage: ToastPackage,\n    protected ngZone?: NgZone,\n  ) {\n    this.message = toastPackage.message;\n    this.title = toastPackage.title;\n    this.options = toastPackage.config;\n    this.originalTimeout = toastPackage.config.timeOut;\n    this.toastClasses = `${toastPackage.toastType} ${toastPackage.config.toastClass}`;\n    this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n      this.activateToast();\n    });\n    this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n      this.remove();\n    });\n    this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\n      this.resetTimeout();\n    });\n    this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(count => {\n      this.duplicatesCount = count;\n    });\n    this.state = {\n      value: 'inactive',\n      params: {\n        easeTime: this.toastPackage.config.easeTime,\n        easing: 'ease-in',\n      },\n    };\n  }\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n    this.sub1.unsubscribe();\n    this.sub2.unsubscribe();\n    this.sub3.unsubscribe();\n    clearInterval(this.intervalId);\n    clearTimeout(this.timeout);\n  }\n  /**\n   * activates toast and sets timeout\n   */\n  activateToast() {\n    this.state = { ...this.state, value: 'active' };\n    if (\n      !(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') &&\n      this.options.timeOut\n    ) {\n      this.outsideTimeout(() => this.remove(), this.options.timeOut);\n      this.hideTime = new Date().getTime() + this.options.timeOut;\n      if (this.options.progressBar) {\n        this.outsideInterval(() => this.updateProgress(), 10);\n      }\n    }\n  }\n  /**\n   * updates progress bar width\n   */\n  updateProgress() {\n    if (this.width === 0 || this.width === 100 || !this.options.timeOut) {\n      return;\n    }\n    const now = new Date().getTime();\n    const remaining = this.hideTime - now;\n    this.width = (remaining / this.options.timeOut) * 100;\n    if (this.options.progressAnimation === 'increasing') {\n      this.width = 100 - this.width;\n    }\n    if (this.width <= 0) {\n      this.width = 0;\n    }\n    if (this.width >= 100) {\n      this.width = 100;\n    }\n  }\n\n  resetTimeout() {\n    clearTimeout(this.timeout);\n    clearInterval(this.intervalId);\n    this.state = { ...this.state, value: 'active' };\n\n    this.outsideTimeout(() => this.remove(), this.originalTimeout);\n    this.options.timeOut = this.originalTimeout;\n    this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n    this.width = -1;\n    if (this.options.progressBar) {\n      this.outsideInterval(() => this.updateProgress(), 10);\n    }\n  }\n\n  /**\n   * tells toastrService to remove this toast after animation time\n   */\n  remove() {\n    if (this.state.value === 'removed') {\n      return;\n    }\n    clearTimeout(this.timeout);\n    this.state = { ...this.state, value: 'removed' };\n    this.outsideTimeout(\n      () => this.toastrService.remove(this.toastPackage.toastId),\n      +this.toastPackage.config.easeTime\n    );\n  }\n  @HostListener('click')\n  tapToast() {\n    if (this.state.value === 'removed') {\n      return;\n    }\n    this.toastPackage.triggerTap();\n    if (this.options.tapToDismiss) {\n      this.remove();\n    }\n  }\n  @HostListener('mouseenter')\n  stickAround() {\n    if (this.state.value === 'removed') {\n      return;\n    }\n\n    if (this.options.disableTimeOut !== 'extendedTimeOut') {\n      clearTimeout(this.timeout);\n      this.options.timeOut = 0;\n      this.hideTime = 0;\n\n      // disable progressBar\n      clearInterval(this.intervalId);\n      this.width = 0;\n    }\n  }\n  @HostListener('mouseleave')\n  delayedHideToast() {\n    if (\n      (this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut') ||\n      this.options.extendedTimeOut === 0 ||\n      this.state.value === 'removed'\n    ) {\n      return;\n    }\n    this.outsideTimeout(() => this.remove(), this.options.extendedTimeOut);\n    this.options.timeOut = this.options.extendedTimeOut;\n    this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n    this.width = -1;\n    if (this.options.progressBar) {\n      this.outsideInterval(() => this.updateProgress(), 10);\n    }\n  }\n\n  outsideTimeout(func: () => any, timeout: number) {\n    if (this.ngZone) {\n      this.ngZone.runOutsideAngular(\n        () =>\n          (this.timeout = setTimeout(\n            () => this.runInsideAngular(func),\n            timeout\n          ))\n      );\n    } else {\n      this.timeout = setTimeout(() => func(), timeout);\n    }\n  }\n\n  outsideInterval(func: () => any, timeout: number) {\n    if (this.ngZone) {\n      this.ngZone.runOutsideAngular(\n        () =>\n          (this.intervalId = setInterval(\n            () => this.runInsideAngular(func),\n            timeout\n          ))\n      );\n    } else {\n      this.intervalId = setInterval(() => func(), timeout);\n    }\n  }\n\n  private runInsideAngular(func: () => any) {\n    if (this.ngZone) {\n      this.ngZone.run(() => func());\n    } else {\n      func();\n    }\n  }\n}\n","import { DefaultNoComponentGlobalConfig, GlobalConfig, TOAST_CONFIG } from './toastr-config';\nimport { EnvironmentProviders, makeEnvironmentProviders, Provider } from '@angular/core';\nimport { Toast } from './toast.component';\n\nexport const DefaultGlobalConfig: GlobalConfig = {\n  ...DefaultNoComponentGlobalConfig,\n  toastComponent: Toast,\n};\n\n/**\n * @description\n * Provides the `TOAST_CONFIG` token with the given config.\n *\n * @param config The config to configure toastr.\n * @returns The environment providers.\n *\n * @example\n * ```ts\n * import { provideToastr } from 'ngx-toastr';\n *\n * bootstrap(AppComponent, {\n *   providers: [\n *     provideToastr({\n *       timeOut: 2000,\n *       positionClass: 'toast-top-right',\n *     }),\n *   ],\n * })\n */\nexport const provideToastr = (config: Partial<GlobalConfig> = {}): EnvironmentProviders => {\n  const providers: Provider[] = [\n    {\n      provide: TOAST_CONFIG,\n      useValue: {\n        default: DefaultGlobalConfig,\n        config,\n      }\n    }\n  ];\n\n  return makeEnvironmentProviders(providers);\n};\n","import { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { Toast } from './toast.component';\nimport { DefaultNoComponentGlobalConfig, GlobalConfig, TOAST_CONFIG } from './toastr-config';\nimport { provideToastr } from './toast.provider';\n\n@NgModule({\n  imports: [Toast],\n  exports: [Toast],\n})\nexport class ToastrModule {\n  static forRoot(config: Partial<GlobalConfig> = {}): ModuleWithProviders<ToastrModule> {\n    return {\n      ngModule: ToastrModule,\n      providers: [provideToastr(config)],\n    };\n  }\n}\n\n@NgModule({})\nexport class ToastrComponentlessModule {\n  static forRoot(config: Partial<GlobalConfig> = {}): ModuleWithProviders<ToastrModule> {\n    return {\n      ngModule: ToastrModule,\n      providers: [\n        {\n          provide: TOAST_CONFIG,\n          useValue: {\n            default: DefaultNoComponentGlobalConfig,\n            config,\n          },\n        },\n      ],\n    };\n  }\n}\n","import { NgIf } from '@angular/common';\nimport { ModuleWithProviders } from '@angular/core';\nimport {\n  ApplicationRef,\n  Component,\n  HostBinding,\n  HostListener,\n  NgModule,\n  OnDestroy,\n} from '@angular/core';\n\nimport { Subscription } from 'rxjs';\n\nimport {\n  DefaultNoComponentGlobalConfig,\n  GlobalConfig,\n  IndividualConfig,\n  ToastPackage,\n  TOAST_CONFIG,\n} from './toastr-config';\nimport { ToastrService } from './toastr.service';\n\n@Component({\n  selector: '[toast-component]',\n  template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" type=\"button\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width + '%'\"></div>\n  </div>\n  `,\n  standalone: true,\n  imports: [NgIf]\n})\nexport class ToastNoAnimation implements OnDestroy {\n  message?: string | null;\n  title?: string;\n  options: IndividualConfig;\n  duplicatesCount!: number;\n  originalTimeout: number;\n  /** width of progress bar */\n  width = -1;\n  /** a combination of toast type and options.toastClass */\n  @HostBinding('class') toastClasses = '';\n\n  /** hides component when waiting to be displayed */\n  @HostBinding('style.display')\n  get displayStyle() {\n    if (this.state === 'inactive') {\n      return 'none';\n    }\n\n    return null;\n  }\n\n  /** controls animation */\n  state = 'inactive';\n  private timeout: any;\n  private intervalId: any;\n  private hideTime!: number;\n  private sub: Subscription;\n  private sub1: Subscription;\n  private sub2: Subscription;\n  private sub3: Subscription;\n\n  constructor(\n    protected toastrService: ToastrService,\n    public toastPackage: ToastPackage,\n    protected appRef: ApplicationRef,\n  ) {\n    this.message = toastPackage.message;\n    this.title = toastPackage.title;\n    this.options = toastPackage.config;\n    this.originalTimeout = toastPackage.config.timeOut;\n    this.toastClasses = `${toastPackage.toastType} ${\n      toastPackage.config.toastClass\n    }`;\n    this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n      this.activateToast();\n    });\n    this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n      this.remove();\n    });\n    this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\n      this.resetTimeout();\n    });\n    this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(count => {\n      this.duplicatesCount = count;\n    });\n  }\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n    this.sub1.unsubscribe();\n    this.sub2.unsubscribe();\n    this.sub3.unsubscribe();\n    clearInterval(this.intervalId);\n    clearTimeout(this.timeout);\n  }\n  /**\n   * activates toast and sets timeout\n   */\n  activateToast() {\n    this.state = 'active';\n    if (!(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') && this.options.timeOut) {\n      this.timeout = setTimeout(() => {\n        this.remove();\n      }, this.options.timeOut);\n      this.hideTime = new Date().getTime() + this.options.timeOut;\n      if (this.options.progressBar) {\n        this.intervalId = setInterval(() => this.updateProgress(), 10);\n      }\n    }\n    if (this.options.onActivateTick) {\n      this.appRef.tick();\n    }\n  }\n  /**\n   * updates progress bar width\n   */\n  updateProgress() {\n    if (this.width === 0 || this.width === 100 || !this.options.timeOut) {\n      return;\n    }\n    const now = new Date().getTime();\n    const remaining = this.hideTime - now;\n    this.width = (remaining / this.options.timeOut) * 100;\n    if (this.options.progressAnimation === 'increasing') {\n      this.width = 100 - this.width;\n    }\n    if (this.width <= 0) {\n      this.width = 0;\n    }\n    if (this.width >= 100) {\n      this.width = 100;\n    }\n  }\n\n  resetTimeout() {\n    clearTimeout(this.timeout);\n    clearInterval(this.intervalId);\n    this.state = 'active';\n\n    this.options.timeOut = this.originalTimeout;\n    this.timeout = setTimeout(() => this.remove(), this.originalTimeout);\n    this.hideTime = new Date().getTime() + (this.originalTimeout || 0);\n    this.width = -1;\n    if (this.options.progressBar) {\n      this.intervalId = setInterval(() => this.updateProgress(), 10);\n    }\n  }\n\n  /**\n   * tells toastrService to remove this toast after animation time\n   */\n  remove() {\n    if (this.state === 'removed') {\n      return;\n    }\n    clearTimeout(this.timeout);\n    this.state = 'removed';\n    this.timeout = setTimeout(() =>\n      this.toastrService.remove(this.toastPackage.toastId),\n    );\n  }\n  @HostListener('click')\n  tapToast() {\n    if (this.state === 'removed') {\n      return;\n    }\n    this.toastPackage.triggerTap();\n    if (this.options.tapToDismiss) {\n      this.remove();\n    }\n  }\n  @HostListener('mouseenter')\n  stickAround() {\n    if (this.state === 'removed') {\n      return;\n    }\n    clearTimeout(this.timeout);\n    this.options.timeOut = 0;\n    this.hideTime = 0;\n\n    // disable progressBar\n    clearInterval(this.intervalId);\n    this.width = 0;\n  }\n  @HostListener('mouseleave')\n  delayedHideToast() {\n    if (\n      (this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut') ||\n      this.options.extendedTimeOut === 0 ||\n      this.state === 'removed'\n    ) {\n      return;\n    }\n    this.timeout = setTimeout(\n      () => this.remove(),\n      this.options.extendedTimeOut,\n    );\n    this.options.timeOut = this.options.extendedTimeOut;\n    this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n    this.width = -1;\n    if (this.options.progressBar) {\n      this.intervalId = setInterval(() => this.updateProgress(), 10);\n    }\n  }\n}\n\nexport const DefaultNoAnimationsGlobalConfig: GlobalConfig = {\n  ...DefaultNoComponentGlobalConfig,\n  toastComponent: ToastNoAnimation,\n};\n\n@NgModule({\n  imports: [ToastNoAnimation],\n  exports: [ToastNoAnimation],\n})\nexport class ToastNoAnimationModule {\n  static forRoot(config: Partial<GlobalConfig> = {}): ModuleWithProviders<ToastNoAnimationModule> {\n    return {\n      ngModule: ToastNoAnimationModule,\n      providers: [\n        {\n          provide: TOAST_CONFIG,\n          useValue: {\n            default: DefaultNoAnimationsGlobalConfig,\n            config,\n          },\n        },\n      ],\n    };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}