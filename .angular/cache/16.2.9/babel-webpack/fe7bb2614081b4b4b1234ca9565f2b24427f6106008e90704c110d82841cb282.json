{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, Inject, computed, isDevMode, inject, makeEnvironmentProviders, ENVIRONMENT_INITIALIZER, NgModule, Optional } from '@angular/core';\nimport { BehaviorSubject, Observable, Subject, queueScheduler } from 'rxjs';\nimport { observeOn, withLatestFrom, scan, pluck, map, distinctUntilChanged } from 'rxjs/operators';\nimport { toSignal } from '@angular/core/rxjs-interop';\nconst REGISTERED_ACTION_TYPES = {};\nfunction resetRegisteredActionTypes() {\n  for (const key of Object.keys(REGISTERED_ACTION_TYPES)) {\n    delete REGISTERED_ACTION_TYPES[key];\n  }\n}\n\n/**\n * @description\n * Creates a configured `Creator` function that, when called, returns an object in the shape of the `Action` interface.\n *\n * Action creators reduce the explicitness of class-based action creators.\n *\n * @param type Describes the action that will be dispatched\n * @param config Additional metadata needed for the handling of the action.  See {@link createAction#usage-notes Usage Notes}.\n *\n * @usageNotes\n *\n * **Declaring an action creator**\n *\n * Without additional metadata:\n * ```ts\n * export const increment = createAction('[Counter] Increment');\n * ```\n * With additional metadata:\n * ```ts\n * export const loginSuccess = createAction(\n *   '[Auth/API] Login Success',\n *   props<{ user: User }>()\n * );\n * ```\n * With a function:\n * ```ts\n * export const loginSuccess = createAction(\n *   '[Auth/API] Login Success',\n *   (response: Response) => response.user\n * );\n * ```\n *\n * **Dispatching an action**\n *\n * Without additional metadata:\n * ```ts\n * store.dispatch(increment());\n * ```\n * With additional metadata:\n * ```ts\n * store.dispatch(loginSuccess({ user: newUser }));\n * ```\n *\n * **Referencing an action in a reducer**\n *\n * Using a switch statement:\n * ```ts\n * switch (action.type) {\n *   // ...\n *   case AuthApiActions.loginSuccess.type: {\n *     return {\n *       ...state,\n *       user: action.user\n *     };\n *   }\n * }\n * ```\n * Using a reducer creator:\n * ```ts\n * on(AuthApiActions.loginSuccess, (state, { user }) => ({ ...state, user }))\n * ```\n *\n *  **Referencing an action in an effect**\n * ```ts\n * effectName$ = createEffect(\n *   () => this.actions$.pipe(\n *     ofType(AuthApiActions.loginSuccess),\n *     // ...\n *   )\n * );\n * ```\n */\nfunction createAction(type, config) {\n  REGISTERED_ACTION_TYPES[type] = (REGISTERED_ACTION_TYPES[type] || 0) + 1;\n  if (typeof config === 'function') {\n    return defineType(type, (...args) => ({\n      ...config(...args),\n      type\n    }));\n  }\n  const as = config ? config._as : 'empty';\n  switch (as) {\n    case 'empty':\n      return defineType(type, () => ({\n        type\n      }));\n    case 'props':\n      return defineType(type, props => ({\n        ...props,\n        type\n      }));\n    default:\n      throw new Error('Unexpected config.');\n  }\n}\nfunction props() {\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  return {\n    _as: 'props',\n    _p: undefined\n  };\n}\nfunction union(creators) {\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  return undefined;\n}\nfunction defineType(type, creator) {\n  return Object.defineProperty(creator, 'type', {\n    value: type,\n    writable: false\n  });\n}\nfunction capitalize(text) {\n  return text.charAt(0).toUpperCase() + text.substring(1);\n}\nfunction uncapitalize(text) {\n  return text.charAt(0).toLowerCase() + text.substring(1);\n}\n\n/**\n * @description\n * A function that creates a group of action creators with the same source.\n *\n * @param config An object that contains a source and dictionary of events.\n * An event is a key-value pair of an event name and event props.\n * @returns A dictionary of action creators.\n * The name of each action creator is created by camel casing the event name.\n * The type of each action is created using the \"[Source] Event Name\" pattern.\n *\n * @usageNotes\n *\n * ```ts\n * const authApiActions = createActionGroup({\n *   source: 'Auth API',\n *   events: {\n *     // defining events with payload using the `props` function\n *     'Login Success': props<{ userId: number; token: string }>(),\n *     'Login Failure': props<{ error: string }>(),\n *\n *     // defining an event without payload using the `emptyProps` function\n *     'Logout Success': emptyProps(),\n *\n *     // defining an event with payload using the props factory\n *     'Logout Failure': (error: Error) => ({ error }),\n *   },\n * });\n *\n * // action type: \"[Auth API] Login Success\"\n * authApiActions.loginSuccess({ userId: 10, token: 'ngrx' });\n *\n * // action type: \"[Auth API] Login Failure\"\n * authApiActions.loginFailure({ error: 'Login Failure!' });\n *\n * // action type: \"[Auth API] Logout Success\"\n * authApiActions.logoutSuccess();\n *\n * // action type: \"[Auth API] Logout Failure\";\n * authApiActions.logoutFailure(new Error('Logout Failure!'));\n * ```\n */\nfunction createActionGroup(config) {\n  const {\n    source,\n    events\n  } = config;\n  return Object.keys(events).reduce((actionGroup, eventName) => ({\n    ...actionGroup,\n    [toActionName(eventName)]: createAction(toActionType(source, eventName), events[eventName])\n  }), {});\n}\nfunction emptyProps() {\n  return props();\n}\nfunction toActionName(eventName) {\n  return eventName.trim().split(' ').map((word, i) => i === 0 ? uncapitalize(word) : capitalize(word)).join('');\n}\nfunction toActionType(source, eventName) {\n  return `[${source}] ${eventName}`;\n}\nconst INIT = '@ngrx/store/init';\nclass ActionsSubject extends BehaviorSubject {\n  constructor() {\n    super({\n      type: INIT\n    });\n  }\n  next(action) {\n    if (typeof action === 'function') {\n      throw new TypeError(`\n        Dispatch expected an object, instead it received a function.\n        If you're using the createAction function, make sure to invoke the function\n        before dispatching the action. For example, someAction should be someAction().`);\n    } else if (typeof action === 'undefined') {\n      throw new TypeError(`Actions must be objects`);\n    } else if (typeof action.type === 'undefined') {\n      throw new TypeError(`Actions must have a type property`);\n    }\n    super.next(action);\n  }\n  complete() {\n    /* noop */\n  }\n  ngOnDestroy() {\n    super.complete();\n  }\n  /** @nocollapse */\n  static {\n    this.ɵfac = function ActionsSubject_Factory(t) {\n      return new (t || ActionsSubject)();\n    };\n  }\n  /** @nocollapse */\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: ActionsSubject,\n      factory: ActionsSubject.ɵfac\n    });\n  }\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ActionsSubject, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\nconst ACTIONS_SUBJECT_PROVIDERS = [ActionsSubject];\nconst _ROOT_STORE_GUARD = new InjectionToken('@ngrx/store Internal Root Guard');\nconst _INITIAL_STATE = new InjectionToken('@ngrx/store Internal Initial State');\nconst INITIAL_STATE = new InjectionToken('@ngrx/store Initial State');\nconst REDUCER_FACTORY = new InjectionToken('@ngrx/store Reducer Factory');\nconst _REDUCER_FACTORY = new InjectionToken('@ngrx/store Internal Reducer Factory Provider');\nconst INITIAL_REDUCERS = new InjectionToken('@ngrx/store Initial Reducers');\nconst _INITIAL_REDUCERS = new InjectionToken('@ngrx/store Internal Initial Reducers');\nconst STORE_FEATURES = new InjectionToken('@ngrx/store Store Features');\nconst _STORE_REDUCERS = new InjectionToken('@ngrx/store Internal Store Reducers');\nconst _FEATURE_REDUCERS = new InjectionToken('@ngrx/store Internal Feature Reducers');\nconst _FEATURE_CONFIGS = new InjectionToken('@ngrx/store Internal Feature Configs');\nconst _STORE_FEATURES = new InjectionToken('@ngrx/store Internal Store Features');\nconst _FEATURE_REDUCERS_TOKEN = new InjectionToken('@ngrx/store Internal Feature Reducers Token');\nconst FEATURE_REDUCERS = new InjectionToken('@ngrx/store Feature Reducers');\n/**\n * User-defined meta reducers from StoreModule.forRoot()\n */\nconst USER_PROVIDED_META_REDUCERS = new InjectionToken('@ngrx/store User Provided Meta Reducers');\n/**\n * Meta reducers defined either internally by @ngrx/store or by library authors\n */\nconst META_REDUCERS = new InjectionToken('@ngrx/store Meta Reducers');\n/**\n * Concats the user provided meta reducers and the meta reducers provided on the multi\n * injection token\n */\nconst _RESOLVED_META_REDUCERS = new InjectionToken('@ngrx/store Internal Resolved Meta Reducers');\n/**\n * Runtime checks defined by the user via an InjectionToken\n * Defaults to `_USER_RUNTIME_CHECKS`\n */\nconst USER_RUNTIME_CHECKS = new InjectionToken('@ngrx/store User Runtime Checks Config');\n/**\n * Runtime checks defined by the user via forRoot()\n */\nconst _USER_RUNTIME_CHECKS = new InjectionToken('@ngrx/store Internal User Runtime Checks Config');\n/**\n * Runtime checks currently in use\n */\nconst ACTIVE_RUNTIME_CHECKS = new InjectionToken('@ngrx/store Internal Runtime Checks');\nconst _ACTION_TYPE_UNIQUENESS_CHECK = new InjectionToken('@ngrx/store Check if Action types are unique');\n/**\n * InjectionToken that registers the global Store.\n * Mainly used to provide a hook that can be injected\n * to ensure the root state is loaded before something\n * that depends on it.\n */\nconst ROOT_STORE_PROVIDER = new InjectionToken('@ngrx/store Root Store Provider');\n/**\n * InjectionToken that registers feature states.\n * Mainly used to provide a hook that can be injected\n * to ensure feature state is loaded before something\n * that depends on it.\n */\nconst FEATURE_STATE_PROVIDER = new InjectionToken('@ngrx/store Feature State Provider');\n\n/**\n * @description\n * Combines reducers for individual features into a single reducer.\n *\n * You can use this function to delegate handling of state transitions to multiple reducers, each acting on their\n * own sub-state within the root state.\n *\n * @param reducers An object mapping keys of the root state to their corresponding feature reducer.\n * @param initialState Provides a state value if the current state is `undefined`, as it is initially.\n * @returns A reducer function.\n *\n * @usageNotes\n *\n * **Example combining two feature reducers into one \"root\" reducer**\n *\n * ```ts\n * export const reducer = combineReducers({\n *   featureA: featureAReducer,\n *   featureB: featureBReducer\n * });\n * ```\n *\n * You can also override the initial states of the sub-features:\n * ```ts\n * export const reducer = combineReducers({\n *   featureA: featureAReducer,\n *   featureB: featureBReducer\n * }, {\n *   featureA: { counterA: 13 },\n *   featureB: { counterB: 37 }\n * });\n * ```\n */\nfunction combineReducers(reducers, initialState = {}) {\n  const reducerKeys = Object.keys(reducers);\n  const finalReducers = {};\n  for (let i = 0; i < reducerKeys.length; i++) {\n    const key = reducerKeys[i];\n    if (typeof reducers[key] === 'function') {\n      finalReducers[key] = reducers[key];\n    }\n  }\n  const finalReducerKeys = Object.keys(finalReducers);\n  return function combination(state, action) {\n    state = state === undefined ? initialState : state;\n    let hasChanged = false;\n    const nextState = {};\n    for (let i = 0; i < finalReducerKeys.length; i++) {\n      const key = finalReducerKeys[i];\n      const reducer = finalReducers[key];\n      const previousStateForKey = state[key];\n      const nextStateForKey = reducer(previousStateForKey, action);\n      nextState[key] = nextStateForKey;\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;\n    }\n    return hasChanged ? nextState : state;\n  };\n}\nfunction omit(object, keyToRemove) {\n  return Object.keys(object).filter(key => key !== keyToRemove).reduce((result, key) => Object.assign(result, {\n    [key]: object[key]\n  }), {});\n}\nfunction compose(...functions) {\n  return function (arg) {\n    if (functions.length === 0) {\n      return arg;\n    }\n    const last = functions[functions.length - 1];\n    const rest = functions.slice(0, -1);\n    return rest.reduceRight((composed, fn) => fn(composed), last(arg));\n  };\n}\nfunction createReducerFactory(reducerFactory, metaReducers) {\n  if (Array.isArray(metaReducers) && metaReducers.length > 0) {\n    reducerFactory = compose.apply(null, [...metaReducers, reducerFactory]);\n  }\n  return (reducers, initialState) => {\n    const reducer = reducerFactory(reducers);\n    return (state, action) => {\n      state = state === undefined ? initialState : state;\n      return reducer(state, action);\n    };\n  };\n}\nfunction createFeatureReducerFactory(metaReducers) {\n  const reducerFactory = Array.isArray(metaReducers) && metaReducers.length > 0 ? compose(...metaReducers) : r => r;\n  return (reducer, initialState) => {\n    reducer = reducerFactory(reducer);\n    return (state, action) => {\n      state = state === undefined ? initialState : state;\n      return reducer(state, action);\n    };\n  };\n}\nclass ReducerObservable extends Observable {}\nclass ReducerManagerDispatcher extends ActionsSubject {}\nconst UPDATE = '@ngrx/store/update-reducers';\nclass ReducerManager extends BehaviorSubject {\n  get currentReducers() {\n    return this.reducers;\n  }\n  constructor(dispatcher, initialState, reducers, reducerFactory) {\n    super(reducerFactory(reducers, initialState));\n    this.dispatcher = dispatcher;\n    this.initialState = initialState;\n    this.reducers = reducers;\n    this.reducerFactory = reducerFactory;\n  }\n  addFeature(feature) {\n    this.addFeatures([feature]);\n  }\n  addFeatures(features) {\n    const reducers = features.reduce((reducerDict, {\n      reducers,\n      reducerFactory,\n      metaReducers,\n      initialState,\n      key\n    }) => {\n      const reducer = typeof reducers === 'function' ? createFeatureReducerFactory(metaReducers)(reducers, initialState) : createReducerFactory(reducerFactory, metaReducers)(reducers, initialState);\n      reducerDict[key] = reducer;\n      return reducerDict;\n    }, {});\n    this.addReducers(reducers);\n  }\n  removeFeature(feature) {\n    this.removeFeatures([feature]);\n  }\n  removeFeatures(features) {\n    this.removeReducers(features.map(p => p.key));\n  }\n  addReducer(key, reducer) {\n    this.addReducers({\n      [key]: reducer\n    });\n  }\n  addReducers(reducers) {\n    this.reducers = {\n      ...this.reducers,\n      ...reducers\n    };\n    this.updateReducers(Object.keys(reducers));\n  }\n  removeReducer(featureKey) {\n    this.removeReducers([featureKey]);\n  }\n  removeReducers(featureKeys) {\n    featureKeys.forEach(key => {\n      this.reducers = omit(this.reducers, key) /*TODO(#823)*/;\n    });\n\n    this.updateReducers(featureKeys);\n  }\n  updateReducers(featureKeys) {\n    this.next(this.reducerFactory(this.reducers, this.initialState));\n    this.dispatcher.next({\n      type: UPDATE,\n      features: featureKeys\n    });\n  }\n  ngOnDestroy() {\n    this.complete();\n  }\n  /** @nocollapse */\n  static {\n    this.ɵfac = function ReducerManager_Factory(t) {\n      return new (t || ReducerManager)(i0.ɵɵinject(ReducerManagerDispatcher), i0.ɵɵinject(INITIAL_STATE), i0.ɵɵinject(INITIAL_REDUCERS), i0.ɵɵinject(REDUCER_FACTORY));\n    };\n  }\n  /** @nocollapse */\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: ReducerManager,\n      factory: ReducerManager.ɵfac\n    });\n  }\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ReducerManager, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ReducerManagerDispatcher\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [INITIAL_STATE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [INITIAL_REDUCERS]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [REDUCER_FACTORY]\n      }]\n    }];\n  }, null);\n})();\nconst REDUCER_MANAGER_PROVIDERS = [ReducerManager, {\n  provide: ReducerObservable,\n  useExisting: ReducerManager\n}, {\n  provide: ReducerManagerDispatcher,\n  useExisting: ActionsSubject\n}];\nclass ScannedActionsSubject extends Subject {\n  ngOnDestroy() {\n    this.complete();\n  }\n  /** @nocollapse */\n  static {\n    this.ɵfac = /* @__PURE__ */function () {\n      let ɵScannedActionsSubject_BaseFactory;\n      return function ScannedActionsSubject_Factory(t) {\n        return (ɵScannedActionsSubject_BaseFactory || (ɵScannedActionsSubject_BaseFactory = i0.ɵɵgetInheritedFactory(ScannedActionsSubject)))(t || ScannedActionsSubject);\n      };\n    }();\n  }\n  /** @nocollapse */\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: ScannedActionsSubject,\n      factory: ScannedActionsSubject.ɵfac\n    });\n  }\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ScannedActionsSubject, [{\n    type: Injectable\n  }], null, null);\n})();\nconst SCANNED_ACTIONS_SUBJECT_PROVIDERS = [ScannedActionsSubject];\nclass StateObservable extends Observable {}\nclass State extends BehaviorSubject {\n  static {\n    this.INIT = INIT;\n  }\n  constructor(actions$, reducer$, scannedActions, initialState) {\n    super(initialState);\n    const actionsOnQueue$ = actions$.pipe(observeOn(queueScheduler));\n    const withLatestReducer$ = actionsOnQueue$.pipe(withLatestFrom(reducer$));\n    const seed = {\n      state: initialState\n    };\n    const stateAndAction$ = withLatestReducer$.pipe(scan(reduceState, seed));\n    this.stateSubscription = stateAndAction$.subscribe(({\n      state,\n      action\n    }) => {\n      this.next(state);\n      scannedActions.next(action);\n    });\n    this.state = toSignal(this, {\n      manualCleanup: true,\n      requireSync: true\n    });\n  }\n  ngOnDestroy() {\n    this.stateSubscription.unsubscribe();\n    this.complete();\n  }\n  /** @nocollapse */\n  static {\n    this.ɵfac = function State_Factory(t) {\n      return new (t || State)(i0.ɵɵinject(ActionsSubject), i0.ɵɵinject(ReducerObservable), i0.ɵɵinject(ScannedActionsSubject), i0.ɵɵinject(INITIAL_STATE));\n    };\n  }\n  /** @nocollapse */\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: State,\n      factory: State.ɵfac\n    });\n  }\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(State, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ActionsSubject\n    }, {\n      type: ReducerObservable\n    }, {\n      type: ScannedActionsSubject\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [INITIAL_STATE]\n      }]\n    }];\n  }, null);\n})();\nfunction reduceState(stateActionPair = {\n  state: undefined\n}, [action, reducer]) {\n  const {\n    state\n  } = stateActionPair;\n  return {\n    state: reducer(state, action),\n    action\n  };\n}\nconst STATE_PROVIDERS = [State, {\n  provide: StateObservable,\n  useExisting: State\n}];\n\n// disabled because we have lowercase generics for `select`\nclass Store extends Observable {\n  constructor(state$, actionsObserver, reducerManager) {\n    super();\n    this.actionsObserver = actionsObserver;\n    this.reducerManager = reducerManager;\n    this.source = state$;\n    this.state = state$.state;\n  }\n  select(pathOrMapFn, ...paths) {\n    return select.call(null, pathOrMapFn, ...paths)(this);\n  }\n  /**\n   * Returns a signal of the provided selector.\n   *\n   * @param selector selector function\n   * @param options select signal options\n   */\n  selectSignal(selector, options) {\n    return computed(() => selector(this.state()), {\n      equal: options?.equal || ((previous, current) => previous === current)\n    });\n  }\n  lift(operator) {\n    const store = new Store(this, this.actionsObserver, this.reducerManager);\n    store.operator = operator;\n    return store;\n  }\n  dispatch(action) {\n    this.actionsObserver.next(action);\n  }\n  next(action) {\n    this.actionsObserver.next(action);\n  }\n  error(err) {\n    this.actionsObserver.error(err);\n  }\n  complete() {\n    this.actionsObserver.complete();\n  }\n  addReducer(key, reducer) {\n    this.reducerManager.addReducer(key, reducer);\n  }\n  removeReducer(key) {\n    this.reducerManager.removeReducer(key);\n  }\n  /** @nocollapse */\n  static {\n    this.ɵfac = function Store_Factory(t) {\n      return new (t || Store)(i0.ɵɵinject(StateObservable), i0.ɵɵinject(ActionsSubject), i0.ɵɵinject(ReducerManager));\n    };\n  }\n  /** @nocollapse */\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: Store,\n      factory: Store.ɵfac\n    });\n  }\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Store, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: StateObservable\n    }, {\n      type: ActionsSubject\n    }, {\n      type: ReducerManager\n    }];\n  }, null);\n})();\nconst STORE_PROVIDERS = [Store];\nfunction select(pathOrMapFn, propsOrPath, ...paths) {\n  return function selectOperator(source$) {\n    let mapped$;\n    if (typeof pathOrMapFn === 'string') {\n      const pathSlices = [propsOrPath, ...paths].filter(Boolean);\n      mapped$ = source$.pipe(pluck(pathOrMapFn, ...pathSlices));\n    } else if (typeof pathOrMapFn === 'function') {\n      mapped$ = source$.pipe(map(source => pathOrMapFn(source, propsOrPath)));\n    } else {\n      throw new TypeError(`Unexpected type '${typeof pathOrMapFn}' in select operator,` + ` expected 'string' or 'function'`);\n    }\n    return mapped$.pipe(distinctUntilChanged());\n  };\n}\nconst RUNTIME_CHECK_URL = 'https://ngrx.io/guide/store/configuration/runtime-checks';\nfunction isUndefined(target) {\n  return target === undefined;\n}\nfunction isNull(target) {\n  return target === null;\n}\nfunction isArray(target) {\n  return Array.isArray(target);\n}\nfunction isString(target) {\n  return typeof target === 'string';\n}\nfunction isBoolean(target) {\n  return typeof target === 'boolean';\n}\nfunction isNumber(target) {\n  return typeof target === 'number';\n}\nfunction isObjectLike(target) {\n  return typeof target === 'object' && target !== null;\n}\nfunction isObject(target) {\n  return isObjectLike(target) && !isArray(target);\n}\nfunction isPlainObject(target) {\n  if (!isObject(target)) {\n    return false;\n  }\n  const targetPrototype = Object.getPrototypeOf(target);\n  return targetPrototype === Object.prototype || targetPrototype === null;\n}\nfunction isFunction(target) {\n  return typeof target === 'function';\n}\nfunction isComponent(target) {\n  return isFunction(target) && target.hasOwnProperty('ɵcmp');\n}\nfunction hasOwnProperty(target, propertyName) {\n  return Object.prototype.hasOwnProperty.call(target, propertyName);\n}\nlet _ngrxMockEnvironment = false;\nfunction setNgrxMockEnvironment(value) {\n  _ngrxMockEnvironment = value;\n}\nfunction isNgrxMockEnvironment() {\n  return _ngrxMockEnvironment;\n}\nfunction isEqualCheck(a, b) {\n  return a === b;\n}\nfunction isArgumentsChanged(args, lastArguments, comparator) {\n  for (let i = 0; i < args.length; i++) {\n    if (!comparator(args[i], lastArguments[i])) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction resultMemoize(projectionFn, isResultEqual) {\n  return defaultMemoize(projectionFn, isEqualCheck, isResultEqual);\n}\nfunction defaultMemoize(projectionFn, isArgumentsEqual = isEqualCheck, isResultEqual = isEqualCheck) {\n  let lastArguments = null;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, , , , ,\n  let lastResult = null;\n  let overrideResult;\n  function reset() {\n    lastArguments = null;\n    lastResult = null;\n  }\n  function setResult(result = undefined) {\n    overrideResult = {\n      result\n    };\n  }\n  function clearResult() {\n    overrideResult = undefined;\n  }\n  /* eslint-disable prefer-rest-params, prefer-spread */\n  // disabled because of the use of `arguments`\n  function memoized() {\n    if (overrideResult !== undefined) {\n      return overrideResult.result;\n    }\n    if (!lastArguments) {\n      lastResult = projectionFn.apply(null, arguments);\n      lastArguments = arguments;\n      return lastResult;\n    }\n    if (!isArgumentsChanged(arguments, lastArguments, isArgumentsEqual)) {\n      return lastResult;\n    }\n    const newResult = projectionFn.apply(null, arguments);\n    lastArguments = arguments;\n    if (isResultEqual(lastResult, newResult)) {\n      return lastResult;\n    }\n    lastResult = newResult;\n    return newResult;\n  }\n  return {\n    memoized,\n    reset,\n    setResult,\n    clearResult\n  };\n}\nfunction createSelector(...input) {\n  return createSelectorFactory(defaultMemoize)(...input);\n}\nfunction defaultStateFn(state, selectors, props, memoizedProjector) {\n  if (props === undefined) {\n    const args = selectors.map(fn => fn(state));\n    return memoizedProjector.memoized.apply(null, args);\n  }\n  const args = selectors.map(fn => fn(state, props));\n  return memoizedProjector.memoized.apply(null, [...args, props]);\n}\n/**\n *\n * @param memoize The function used to memoize selectors\n * @param options Config Object that may include a `stateFn` function defining how to return the selector's value, given the entire `Store`'s state, parent `Selector`s, `Props`, and a `MemoizedProjection`\n *\n * @usageNotes\n *\n * **Creating a Selector Factory Where Array Order Does Not Matter**\n *\n * ```ts\n * function removeMatch(arr: string[], target: string): string[] {\n *   const matchIndex = arr.indexOf(target);\n *   return [...arr.slice(0, matchIndex), ...arr.slice(matchIndex + 1)];\n * }\n *\n * function orderDoesNotMatterComparer(a: any, b: any): boolean {\n *   if (!Array.isArray(a) || !Array.isArray(b)) {\n *     return a === b;\n *   }\n *   if (a.length !== b.length) {\n *     return false;\n *   }\n *   let tempB = [...b];\n *   function reduceToDetermineIfArraysContainSameContents(\n *     previousCallResult: boolean,\n *     arrayMember: any\n *   ): boolean {\n *     if (previousCallResult === false) {\n *       return false;\n *     }\n *     if (tempB.includes(arrayMember)) {\n *       tempB = removeMatch(tempB, arrayMember);\n *       return true;\n *     }\n *     return false;\n *   }\n *   return a.reduce(reduceToDetermineIfArraysContainSameContents, true);\n * }\n *\n * export const createOrderDoesNotMatterSelector = createSelectorFactory(\n *   (projectionFun) => defaultMemoize(\n *     projectionFun,\n *     orderDoesNotMatterComparer,\n *     orderDoesNotMatterComparer\n *   )\n * );\n * ```\n *\n * **Creating an Alternative Memoization Strategy**\n *\n * ```ts\n * function serialize(x: any): string {\n *   return JSON.stringify(x);\n * }\n *\n * export const createFullHistorySelector = createSelectorFactory(\n *  (projectionFunction) => {\n *    const cache = {};\n *\n *    function memoized() {\n *      const serializedArguments = serialize(...arguments);\n *       if (cache[serializedArguments] != null) {\n *         cache[serializedArguments] = projectionFunction.apply(null, arguments);\n *       }\n *       return cache[serializedArguments];\n *     }\n *     return {\n *       memoized,\n *       reset: () => {},\n *       setResult: () => {},\n *       clearResult: () => {},\n *     };\n *   }\n * );\n * ```\n */\nfunction createSelectorFactory(memoize, options = {\n  stateFn: defaultStateFn\n}) {\n  return function (...input) {\n    let args = input;\n    if (Array.isArray(args[0])) {\n      const [head, ...tail] = args;\n      args = [...head, ...tail];\n    } else if (args.length === 1 && isSelectorsDictionary(args[0])) {\n      args = extractArgsFromSelectorsDictionary(args[0]);\n    }\n    const selectors = args.slice(0, args.length - 1);\n    const projector = args[args.length - 1];\n    const memoizedSelectors = selectors.filter(selector => selector.release && typeof selector.release === 'function');\n    const memoizedProjector = memoize(function (...selectors) {\n      return projector.apply(null, selectors);\n    });\n    const memoizedState = defaultMemoize(function (state, props) {\n      return options.stateFn.apply(null, [state, selectors, props, memoizedProjector]);\n    });\n    function release() {\n      memoizedState.reset();\n      memoizedProjector.reset();\n      memoizedSelectors.forEach(selector => selector.release());\n    }\n    return Object.assign(memoizedState.memoized, {\n      release,\n      projector: memoizedProjector.memoized,\n      setResult: memoizedState.setResult,\n      clearResult: memoizedState.clearResult\n    });\n  };\n}\nfunction createFeatureSelector(featureName) {\n  return createSelector(state => {\n    const featureState = state[featureName];\n    if (!isNgrxMockEnvironment() && isDevMode() && !(featureName in state)) {\n      console.warn(`@ngrx/store: The feature name \"${featureName}\" does ` + 'not exist in the state, therefore createFeatureSelector ' + 'cannot access it.  Be sure it is imported in a loaded module ' + `using StoreModule.forRoot('${featureName}', ...) or ` + `StoreModule.forFeature('${featureName}', ...).  If the default ` + 'state is intended to be undefined, as is the case with router ' + 'state, this development-only warning message can be ignored.');\n    }\n    return featureState;\n  }, featureState => featureState);\n}\nfunction isSelectorsDictionary(selectors) {\n  return !!selectors && typeof selectors === 'object' && Object.values(selectors).every(selector => typeof selector === 'function');\n}\nfunction extractArgsFromSelectorsDictionary(selectorsDictionary) {\n  const selectors = Object.values(selectorsDictionary);\n  const resultKeys = Object.keys(selectorsDictionary);\n  const projector = (...selectorResults) => resultKeys.reduce((result, key, index) => ({\n    ...result,\n    [key]: selectorResults[index]\n  }), {});\n  return [...selectors, projector];\n}\n\n/**\n * @description\n * A function that accepts a feature name and a feature reducer, and creates\n * a feature selector and a selector for each feature state property.\n * This function also provides the ability to add extra selectors to\n * the feature object.\n *\n * @param featureConfig An object that contains a feature name and a feature\n * reducer as required, and extra selectors factory as an optional argument.\n * @returns An object that contains a feature name, a feature reducer,\n * a feature selector, a selector for each feature state property, and extra\n * selectors.\n *\n * @usageNotes\n *\n * ```ts\n * interface ProductsState {\n *   products: Product[];\n *   selectedId: string | null;\n * }\n *\n * const initialState: ProductsState = {\n *   products: [],\n *   selectedId: null,\n * };\n *\n * const productsFeature = createFeature({\n *   name: 'products',\n *   reducer: createReducer(\n *     initialState,\n *     on(ProductsApiActions.loadSuccess(state, { products }) => ({\n *       ...state,\n *       products,\n *     }),\n *   ),\n * });\n *\n * const {\n *   name,\n *   reducer,\n *   // feature selector\n *   selectProductsState, // type: MemoizedSelector<Record<string, any>, ProductsState>\n *   // feature state properties selectors\n *   selectProducts, // type: MemoizedSelector<Record<string, any>, Product[]>\n *   selectSelectedId, // type: MemoizedSelector<Record<string, any>, string | null>\n * } = productsFeature;\n * ```\n *\n * **Creating Feature with Extra Selectors**\n *\n * ```ts\n * type CallState = 'init' | 'loading' | 'loaded' | { error: string };\n *\n * interface State extends EntityState<Product> {\n *   callState: CallState;\n * }\n *\n * const adapter = createEntityAdapter<Product>();\n * const initialState: State = adapter.getInitialState({\n *   callState: 'init',\n * });\n *\n * export const productsFeature = createFeature({\n *   name: 'products',\n *   reducer: createReducer(initialState),\n *   extraSelectors: ({ selectProductsState, selectCallState }) => ({\n *     ...adapter.getSelectors(selectProductsState),\n *     ...getCallStateSelectors(selectCallState)\n *   }),\n * });\n *\n * const {\n *   name,\n *   reducer,\n *   // feature selector\n *   selectProductsState,\n *   // feature state properties selectors\n *   selectIds,\n *   selectEntities,\n *   selectCallState,\n *   // selectors returned by `adapter.getSelectors`\n *   selectAll,\n *   selectTotal,\n *   // selectors returned by `getCallStateSelectors`\n *   selectIsLoading,\n *   selectIsLoaded,\n *   selectError,\n * } = productsFeature;\n * ```\n */\nfunction createFeature(featureConfig) {\n  const {\n    name,\n    reducer,\n    extraSelectors: extraSelectorsFactory\n  } = featureConfig;\n  const featureSelector = createFeatureSelector(name);\n  const nestedSelectors = createNestedSelectors(featureSelector, reducer);\n  const baseSelectors = {\n    [`select${capitalize(name)}State`]: featureSelector,\n    ...nestedSelectors\n  };\n  const extraSelectors = extraSelectorsFactory ? extraSelectorsFactory(baseSelectors) : {};\n  return {\n    name,\n    reducer,\n    ...baseSelectors,\n    ...extraSelectors\n  };\n}\nfunction createNestedSelectors(featureSelector, reducer) {\n  const initialState = getInitialState(reducer);\n  const nestedKeys = isPlainObject(initialState) ? Object.keys(initialState) : [];\n  return nestedKeys.reduce((nestedSelectors, nestedKey) => ({\n    ...nestedSelectors,\n    [`select${capitalize(nestedKey)}`]: createSelector(featureSelector, parentState => parentState?.[nestedKey])\n  }), {});\n}\nfunction getInitialState(reducer) {\n  return reducer(undefined, {\n    type: '@ngrx/feature/init'\n  });\n}\nfunction _createStoreReducers(reducers) {\n  return reducers instanceof InjectionToken ? inject(reducers) : reducers;\n}\nfunction _createFeatureStore(configs, featureStores) {\n  return featureStores.map((feat, index) => {\n    if (configs[index] instanceof InjectionToken) {\n      const conf = inject(configs[index]);\n      return {\n        key: feat.key,\n        reducerFactory: conf.reducerFactory ? conf.reducerFactory : combineReducers,\n        metaReducers: conf.metaReducers ? conf.metaReducers : [],\n        initialState: conf.initialState\n      };\n    }\n    return feat;\n  });\n}\nfunction _createFeatureReducers(reducerCollection) {\n  return reducerCollection.map(reducer => {\n    return reducer instanceof InjectionToken ? inject(reducer) : reducer;\n  });\n}\nfunction _initialStateFactory(initialState) {\n  if (typeof initialState === 'function') {\n    return initialState();\n  }\n  return initialState;\n}\nfunction _concatMetaReducers(metaReducers, userProvidedMetaReducers) {\n  return metaReducers.concat(userProvidedMetaReducers);\n}\nfunction _provideForRootGuard() {\n  const store = inject(Store, {\n    optional: true,\n    skipSelf: true\n  });\n  if (store) {\n    throw new TypeError(`The root Store has been provided more than once. Feature modules should provide feature states instead.`);\n  }\n  return 'guarded';\n}\nfunction immutabilityCheckMetaReducer(reducer, checks) {\n  return function (state, action) {\n    const act = checks.action(action) ? freeze(action) : action;\n    const nextState = reducer(state, act);\n    return checks.state() ? freeze(nextState) : nextState;\n  };\n}\nfunction freeze(target) {\n  Object.freeze(target);\n  const targetIsFunction = isFunction(target);\n  Object.getOwnPropertyNames(target).forEach(prop => {\n    // Ignore Ivy properties, ref: https://github.com/ngrx/platform/issues/2109#issuecomment-582689060\n    if (prop.startsWith('ɵ')) {\n      return;\n    }\n    if (hasOwnProperty(target, prop) && (targetIsFunction ? prop !== 'caller' && prop !== 'callee' && prop !== 'arguments' : true)) {\n      const propValue = target[prop];\n      if ((isObjectLike(propValue) || isFunction(propValue)) && !Object.isFrozen(propValue)) {\n        freeze(propValue);\n      }\n    }\n  });\n  return target;\n}\nfunction serializationCheckMetaReducer(reducer, checks) {\n  return function (state, action) {\n    if (checks.action(action)) {\n      const unserializableAction = getUnserializable(action);\n      throwIfUnserializable(unserializableAction, 'action');\n    }\n    const nextState = reducer(state, action);\n    if (checks.state()) {\n      const unserializableState = getUnserializable(nextState);\n      throwIfUnserializable(unserializableState, 'state');\n    }\n    return nextState;\n  };\n}\nfunction getUnserializable(target, path = []) {\n  // Guard against undefined and null, e.g. a reducer that returns undefined\n  if ((isUndefined(target) || isNull(target)) && path.length === 0) {\n    return {\n      path: ['root'],\n      value: target\n    };\n  }\n  const keys = Object.keys(target);\n  return keys.reduce((result, key) => {\n    if (result) {\n      return result;\n    }\n    const value = target[key];\n    // Ignore Ivy components\n    if (isComponent(value)) {\n      return result;\n    }\n    if (isUndefined(value) || isNull(value) || isNumber(value) || isBoolean(value) || isString(value) || isArray(value)) {\n      return false;\n    }\n    if (isPlainObject(value)) {\n      return getUnserializable(value, [...path, key]);\n    }\n    return {\n      path: [...path, key],\n      value\n    };\n  }, false);\n}\nfunction throwIfUnserializable(unserializable, context) {\n  if (unserializable === false) {\n    return;\n  }\n  const unserializablePath = unserializable.path.join('.');\n  const error = new Error(`Detected unserializable ${context} at \"${unserializablePath}\". ${RUNTIME_CHECK_URL}#strict${context}serializability`);\n  error.value = unserializable.value;\n  error.unserializablePath = unserializablePath;\n  throw error;\n}\nfunction inNgZoneAssertMetaReducer(reducer, checks) {\n  return function (state, action) {\n    if (checks.action(action) && !i0.NgZone.isInAngularZone()) {\n      throw new Error(`Action '${action.type}' running outside NgZone. ${RUNTIME_CHECK_URL}#strictactionwithinngzone`);\n    }\n    return reducer(state, action);\n  };\n}\nfunction createActiveRuntimeChecks(runtimeChecks) {\n  if (isDevMode()) {\n    return {\n      strictStateSerializability: false,\n      strictActionSerializability: false,\n      strictStateImmutability: true,\n      strictActionImmutability: true,\n      strictActionWithinNgZone: false,\n      strictActionTypeUniqueness: false,\n      ...runtimeChecks\n    };\n  }\n  return {\n    strictStateSerializability: false,\n    strictActionSerializability: false,\n    strictStateImmutability: false,\n    strictActionImmutability: false,\n    strictActionWithinNgZone: false,\n    strictActionTypeUniqueness: false\n  };\n}\nfunction createSerializationCheckMetaReducer({\n  strictActionSerializability,\n  strictStateSerializability\n}) {\n  return reducer => strictActionSerializability || strictStateSerializability ? serializationCheckMetaReducer(reducer, {\n    action: action => strictActionSerializability && !ignoreNgrxAction(action),\n    state: () => strictStateSerializability\n  }) : reducer;\n}\nfunction createImmutabilityCheckMetaReducer({\n  strictActionImmutability,\n  strictStateImmutability\n}) {\n  return reducer => strictActionImmutability || strictStateImmutability ? immutabilityCheckMetaReducer(reducer, {\n    action: action => strictActionImmutability && !ignoreNgrxAction(action),\n    state: () => strictStateImmutability\n  }) : reducer;\n}\nfunction ignoreNgrxAction(action) {\n  return action.type.startsWith('@ngrx');\n}\nfunction createInNgZoneCheckMetaReducer({\n  strictActionWithinNgZone\n}) {\n  return reducer => strictActionWithinNgZone ? inNgZoneAssertMetaReducer(reducer, {\n    action: action => strictActionWithinNgZone && !ignoreNgrxAction(action)\n  }) : reducer;\n}\nfunction provideRuntimeChecks(runtimeChecks) {\n  return [{\n    provide: _USER_RUNTIME_CHECKS,\n    useValue: runtimeChecks\n  }, {\n    provide: USER_RUNTIME_CHECKS,\n    useFactory: _runtimeChecksFactory,\n    deps: [_USER_RUNTIME_CHECKS]\n  }, {\n    provide: ACTIVE_RUNTIME_CHECKS,\n    deps: [USER_RUNTIME_CHECKS],\n    useFactory: createActiveRuntimeChecks\n  }, {\n    provide: META_REDUCERS,\n    multi: true,\n    deps: [ACTIVE_RUNTIME_CHECKS],\n    useFactory: createImmutabilityCheckMetaReducer\n  }, {\n    provide: META_REDUCERS,\n    multi: true,\n    deps: [ACTIVE_RUNTIME_CHECKS],\n    useFactory: createSerializationCheckMetaReducer\n  }, {\n    provide: META_REDUCERS,\n    multi: true,\n    deps: [ACTIVE_RUNTIME_CHECKS],\n    useFactory: createInNgZoneCheckMetaReducer\n  }];\n}\nfunction checkForActionTypeUniqueness() {\n  return [{\n    provide: _ACTION_TYPE_UNIQUENESS_CHECK,\n    multi: true,\n    deps: [ACTIVE_RUNTIME_CHECKS],\n    useFactory: _actionTypeUniquenessCheck\n  }];\n}\nfunction _runtimeChecksFactory(runtimeChecks) {\n  return runtimeChecks;\n}\nfunction _actionTypeUniquenessCheck(config) {\n  if (!config.strictActionTypeUniqueness) {\n    return;\n  }\n  const duplicates = Object.entries(REGISTERED_ACTION_TYPES).filter(([, registrations]) => registrations > 1).map(([type]) => type);\n  if (duplicates.length) {\n    throw new Error(`Action types are registered more than once, ${duplicates.map(type => `\"${type}\"`).join(', ')}. ${RUNTIME_CHECK_URL}#strictactiontypeuniqueness`);\n  }\n}\n\n/**\n * Provides additional slices of state in the Store.\n * These providers cannot be used at the component level.\n *\n * @usageNotes\n *\n * ### Providing Store Features\n *\n * ```ts\n * const booksRoutes: Route[] = [\n *   {\n *     path: '',\n *     providers: [provideState('books', booksReducer)],\n *     children: [\n *       { path: '', component: BookListComponent },\n *       { path: ':id', component: BookDetailsComponent },\n *     ],\n *   },\n * ];\n * ```\n */\nfunction provideState(featureNameOrSlice, reducers, config = {}) {\n  return makeEnvironmentProviders([..._provideState(featureNameOrSlice, reducers, config), ENVIRONMENT_STATE_PROVIDER]);\n}\nfunction _provideStore(reducers = {}, config = {}) {\n  return [{\n    provide: _ROOT_STORE_GUARD,\n    useFactory: _provideForRootGuard\n  }, {\n    provide: _INITIAL_STATE,\n    useValue: config.initialState\n  }, {\n    provide: INITIAL_STATE,\n    useFactory: _initialStateFactory,\n    deps: [_INITIAL_STATE]\n  }, {\n    provide: _INITIAL_REDUCERS,\n    useValue: reducers\n  }, {\n    provide: _STORE_REDUCERS,\n    useExisting: reducers instanceof InjectionToken ? reducers : _INITIAL_REDUCERS\n  }, {\n    provide: INITIAL_REDUCERS,\n    deps: [_INITIAL_REDUCERS, [new Inject(_STORE_REDUCERS)]],\n    useFactory: _createStoreReducers\n  }, {\n    provide: USER_PROVIDED_META_REDUCERS,\n    useValue: config.metaReducers ? config.metaReducers : []\n  }, {\n    provide: _RESOLVED_META_REDUCERS,\n    deps: [META_REDUCERS, USER_PROVIDED_META_REDUCERS],\n    useFactory: _concatMetaReducers\n  }, {\n    provide: _REDUCER_FACTORY,\n    useValue: config.reducerFactory ? config.reducerFactory : combineReducers\n  }, {\n    provide: REDUCER_FACTORY,\n    deps: [_REDUCER_FACTORY, _RESOLVED_META_REDUCERS],\n    useFactory: createReducerFactory\n  }, ACTIONS_SUBJECT_PROVIDERS, REDUCER_MANAGER_PROVIDERS, SCANNED_ACTIONS_SUBJECT_PROVIDERS, STATE_PROVIDERS, STORE_PROVIDERS, provideRuntimeChecks(config.runtimeChecks), checkForActionTypeUniqueness()];\n}\nfunction rootStoreProviderFactory() {\n  inject(ActionsSubject);\n  inject(ReducerObservable);\n  inject(ScannedActionsSubject);\n  inject(Store);\n  inject(_ROOT_STORE_GUARD, {\n    optional: true\n  });\n  inject(_ACTION_TYPE_UNIQUENESS_CHECK, {\n    optional: true\n  });\n}\n/**\n * Environment Initializer used in the root\n * providers to initialize the Store\n */\nconst ENVIRONMENT_STORE_PROVIDER = [{\n  provide: ROOT_STORE_PROVIDER,\n  useFactory: rootStoreProviderFactory\n}, {\n  provide: ENVIRONMENT_INITIALIZER,\n  multi: true,\n  useFactory() {\n    return () => inject(ROOT_STORE_PROVIDER);\n  }\n}];\n/**\n * Provides the global Store providers and initializes\n * the Store.\n * These providers cannot be used at the component level.\n *\n * @usageNotes\n *\n * ### Providing the Global Store\n *\n * ```ts\n * bootstrapApplication(AppComponent, {\n *   providers: [provideStore()],\n * });\n * ```\n */\nfunction provideStore(reducers, config) {\n  return makeEnvironmentProviders([..._provideStore(reducers, config), ENVIRONMENT_STORE_PROVIDER]);\n}\nfunction featureStateProviderFactory() {\n  inject(ROOT_STORE_PROVIDER);\n  const features = inject(_STORE_FEATURES);\n  const featureReducers = inject(FEATURE_REDUCERS);\n  const reducerManager = inject(ReducerManager);\n  inject(_ACTION_TYPE_UNIQUENESS_CHECK, {\n    optional: true\n  });\n  const feats = features.map((feature, index) => {\n    const featureReducerCollection = featureReducers.shift();\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const reducers = featureReducerCollection /*TODO(#823)*/[index];\n    return {\n      ...feature,\n      reducers,\n      initialState: _initialStateFactory(feature.initialState)\n    };\n  });\n  reducerManager.addFeatures(feats);\n}\n/**\n * Environment Initializer used in the feature\n * providers to register state features\n */\nconst ENVIRONMENT_STATE_PROVIDER = [{\n  provide: FEATURE_STATE_PROVIDER,\n  useFactory: featureStateProviderFactory\n}, {\n  provide: ENVIRONMENT_INITIALIZER,\n  multi: true,\n  useFactory() {\n    return () => inject(FEATURE_STATE_PROVIDER);\n  }\n}];\nfunction _provideState(featureNameOrSlice, reducers, config = {}) {\n  return [{\n    provide: _FEATURE_CONFIGS,\n    multi: true,\n    useValue: featureNameOrSlice instanceof Object ? {} : config\n  }, {\n    provide: STORE_FEATURES,\n    multi: true,\n    useValue: {\n      key: featureNameOrSlice instanceof Object ? featureNameOrSlice.name : featureNameOrSlice,\n      reducerFactory: !(config instanceof InjectionToken) && config.reducerFactory ? config.reducerFactory : combineReducers,\n      metaReducers: !(config instanceof InjectionToken) && config.metaReducers ? config.metaReducers : [],\n      initialState: !(config instanceof InjectionToken) && config.initialState ? config.initialState : undefined\n    }\n  }, {\n    provide: _STORE_FEATURES,\n    deps: [_FEATURE_CONFIGS, STORE_FEATURES],\n    useFactory: _createFeatureStore\n  }, {\n    provide: _FEATURE_REDUCERS,\n    multi: true,\n    useValue: featureNameOrSlice instanceof Object ? featureNameOrSlice.reducer : reducers\n  }, {\n    provide: _FEATURE_REDUCERS_TOKEN,\n    multi: true,\n    useExisting: reducers instanceof InjectionToken ? reducers : _FEATURE_REDUCERS\n  }, {\n    provide: FEATURE_REDUCERS,\n    multi: true,\n    deps: [_FEATURE_REDUCERS, [new Inject(_FEATURE_REDUCERS_TOKEN)]],\n    useFactory: _createFeatureReducers\n  }, checkForActionTypeUniqueness()];\n}\nclass StoreRootModule {\n  constructor(actions$, reducer$, scannedActions$, store, guard, actionCheck) {}\n  /** @nocollapse */\n  static {\n    this.ɵfac = function StoreRootModule_Factory(t) {\n      return new (t || StoreRootModule)(i0.ɵɵinject(ActionsSubject), i0.ɵɵinject(ReducerObservable), i0.ɵɵinject(ScannedActionsSubject), i0.ɵɵinject(Store), i0.ɵɵinject(_ROOT_STORE_GUARD, 8), i0.ɵɵinject(_ACTION_TYPE_UNIQUENESS_CHECK, 8));\n    };\n  }\n  /** @nocollapse */\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: StoreRootModule\n    });\n  }\n  /** @nocollapse */\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  }\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StoreRootModule, [{\n    type: NgModule,\n    args: [{}]\n  }], function () {\n    return [{\n      type: ActionsSubject\n    }, {\n      type: ReducerObservable\n    }, {\n      type: ScannedActionsSubject\n    }, {\n      type: Store\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [_ROOT_STORE_GUARD]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [_ACTION_TYPE_UNIQUENESS_CHECK]\n      }]\n    }];\n  }, null);\n})();\nclass StoreFeatureModule {\n  constructor(features, featureReducers, reducerManager, root, actionCheck) {\n    this.features = features;\n    this.featureReducers = featureReducers;\n    this.reducerManager = reducerManager;\n    const feats = features.map((feature, index) => {\n      const featureReducerCollection = featureReducers.shift();\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const reducers = featureReducerCollection /*TODO(#823)*/[index];\n      return {\n        ...feature,\n        reducers,\n        initialState: _initialStateFactory(feature.initialState)\n      };\n    });\n    reducerManager.addFeatures(feats);\n  }\n  // eslint-disable-next-line @angular-eslint/contextual-lifecycle\n  ngOnDestroy() {\n    this.reducerManager.removeFeatures(this.features);\n  }\n  /** @nocollapse */\n  static {\n    this.ɵfac = function StoreFeatureModule_Factory(t) {\n      return new (t || StoreFeatureModule)(i0.ɵɵinject(_STORE_FEATURES), i0.ɵɵinject(FEATURE_REDUCERS), i0.ɵɵinject(ReducerManager), i0.ɵɵinject(StoreRootModule), i0.ɵɵinject(_ACTION_TYPE_UNIQUENESS_CHECK, 8));\n    };\n  }\n  /** @nocollapse */\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: StoreFeatureModule\n    });\n  }\n  /** @nocollapse */\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  }\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StoreFeatureModule, [{\n    type: NgModule,\n    args: [{}]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [_STORE_FEATURES]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [FEATURE_REDUCERS]\n      }]\n    }, {\n      type: ReducerManager\n    }, {\n      type: StoreRootModule\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [_ACTION_TYPE_UNIQUENESS_CHECK]\n      }]\n    }];\n  }, null);\n})();\nclass StoreModule {\n  static forRoot(reducers, config) {\n    return {\n      ngModule: StoreRootModule,\n      providers: [..._provideStore(reducers, config)]\n    };\n  }\n  static forFeature(featureNameOrSlice, reducers, config = {}) {\n    return {\n      ngModule: StoreFeatureModule,\n      providers: [..._provideState(featureNameOrSlice, reducers, config)]\n    };\n  }\n  /** @nocollapse */\n  static {\n    this.ɵfac = function StoreModule_Factory(t) {\n      return new (t || StoreModule)();\n    };\n  }\n  /** @nocollapse */\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: StoreModule\n    });\n  }\n  /** @nocollapse */\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  }\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StoreModule, [{\n    type: NgModule,\n    args: [{}]\n  }], null, null);\n})();\n\n/**\n * @description\n * Associates actions with a given state change function.\n * A state change function must be provided as the last parameter.\n *\n * @param args `ActionCreator`'s followed by a state change function.\n *\n * @returns an association of action types with a state change function.\n *\n * @usageNotes\n * ```ts\n * on(AuthApiActions.loginSuccess, (state, { user }) => ({ ...state, user }))\n * ```\n */\nfunction on(...args) {\n  const reducer = args.pop();\n  const types = args.map(creator => creator.type);\n  return {\n    reducer,\n    types\n  };\n}\n/**\n * @description\n * Creates a reducer function to handle state transitions.\n *\n * Reducer creators reduce the explicitness of reducer functions with switch statements.\n *\n * @param initialState Provides a state value if the current state is `undefined`, as it is initially.\n * @param ons Associations between actions and state changes.\n * @returns A reducer function.\n *\n * @usageNotes\n *\n * - Must be used with `ActionCreator`'s (returned by `createAction`). Cannot be used with class-based action creators.\n * - The returned `ActionReducer` does not require being wrapped with another function.\n *\n * **Declaring a reducer creator**\n *\n * ```ts\n * export const reducer = createReducer(\n *   initialState,\n *   on(\n *     featureActions.actionOne,\n *     featureActions.actionTwo,\n *     (state, { updatedValue }) => ({ ...state, prop: updatedValue })\n *   ),\n *   on(featureActions.actionThree, () => initialState);\n * );\n * ```\n */\nfunction createReducer(initialState, ...ons) {\n  const map = new Map();\n  for (const on of ons) {\n    for (const type of on.types) {\n      const existingReducer = map.get(type);\n      if (existingReducer) {\n        const newReducer = (state, action) => on.reducer(existingReducer(state, action), action);\n        map.set(type, newReducer);\n      } else {\n        map.set(type, on.reducer);\n      }\n    }\n  }\n  return function (state = initialState, action) {\n    const reducer = map.get(action.type);\n    return reducer ? reducer(state, action) : state;\n  };\n}\n\n/**\n * DO NOT EDIT\n *\n * This file is automatically generated at build\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ACTIVE_RUNTIME_CHECKS, ActionsSubject, FEATURE_REDUCERS, FEATURE_STATE_PROVIDER, INIT, INITIAL_REDUCERS, INITIAL_STATE, META_REDUCERS, REDUCER_FACTORY, ROOT_STORE_PROVIDER, ReducerManager, ReducerManagerDispatcher, ReducerObservable, STORE_FEATURES, ScannedActionsSubject, State, StateObservable, Store, StoreFeatureModule, StoreModule, StoreRootModule, UPDATE, USER_PROVIDED_META_REDUCERS, USER_RUNTIME_CHECKS, combineReducers, compose, createAction, createActionGroup, createFeature, createFeatureSelector, createReducer, createReducerFactory, createSelector, createSelectorFactory, defaultMemoize, defaultStateFn, emptyProps, isNgrxMockEnvironment, on, props, provideState, provideStore, reduceState, resultMemoize, select, setNgrxMockEnvironment, union };","map":{"version":3,"names":["REGISTERED_ACTION_TYPES","resetRegisteredActionTypes","key","Object","keys","createAction","type","config","defineType","args","as","_as","props","Error","_p","undefined","union","creators","creator","defineProperty","value","writable","capitalize","text","charAt","toUpperCase","substring","uncapitalize","toLowerCase","createActionGroup","source","events","reduce","actionGroup","eventName","toActionName","toActionType","emptyProps","trim","split","map","word","i","join","INIT","ActionsSubject","BehaviorSubject","constructor","next","action","TypeError","complete","ngOnDestroy","factory","ɵfac","Injectable","ACTIONS_SUBJECT_PROVIDERS","_ROOT_STORE_GUARD","InjectionToken","_INITIAL_STATE","INITIAL_STATE","REDUCER_FACTORY","_REDUCER_FACTORY","INITIAL_REDUCERS","_INITIAL_REDUCERS","STORE_FEATURES","_STORE_REDUCERS","_FEATURE_REDUCERS","_FEATURE_CONFIGS","_STORE_FEATURES","_FEATURE_REDUCERS_TOKEN","FEATURE_REDUCERS","USER_PROVIDED_META_REDUCERS","META_REDUCERS","_RESOLVED_META_REDUCERS","USER_RUNTIME_CHECKS","_USER_RUNTIME_CHECKS","ACTIVE_RUNTIME_CHECKS","_ACTION_TYPE_UNIQUENESS_CHECK","ROOT_STORE_PROVIDER","FEATURE_STATE_PROVIDER","combineReducers","reducers","initialState","reducerKeys","finalReducers","length","finalReducerKeys","combination","state","hasChanged","nextState","reducer","previousStateForKey","nextStateForKey","omit","object","keyToRemove","filter","result","assign","compose","functions","arg","last","rest","slice","reduceRight","composed","fn","createReducerFactory","reducerFactory","metaReducers","Array","isArray","apply","createFeatureReducerFactory","r","ReducerObservable","Observable","ReducerManagerDispatcher","UPDATE","ReducerManager","currentReducers","dispatcher","addFeature","feature","addFeatures","features","reducerDict","addReducers","removeFeature","removeFeatures","removeReducers","p","addReducer","updateReducers","removeReducer","featureKey","featureKeys","forEach","ReducerManager_Factory","t","Inject","REDUCER_MANAGER_PROVIDERS","provide","useExisting","ScannedActionsSubject","Subject","SCANNED_ACTIONS_SUBJECT_PROVIDERS","StateObservable","State","actions$","reducer$","scannedActions","actionsOnQueue$","pipe","observeOn","queueScheduler","withLatestReducer$","withLatestFrom","seed","stateAndAction$","scan","reduceState","stateSubscription","subscribe","toSignal","manualCleanup","requireSync","unsubscribe","State_Factory","stateActionPair","STATE_PROVIDERS","Store","state$","actionsObserver","reducerManager","select","pathOrMapFn","paths","call","selectSignal","selector","options","computed","equal","previous","current","lift","operator","store","dispatch","error","err","STORE_PROVIDERS","propsOrPath","selectOperator","source$","mapped$","pathSlices","Boolean","pluck","distinctUntilChanged","RUNTIME_CHECK_URL","isUndefined","target","isNull","isString","isBoolean","isNumber","isObjectLike","isObject","isPlainObject","targetPrototype","getPrototypeOf","prototype","isFunction","isComponent","hasOwnProperty","propertyName","_ngrxMockEnvironment","setNgrxMockEnvironment","isNgrxMockEnvironment","isEqualCheck","a","b","isArgumentsChanged","lastArguments","comparator","resultMemoize","projectionFn","isResultEqual","defaultMemoize","isArgumentsEqual","lastResult","overrideResult","reset","setResult","clearResult","memoized","arguments","newResult","createSelector","input","createSelectorFactory","defaultStateFn","selectors","memoizedProjector","memoize","stateFn","head","tail","isSelectorsDictionary","extractArgsFromSelectorsDictionary","projector","memoizedSelectors","release","memoizedState","createFeatureSelector","featureName","featureState","isDevMode","console","warn","values","every","selectorsDictionary","resultKeys","selectorResults","index","createFeature","featureConfig","name","extraSelectors","extraSelectorsFactory","featureSelector","nestedSelectors","createNestedSelectors","baseSelectors","getInitialState","nestedKeys","nestedKey","parentState","_createStoreReducers","inject","_createFeatureStore","configs","featureStores","feat","conf","_createFeatureReducers","reducerCollection","_initialStateFactory","_concatMetaReducers","userProvidedMetaReducers","concat","_provideForRootGuard","optional","skipSelf","immutabilityCheckMetaReducer","checks","act","freeze","targetIsFunction","getOwnPropertyNames","prop","startsWith","propValue","isFrozen","serializationCheckMetaReducer","unserializableAction","getUnserializable","throwIfUnserializable","unserializableState","path","unserializable","context","unserializablePath","inNgZoneAssertMetaReducer","i0","NgZone","isInAngularZone","createActiveRuntimeChecks","runtimeChecks","strictStateSerializability","strictActionSerializability","strictStateImmutability","strictActionImmutability","strictActionWithinNgZone","strictActionTypeUniqueness","createSerializationCheckMetaReducer","ignoreNgrxAction","createImmutabilityCheckMetaReducer","createInNgZoneCheckMetaReducer","provideRuntimeChecks","useValue","useFactory","_runtimeChecksFactory","deps","multi","checkForActionTypeUniqueness","_actionTypeUniquenessCheck","duplicates","entries","registrations","provideState","featureNameOrSlice","makeEnvironmentProviders","_provideState","ENVIRONMENT_STATE_PROVIDER","_provideStore","rootStoreProviderFactory","ENVIRONMENT_STORE_PROVIDER","ENVIRONMENT_INITIALIZER","provideStore","featureStateProviderFactory","featureReducers","feats","featureReducerCollection","shift","StoreRootModule","scannedActions$","guard","actionCheck","NgModule","Optional","StoreFeatureModule","root","StoreFeatureModule_Factory","StoreModule","forRoot","ngModule","providers","forFeature","on","pop","types","createReducer","ons","Map","existingReducer","get","newReducer","set"],"sources":["C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\modules\\store\\src\\globals.ts","C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\modules\\store\\src\\action_creator.ts","C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\modules\\store\\src\\helpers.ts","C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\modules\\store\\src\\action_group_creator.ts","C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\modules\\store\\src\\actions_subject.ts","C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\modules\\store\\src\\tokens.ts","C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\modules\\store\\src\\utils.ts","C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\modules\\store\\src\\reducer_manager.ts","C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\modules\\store\\src\\scanned_actions_subject.ts","C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\modules\\store\\src\\state.ts","C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\modules\\store\\src\\store.ts","C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\modules\\store\\src\\meta-reducers\\utils.ts","C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\modules\\store\\src\\flags.ts","C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\modules\\store\\src\\selector.ts","C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\modules\\store\\src\\feature_creator.ts","C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\modules\\store\\src\\store_config.ts","C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\modules\\store\\src\\meta-reducers\\immutability_reducer.ts","C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\modules\\store\\src\\meta-reducers\\serialization_reducer.ts","C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\modules\\store\\src\\meta-reducers\\inNgZoneAssert_reducer.ts","C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\modules\\store\\src\\runtime_checks.ts","C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\modules\\store\\src\\provide_store.ts","C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\modules\\store\\src\\store_module.ts","C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\modules\\store\\src\\reducer_creator.ts","C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\modules\\store\\index.ts","C:\\Users\\eftel\\Documents\\AngularLearn\\learn-angular\\modules\\store\\ngrx-store.ts"],"sourcesContent":["export const REGISTERED_ACTION_TYPES: { [actionType: string]: number } = {};\n\nexport function resetRegisteredActionTypes() {\n  for (const key of Object.keys(REGISTERED_ACTION_TYPES)) {\n    delete REGISTERED_ACTION_TYPES[key];\n  }\n}\n","import {\n  Creator,\n  ActionCreator,\n  TypedAction,\n  FunctionWithParametersType,\n  NotAllowedCheck,\n  ActionCreatorProps,\n  NotAllowedInPropsCheck,\n} from './models';\nimport { REGISTERED_ACTION_TYPES } from './globals';\n\n// Action creators taken from ts-action library and modified a bit to better\n// fit current NgRx usage. Thank you Nicholas Jamieson (@cartant).\n\nexport function createAction<T extends string>(\n  type: T\n): ActionCreator<T, () => TypedAction<T>>;\nexport function createAction<T extends string, P extends object>(\n  type: T,\n  config: ActionCreatorProps<P> & NotAllowedCheck<P>\n): ActionCreator<T, (props: P & NotAllowedCheck<P>) => P & TypedAction<T>>;\nexport function createAction<\n  T extends string,\n  P extends any[],\n  R extends object\n>(\n  type: T,\n  creator: Creator<P, R & NotAllowedCheck<R>>\n): FunctionWithParametersType<P, R & TypedAction<T>> & TypedAction<T>;\n/**\n * @description\n * Creates a configured `Creator` function that, when called, returns an object in the shape of the `Action` interface.\n *\n * Action creators reduce the explicitness of class-based action creators.\n *\n * @param type Describes the action that will be dispatched\n * @param config Additional metadata needed for the handling of the action.  See {@link createAction#usage-notes Usage Notes}.\n *\n * @usageNotes\n *\n * **Declaring an action creator**\n *\n * Without additional metadata:\n * ```ts\n * export const increment = createAction('[Counter] Increment');\n * ```\n * With additional metadata:\n * ```ts\n * export const loginSuccess = createAction(\n *   '[Auth/API] Login Success',\n *   props<{ user: User }>()\n * );\n * ```\n * With a function:\n * ```ts\n * export const loginSuccess = createAction(\n *   '[Auth/API] Login Success',\n *   (response: Response) => response.user\n * );\n * ```\n *\n * **Dispatching an action**\n *\n * Without additional metadata:\n * ```ts\n * store.dispatch(increment());\n * ```\n * With additional metadata:\n * ```ts\n * store.dispatch(loginSuccess({ user: newUser }));\n * ```\n *\n * **Referencing an action in a reducer**\n *\n * Using a switch statement:\n * ```ts\n * switch (action.type) {\n *   // ...\n *   case AuthApiActions.loginSuccess.type: {\n *     return {\n *       ...state,\n *       user: action.user\n *     };\n *   }\n * }\n * ```\n * Using a reducer creator:\n * ```ts\n * on(AuthApiActions.loginSuccess, (state, { user }) => ({ ...state, user }))\n * ```\n *\n *  **Referencing an action in an effect**\n * ```ts\n * effectName$ = createEffect(\n *   () => this.actions$.pipe(\n *     ofType(AuthApiActions.loginSuccess),\n *     // ...\n *   )\n * );\n * ```\n */\nexport function createAction<T extends string, C extends Creator>(\n  type: T,\n  config?: { _as: 'props' } | C\n): ActionCreator<T> {\n  REGISTERED_ACTION_TYPES[type] = (REGISTERED_ACTION_TYPES[type] || 0) + 1;\n\n  if (typeof config === 'function') {\n    return defineType(type, (...args: any[]) => ({\n      ...config(...args),\n      type,\n    }));\n  }\n  const as = config ? config._as : 'empty';\n  switch (as) {\n    case 'empty':\n      return defineType(type, () => ({ type }));\n    case 'props':\n      return defineType(type, (props: object) => ({\n        ...props,\n        type,\n      }));\n    default:\n      throw new Error('Unexpected config.');\n  }\n}\n\nexport function props<\n  P extends SafeProps,\n  SafeProps = NotAllowedInPropsCheck<P>\n>(): ActionCreatorProps<P> {\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  return { _as: 'props', _p: undefined! };\n}\n\nexport function union<\n  C extends { [key: string]: ActionCreator<string, Creator> }\n>(creators: C): ReturnType<C[keyof C]> {\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  return undefined!;\n}\n\nfunction defineType<T extends string>(\n  type: T,\n  creator: Creator\n): ActionCreator<T> {\n  return Object.defineProperty(creator, 'type', {\n    value: type,\n    writable: false,\n  }) as ActionCreator<T>;\n}\n","export function capitalize<T extends string>(text: T): Capitalize<T> {\n  return (text.charAt(0).toUpperCase() + text.substring(1)) as Capitalize<T>;\n}\n\nexport function uncapitalize<T extends string>(text: T): Uncapitalize<T> {\n  return (text.charAt(0).toLowerCase() + text.substring(1)) as Uncapitalize<T>;\n}\n","import { createAction, props } from './action_creator';\nimport {\n  ActionCreator,\n  ActionCreatorProps,\n  Creator,\n  FunctionWithParametersType,\n  NotAllowedCheck,\n  TypedAction,\n} from './models';\nimport { capitalize, uncapitalize } from './helpers';\n\ntype Join<\n  Str extends string,\n  Separator extends string = ' '\n> = Str extends `${infer First}${Separator}${infer Rest}`\n  ? Join<`${First}${Rest}`, Separator>\n  : Str;\n\ntype CapitalizeWords<Str extends string> =\n  Str extends `${infer First} ${infer Rest}`\n    ? `${Capitalize<First>} ${CapitalizeWords<Rest>}`\n    : Capitalize<Str>;\n\ntype StringLiteralCheck<\n  Str extends string,\n  Name extends string\n> = string extends Str ? `${Name} must be a string literal type` : unknown;\n\ntype UniqueEventNameCheck<\n  EventNames extends string,\n  EventName extends string\n> = ActionName<EventName> extends ActionName<Exclude<EventNames, EventName>>\n  ? `${ActionName<EventName>} action is already defined`\n  : unknown;\n\ntype NotAllowedEventPropsCheck<\n  PropsCreator extends ActionCreatorProps<unknown> | Creator\n> = PropsCreator extends ActionCreatorProps<infer Props>\n  ? Props extends void\n    ? unknown\n    : NotAllowedCheck<Props & object>\n  : PropsCreator extends Creator<any, infer Result>\n  ? NotAllowedCheck<Result>\n  : unknown;\n\ntype EventCreator<\n  PropsCreator extends ActionCreatorProps<unknown> | Creator,\n  Type extends string\n> = PropsCreator extends ActionCreatorProps<infer Props>\n  ? void extends Props\n    ? ActionCreator<Type, () => TypedAction<Type>>\n    : ActionCreator<\n        Type,\n        (\n          props: Props & NotAllowedCheck<Props & object>\n        ) => Props & TypedAction<Type>\n      >\n  : PropsCreator extends Creator<infer Props, infer Result>\n  ? FunctionWithParametersType<\n      Props,\n      Result & NotAllowedCheck<Result> & TypedAction<Type>\n    > &\n      TypedAction<Type>\n  : never;\n\ntype ActionName<EventName extends string> = Uncapitalize<\n  Join<CapitalizeWords<EventName>>\n>;\n\ninterface ActionGroupConfig<\n  Source extends string,\n  Events extends Record<string, ActionCreatorProps<unknown> | Creator>\n> {\n  source: Source & StringLiteralCheck<Source, 'source'>;\n  events: Events & {\n    [EventName in keyof Events]: StringLiteralCheck<\n      EventName & string,\n      'event name'\n    > &\n      UniqueEventNameCheck<keyof Events & string, EventName & string> &\n      NotAllowedEventPropsCheck<Events[EventName]>;\n  };\n}\n\ntype ActionGroup<\n  Source extends string,\n  Events extends Record<string, ActionCreatorProps<unknown> | Creator>\n> = {\n  [EventName in keyof Events as ActionName<EventName & string>]: EventCreator<\n    Events[EventName],\n    `[${Source}] ${EventName & string}`\n  >;\n};\n\n/**\n * @description\n * A function that creates a group of action creators with the same source.\n *\n * @param config An object that contains a source and dictionary of events.\n * An event is a key-value pair of an event name and event props.\n * @returns A dictionary of action creators.\n * The name of each action creator is created by camel casing the event name.\n * The type of each action is created using the \"[Source] Event Name\" pattern.\n *\n * @usageNotes\n *\n * ```ts\n * const authApiActions = createActionGroup({\n *   source: 'Auth API',\n *   events: {\n *     // defining events with payload using the `props` function\n *     'Login Success': props<{ userId: number; token: string }>(),\n *     'Login Failure': props<{ error: string }>(),\n *\n *     // defining an event without payload using the `emptyProps` function\n *     'Logout Success': emptyProps(),\n *\n *     // defining an event with payload using the props factory\n *     'Logout Failure': (error: Error) => ({ error }),\n *   },\n * });\n *\n * // action type: \"[Auth API] Login Success\"\n * authApiActions.loginSuccess({ userId: 10, token: 'ngrx' });\n *\n * // action type: \"[Auth API] Login Failure\"\n * authApiActions.loginFailure({ error: 'Login Failure!' });\n *\n * // action type: \"[Auth API] Logout Success\"\n * authApiActions.logoutSuccess();\n *\n * // action type: \"[Auth API] Logout Failure\";\n * authApiActions.logoutFailure(new Error('Logout Failure!'));\n * ```\n */\nexport function createActionGroup<\n  Source extends string,\n  Events extends Record<string, ActionCreatorProps<unknown> | Creator>\n>(config: ActionGroupConfig<Source, Events>): ActionGroup<Source, Events> {\n  const { source, events } = config;\n\n  return Object.keys(events).reduce(\n    (actionGroup, eventName) => ({\n      ...actionGroup,\n      [toActionName(eventName)]: createAction(\n        toActionType(source, eventName),\n        events[eventName]\n      ),\n    }),\n    {} as ActionGroup<Source, Events>\n  );\n}\n\nexport function emptyProps(): ActionCreatorProps<void> {\n  return props();\n}\n\nfunction toActionName<EventName extends string>(\n  eventName: EventName\n): ActionName<EventName> {\n  return eventName\n    .trim()\n    .split(' ')\n    .map((word, i) => (i === 0 ? uncapitalize(word) : capitalize(word)))\n    .join('') as ActionName<EventName>;\n}\n\nfunction toActionType<Source extends string, EventName extends string>(\n  source: Source,\n  eventName: EventName\n): `[${Source}] ${EventName}` {\n  return `[${source}] ${eventName}`;\n}\n","import { Injectable, OnDestroy, Provider } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\nimport { Action } from './models';\n\nexport const INIT = '@ngrx/store/init' as const;\n\n@Injectable()\nexport class ActionsSubject\n  extends BehaviorSubject<Action>\n  implements OnDestroy\n{\n  constructor() {\n    super({ type: INIT });\n  }\n\n  override next(action: Action): void {\n    if (typeof action === 'function') {\n      throw new TypeError(`\n        Dispatch expected an object, instead it received a function.\n        If you're using the createAction function, make sure to invoke the function\n        before dispatching the action. For example, someAction should be someAction().`);\n    } else if (typeof action === 'undefined') {\n      throw new TypeError(`Actions must be objects`);\n    } else if (typeof action.type === 'undefined') {\n      throw new TypeError(`Actions must have a type property`);\n    }\n    super.next(action);\n  }\n\n  override complete() {\n    /* noop */\n  }\n\n  ngOnDestroy() {\n    super.complete();\n  }\n}\n\nexport const ACTIONS_SUBJECT_PROVIDERS: Provider[] = [ActionsSubject];\n","import { InjectionToken } from '@angular/core';\nimport { RuntimeChecks, MetaReducer } from './models';\n\nexport const _ROOT_STORE_GUARD = new InjectionToken<void>(\n  '@ngrx/store Internal Root Guard'\n);\nexport const _INITIAL_STATE = new InjectionToken(\n  '@ngrx/store Internal Initial State'\n);\nexport const INITIAL_STATE = new InjectionToken('@ngrx/store Initial State');\nexport const REDUCER_FACTORY = new InjectionToken(\n  '@ngrx/store Reducer Factory'\n);\nexport const _REDUCER_FACTORY = new InjectionToken(\n  '@ngrx/store Internal Reducer Factory Provider'\n);\nexport const INITIAL_REDUCERS = new InjectionToken(\n  '@ngrx/store Initial Reducers'\n);\nexport const _INITIAL_REDUCERS = new InjectionToken(\n  '@ngrx/store Internal Initial Reducers'\n);\nexport const STORE_FEATURES = new InjectionToken('@ngrx/store Store Features');\nexport const _STORE_REDUCERS = new InjectionToken(\n  '@ngrx/store Internal Store Reducers'\n);\nexport const _FEATURE_REDUCERS = new InjectionToken(\n  '@ngrx/store Internal Feature Reducers'\n);\n\nexport const _FEATURE_CONFIGS = new InjectionToken(\n  '@ngrx/store Internal Feature Configs'\n);\n\nexport const _STORE_FEATURES = new InjectionToken(\n  '@ngrx/store Internal Store Features'\n);\n\nexport const _FEATURE_REDUCERS_TOKEN = new InjectionToken(\n  '@ngrx/store Internal Feature Reducers Token'\n);\nexport const FEATURE_REDUCERS = new InjectionToken(\n  '@ngrx/store Feature Reducers'\n);\n\n/**\n * User-defined meta reducers from StoreModule.forRoot()\n */\nexport const USER_PROVIDED_META_REDUCERS = new InjectionToken<MetaReducer[]>(\n  '@ngrx/store User Provided Meta Reducers'\n);\n\n/**\n * Meta reducers defined either internally by @ngrx/store or by library authors\n */\nexport const META_REDUCERS = new InjectionToken<MetaReducer[]>(\n  '@ngrx/store Meta Reducers'\n);\n\n/**\n * Concats the user provided meta reducers and the meta reducers provided on the multi\n * injection token\n */\nexport const _RESOLVED_META_REDUCERS = new InjectionToken<MetaReducer>(\n  '@ngrx/store Internal Resolved Meta Reducers'\n);\n\n/**\n * Runtime checks defined by the user via an InjectionToken\n * Defaults to `_USER_RUNTIME_CHECKS`\n */\nexport const USER_RUNTIME_CHECKS = new InjectionToken<RuntimeChecks>(\n  '@ngrx/store User Runtime Checks Config'\n);\n\n/**\n * Runtime checks defined by the user via forRoot()\n */\nexport const _USER_RUNTIME_CHECKS = new InjectionToken<RuntimeChecks>(\n  '@ngrx/store Internal User Runtime Checks Config'\n);\n\n/**\n * Runtime checks currently in use\n */\nexport const ACTIVE_RUNTIME_CHECKS = new InjectionToken<RuntimeChecks>(\n  '@ngrx/store Internal Runtime Checks'\n);\n\nexport const _ACTION_TYPE_UNIQUENESS_CHECK = new InjectionToken<void>(\n  '@ngrx/store Check if Action types are unique'\n);\n\n/**\n * InjectionToken that registers the global Store.\n * Mainly used to provide a hook that can be injected\n * to ensure the root state is loaded before something\n * that depends on it.\n */\nexport const ROOT_STORE_PROVIDER = new InjectionToken<void>(\n  '@ngrx/store Root Store Provider'\n);\n\n/**\n * InjectionToken that registers feature states.\n * Mainly used to provide a hook that can be injected\n * to ensure feature state is loaded before something\n * that depends on it.\n */\nexport const FEATURE_STATE_PROVIDER = new InjectionToken<void>(\n  '@ngrx/store Feature State Provider'\n);\n","import {\n  Action,\n  ActionReducer,\n  ActionReducerFactory,\n  ActionReducerMap,\n  MetaReducer,\n  InitialState,\n} from './models';\n\nexport function combineReducers<T, V extends Action = Action>(\n  reducers: ActionReducerMap<T, V>,\n  initialState?: Partial<T>\n): ActionReducer<T, V>;\n/**\n * @description\n * Combines reducers for individual features into a single reducer.\n *\n * You can use this function to delegate handling of state transitions to multiple reducers, each acting on their\n * own sub-state within the root state.\n *\n * @param reducers An object mapping keys of the root state to their corresponding feature reducer.\n * @param initialState Provides a state value if the current state is `undefined`, as it is initially.\n * @returns A reducer function.\n *\n * @usageNotes\n *\n * **Example combining two feature reducers into one \"root\" reducer**\n *\n * ```ts\n * export const reducer = combineReducers({\n *   featureA: featureAReducer,\n *   featureB: featureBReducer\n * });\n * ```\n *\n * You can also override the initial states of the sub-features:\n * ```ts\n * export const reducer = combineReducers({\n *   featureA: featureAReducer,\n *   featureB: featureBReducer\n * }, {\n *   featureA: { counterA: 13 },\n *   featureB: { counterB: 37 }\n * });\n * ```\n */\nexport function combineReducers(\n  reducers: any,\n  initialState: any = {}\n): ActionReducer<any, Action> {\n  const reducerKeys = Object.keys(reducers);\n  const finalReducers: any = {};\n\n  for (let i = 0; i < reducerKeys.length; i++) {\n    const key = reducerKeys[i];\n    if (typeof reducers[key] === 'function') {\n      finalReducers[key] = reducers[key];\n    }\n  }\n\n  const finalReducerKeys = Object.keys(finalReducers);\n\n  return function combination(state, action) {\n    state = state === undefined ? initialState : state;\n    let hasChanged = false;\n    const nextState: any = {};\n    for (let i = 0; i < finalReducerKeys.length; i++) {\n      const key = finalReducerKeys[i];\n      const reducer: any = finalReducers[key];\n      const previousStateForKey = state[key];\n      const nextStateForKey = reducer(previousStateForKey, action);\n\n      nextState[key] = nextStateForKey;\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;\n    }\n    return hasChanged ? nextState : state;\n  };\n}\n\nexport function omit<T extends { [key: string]: any }>(\n  object: T,\n  keyToRemove: keyof T\n): Partial<T> {\n  return Object.keys(object)\n    .filter((key) => key !== keyToRemove)\n    .reduce((result, key) => Object.assign(result, { [key]: object[key] }), {});\n}\n\nexport function compose<A>(): (i: A) => A;\nexport function compose<A, B>(b: (i: A) => B): (i: A) => B;\nexport function compose<A, B, C>(c: (i: B) => C, b: (i: A) => B): (i: A) => C;\nexport function compose<A, B, C, D>(\n  d: (i: C) => D,\n  c: (i: B) => C,\n  b: (i: A) => B\n): (i: A) => D;\nexport function compose<A, B, C, D, E>(\n  e: (i: D) => E,\n  d: (i: C) => D,\n  c: (i: B) => C,\n  b: (i: A) => B\n): (i: A) => E;\nexport function compose<A, B, C, D, E, F>(\n  f: (i: E) => F,\n  e: (i: D) => E,\n  d: (i: C) => D,\n  c: (i: B) => C,\n  b: (i: A) => B\n): (i: A) => F;\nexport function compose<A = any, F = any>(...functions: any[]): (i: A) => F;\nexport function compose(...functions: any[]) {\n  return function (arg: any) {\n    if (functions.length === 0) {\n      return arg;\n    }\n\n    const last = functions[functions.length - 1];\n    const rest = functions.slice(0, -1);\n\n    return rest.reduceRight((composed, fn) => fn(composed), last(arg));\n  };\n}\n\nexport function createReducerFactory<T, V extends Action = Action>(\n  reducerFactory: ActionReducerFactory<T, V>,\n  metaReducers?: MetaReducer<T, V>[]\n): ActionReducerFactory<T, V> {\n  if (Array.isArray(metaReducers) && metaReducers.length > 0) {\n    (reducerFactory as any) = compose.apply(null, [\n      ...metaReducers,\n      reducerFactory,\n    ]);\n  }\n\n  return (reducers: ActionReducerMap<T, V>, initialState?: InitialState<T>) => {\n    const reducer = reducerFactory(reducers);\n    return (state: T | undefined, action: V) => {\n      state = state === undefined ? (initialState as T) : state;\n      return reducer(state, action);\n    };\n  };\n}\n\nexport function createFeatureReducerFactory<T, V extends Action = Action>(\n  metaReducers?: MetaReducer<T, V>[]\n): (reducer: ActionReducer<T, V>, initialState?: T) => ActionReducer<T, V> {\n  const reducerFactory =\n    Array.isArray(metaReducers) && metaReducers.length > 0\n      ? compose<ActionReducer<T, V>>(...metaReducers)\n      : (r: ActionReducer<T, V>) => r;\n\n  return (reducer: ActionReducer<T, V>, initialState?: T) => {\n    reducer = reducerFactory(reducer);\n\n    return (state: T | undefined, action: V) => {\n      state = state === undefined ? initialState : state;\n      return reducer(state, action);\n    };\n  };\n}\n","import { Inject, Injectable, OnDestroy, Provider } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { ActionsSubject } from './actions_subject';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerFactory,\n  ActionReducerMap,\n  StoreFeature,\n} from './models';\nimport { INITIAL_REDUCERS, INITIAL_STATE, REDUCER_FACTORY } from './tokens';\nimport {\n  createFeatureReducerFactory,\n  createReducerFactory,\n  omit,\n} from './utils';\n\nexport abstract class ReducerObservable extends Observable<\n  ActionReducer<any, any>\n> {}\nexport abstract class ReducerManagerDispatcher extends ActionsSubject {}\nexport const UPDATE = '@ngrx/store/update-reducers' as const;\n\n@Injectable()\nexport class ReducerManager\n  extends BehaviorSubject<ActionReducer<any, any>>\n  implements OnDestroy\n{\n  get currentReducers(): ActionReducerMap<any, any> {\n    return this.reducers;\n  }\n\n  constructor(\n    private dispatcher: ReducerManagerDispatcher,\n    @Inject(INITIAL_STATE) private initialState: any,\n    @Inject(INITIAL_REDUCERS) private reducers: ActionReducerMap<any, any>,\n    @Inject(REDUCER_FACTORY)\n    private reducerFactory: ActionReducerFactory<any, any>\n  ) {\n    super(reducerFactory(reducers, initialState));\n  }\n\n  addFeature(feature: StoreFeature<any, any>) {\n    this.addFeatures([feature]);\n  }\n\n  addFeatures(features: StoreFeature<any, any>[]) {\n    const reducers = features.reduce(\n      (\n        reducerDict,\n        { reducers, reducerFactory, metaReducers, initialState, key }\n      ) => {\n        const reducer =\n          typeof reducers === 'function'\n            ? createFeatureReducerFactory(metaReducers)(reducers, initialState)\n            : createReducerFactory(reducerFactory, metaReducers)(\n                reducers,\n                initialState\n              );\n\n        reducerDict[key] = reducer;\n        return reducerDict;\n      },\n      {} as { [key: string]: ActionReducer<any, any> }\n    );\n\n    this.addReducers(reducers);\n  }\n\n  removeFeature(feature: StoreFeature<any, any>) {\n    this.removeFeatures([feature]);\n  }\n\n  removeFeatures(features: StoreFeature<any, any>[]) {\n    this.removeReducers(features.map((p) => p.key));\n  }\n\n  addReducer(key: string, reducer: ActionReducer<any, any>) {\n    this.addReducers({ [key]: reducer });\n  }\n\n  addReducers(reducers: { [key: string]: ActionReducer<any, any> }) {\n    this.reducers = { ...this.reducers, ...reducers };\n    this.updateReducers(Object.keys(reducers));\n  }\n\n  removeReducer(featureKey: string) {\n    this.removeReducers([featureKey]);\n  }\n\n  removeReducers(featureKeys: string[]) {\n    featureKeys.forEach((key) => {\n      this.reducers = omit(this.reducers, key) /*TODO(#823)*/ as any;\n    });\n    this.updateReducers(featureKeys);\n  }\n\n  private updateReducers(featureKeys: string[]) {\n    this.next(this.reducerFactory(this.reducers, this.initialState));\n    this.dispatcher.next(<Action>{\n      type: UPDATE,\n      features: featureKeys,\n    });\n  }\n\n  ngOnDestroy() {\n    this.complete();\n  }\n}\n\nexport const REDUCER_MANAGER_PROVIDERS: Provider[] = [\n  ReducerManager,\n  { provide: ReducerObservable, useExisting: ReducerManager },\n  { provide: ReducerManagerDispatcher, useExisting: ActionsSubject },\n];\n","import { Injectable, OnDestroy, Provider } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { Action } from './models';\n\n@Injectable()\nexport class ScannedActionsSubject\n  extends Subject<Action>\n  implements OnDestroy\n{\n  ngOnDestroy() {\n    this.complete();\n  }\n}\n\nexport const SCANNED_ACTIONS_SUBJECT_PROVIDERS: Provider[] = [\n  ScannedActionsSubject,\n];\n","import { Inject, Injectable, OnDestroy, Provider, Signal } from '@angular/core';\nimport { toSignal } from '@angular/core/rxjs-interop';\nimport {\n  BehaviorSubject,\n  Observable,\n  queueScheduler,\n  Subscription,\n} from 'rxjs';\nimport { observeOn, scan, withLatestFrom } from 'rxjs/operators';\n\nimport { ActionsSubject, INIT } from './actions_subject';\nimport { Action, ActionReducer } from './models';\nimport { ReducerObservable } from './reducer_manager';\nimport { ScannedActionsSubject } from './scanned_actions_subject';\nimport { INITIAL_STATE } from './tokens';\n\nexport abstract class StateObservable extends Observable<any> {\n  /**\n   * @internal\n   */\n  abstract readonly state: Signal<any>;\n}\n\n@Injectable()\nexport class State<T> extends BehaviorSubject<any> implements OnDestroy {\n  static readonly INIT = INIT;\n\n  private stateSubscription: Subscription;\n\n  /**\n   * @internal\n   */\n  public state: Signal<T>;\n\n  constructor(\n    actions$: ActionsSubject,\n    reducer$: ReducerObservable,\n    scannedActions: ScannedActionsSubject,\n    @Inject(INITIAL_STATE) initialState: any\n  ) {\n    super(initialState);\n\n    const actionsOnQueue$: Observable<Action> = actions$.pipe(\n      observeOn(queueScheduler)\n    );\n    const withLatestReducer$: Observable<[Action, ActionReducer<any, Action>]> =\n      actionsOnQueue$.pipe(withLatestFrom(reducer$));\n\n    const seed: StateActionPair<T> = { state: initialState };\n    const stateAndAction$: Observable<{\n      state: any;\n      action?: Action;\n    }> = withLatestReducer$.pipe(\n      scan<[Action, ActionReducer<T, Action>], StateActionPair<T>>(\n        reduceState,\n        seed\n      )\n    );\n\n    this.stateSubscription = stateAndAction$.subscribe(({ state, action }) => {\n      this.next(state);\n      scannedActions.next(action as Action);\n    });\n\n    this.state = toSignal(this, { manualCleanup: true, requireSync: true });\n  }\n\n  ngOnDestroy() {\n    this.stateSubscription.unsubscribe();\n    this.complete();\n  }\n}\n\nexport type StateActionPair<T, V extends Action = Action> = {\n  state: T | undefined;\n  action?: V;\n};\nexport function reduceState<T, V extends Action = Action>(\n  stateActionPair: StateActionPair<T, V> = { state: undefined },\n  [action, reducer]: [V, ActionReducer<T, V>]\n): StateActionPair<T, V> {\n  const { state } = stateActionPair;\n  return { state: reducer(state, action), action };\n}\n\nexport const STATE_PROVIDERS: Provider[] = [\n  State,\n  { provide: StateObservable, useExisting: State },\n];\n","// disabled because we have lowercase generics for `select`\nimport { computed, Injectable, Provider, Signal } from '@angular/core';\nimport { Observable, Observer, Operator } from 'rxjs';\nimport { distinctUntilChanged, map, pluck } from 'rxjs/operators';\n\nimport { ActionsSubject } from './actions_subject';\nimport {\n  Action,\n  ActionReducer,\n  SelectSignalOptions,\n  FunctionIsNotAllowed,\n} from './models';\nimport { ReducerManager } from './reducer_manager';\nimport { StateObservable } from './state';\n\n@Injectable()\nexport class Store<T = object>\n  extends Observable<T>\n  implements Observer<Action>\n{\n  /**\n   * @internal\n   */\n  readonly state: Signal<T>;\n\n  constructor(\n    state$: StateObservable,\n    private actionsObserver: ActionsSubject,\n    private reducerManager: ReducerManager\n  ) {\n    super();\n\n    this.source = state$;\n    this.state = state$.state;\n  }\n\n  select<K>(mapFn: (state: T) => K): Observable<K>;\n  /**\n   * @deprecated Selectors with props are deprecated, for more info see {@link https://github.com/ngrx/platform/issues/2980 Github Issue}\n   */\n  select<K, Props = any>(\n    mapFn: (state: T, props: Props) => K,\n    props: Props\n  ): Observable<K>;\n  select<a extends keyof T>(key: a): Observable<T[a]>;\n  select<a extends keyof T, b extends keyof T[a]>(\n    key1: a,\n    key2: b\n  ): Observable<T[a][b]>;\n  select<a extends keyof T, b extends keyof T[a], c extends keyof T[a][b]>(\n    key1: a,\n    key2: b,\n    key3: c\n  ): Observable<T[a][b][c]>;\n  select<\n    a extends keyof T,\n    b extends keyof T[a],\n    c extends keyof T[a][b],\n    d extends keyof T[a][b][c]\n  >(key1: a, key2: b, key3: c, key4: d): Observable<T[a][b][c][d]>;\n  select<\n    a extends keyof T,\n    b extends keyof T[a],\n    c extends keyof T[a][b],\n    d extends keyof T[a][b][c],\n    e extends keyof T[a][b][c][d]\n  >(key1: a, key2: b, key3: c, key4: d, key5: e): Observable<T[a][b][c][d][e]>;\n  select<\n    a extends keyof T,\n    b extends keyof T[a],\n    c extends keyof T[a][b],\n    d extends keyof T[a][b][c],\n    e extends keyof T[a][b][c][d],\n    f extends keyof T[a][b][c][d][e]\n  >(\n    key1: a,\n    key2: b,\n    key3: c,\n    key4: d,\n    key5: e,\n    key6: f\n  ): Observable<T[a][b][c][d][e][f]>;\n  select<\n    a extends keyof T,\n    b extends keyof T[a],\n    c extends keyof T[a][b],\n    d extends keyof T[a][b][c],\n    e extends keyof T[a][b][c][d],\n    f extends keyof T[a][b][c][d][e],\n    K = any\n  >(\n    key1: a,\n    key2: b,\n    key3: c,\n    key4: d,\n    key5: e,\n    key6: f,\n    ...paths: string[]\n  ): Observable<K>;\n  select<Props = any, K = any>(\n    pathOrMapFn: ((state: T, props?: Props) => K) | string,\n    ...paths: string[]\n  ): Observable<any> {\n    return (select as any).call(null, pathOrMapFn, ...paths)(this);\n  }\n\n  /**\n   * Returns a signal of the provided selector.\n   *\n   * @param selector selector function\n   * @param options select signal options\n   */\n  selectSignal<K>(\n    selector: (state: T) => K,\n    options?: SelectSignalOptions<K>\n  ): Signal<K> {\n    return computed(() => selector(this.state()), {\n      equal: options?.equal || ((previous, current) => previous === current),\n    });\n  }\n\n  override lift<R>(operator: Operator<T, R>): Store<R> {\n    const store = new Store<R>(this, this.actionsObserver, this.reducerManager);\n    store.operator = operator;\n\n    return store;\n  }\n\n  dispatch<V extends Action = Action>(\n    action: V &\n      FunctionIsNotAllowed<\n        V,\n        'Functions are not allowed to be dispatched. Did you forget to call the action creator function?'\n      >\n  ) {\n    this.actionsObserver.next(action);\n  }\n\n  next(action: Action) {\n    this.actionsObserver.next(action);\n  }\n\n  error(err: any) {\n    this.actionsObserver.error(err);\n  }\n\n  complete() {\n    this.actionsObserver.complete();\n  }\n\n  addReducer<State, Actions extends Action = Action>(\n    key: string,\n    reducer: ActionReducer<State, Actions>\n  ) {\n    this.reducerManager.addReducer(key, reducer);\n  }\n\n  removeReducer<Key extends Extract<keyof T, string>>(key: Key) {\n    this.reducerManager.removeReducer(key);\n  }\n}\n\nexport const STORE_PROVIDERS: Provider[] = [Store];\n\nexport function select<T, K>(\n  mapFn: (state: T) => K\n): (source$: Observable<T>) => Observable<K>;\n/**\n * @deprecated Selectors with props are deprecated, for more info see {@link https://github.com/ngrx/platform/issues/2980 Github Issue}\n */\nexport function select<T, Props, K>(\n  mapFn: (state: T, props: Props) => K,\n  props: Props\n): (source$: Observable<T>) => Observable<K>;\nexport function select<T, a extends keyof T>(\n  key: a\n): (source$: Observable<T>) => Observable<T[a]>;\nexport function select<T, a extends keyof T, b extends keyof T[a]>(\n  key1: a,\n  key2: b\n): (source$: Observable<T>) => Observable<T[a][b]>;\nexport function select<\n  T,\n  a extends keyof T,\n  b extends keyof T[a],\n  c extends keyof T[a][b]\n>(\n  key1: a,\n  key2: b,\n  key3: c\n): (source$: Observable<T>) => Observable<T[a][b][c]>;\nexport function select<\n  T,\n  a extends keyof T,\n  b extends keyof T[a],\n  c extends keyof T[a][b],\n  d extends keyof T[a][b][c]\n>(\n  key1: a,\n  key2: b,\n  key3: c,\n  key4: d\n): (source$: Observable<T>) => Observable<T[a][b][c][d]>;\nexport function select<\n  T,\n  a extends keyof T,\n  b extends keyof T[a],\n  c extends keyof T[a][b],\n  d extends keyof T[a][b][c],\n  e extends keyof T[a][b][c][d]\n>(\n  key1: a,\n  key2: b,\n  key3: c,\n  key4: d,\n  key5: e\n): (source$: Observable<T>) => Observable<T[a][b][c][d][e]>;\nexport function select<\n  T,\n  a extends keyof T,\n  b extends keyof T[a],\n  c extends keyof T[a][b],\n  d extends keyof T[a][b][c],\n  e extends keyof T[a][b][c][d],\n  f extends keyof T[a][b][c][d][e]\n>(\n  key1: a,\n  key2: b,\n  key3: c,\n  key4: d,\n  key5: e,\n  key6: f\n): (source$: Observable<T>) => Observable<T[a][b][c][d][e][f]>;\nexport function select<\n  T,\n  a extends keyof T,\n  b extends keyof T[a],\n  c extends keyof T[a][b],\n  d extends keyof T[a][b][c],\n  e extends keyof T[a][b][c][d],\n  f extends keyof T[a][b][c][d][e],\n  K = any\n>(\n  key1: a,\n  key2: b,\n  key3: c,\n  key4: d,\n  key5: e,\n  key6: f,\n  ...paths: string[]\n): (source$: Observable<T>) => Observable<K>;\nexport function select<T, Props, K>(\n  pathOrMapFn: ((state: T, props?: Props) => any) | string,\n  propsOrPath?: Props | string,\n  ...paths: string[]\n) {\n  return function selectOperator(source$: Observable<T>): Observable<K> {\n    let mapped$: Observable<any>;\n\n    if (typeof pathOrMapFn === 'string') {\n      const pathSlices = [<string>propsOrPath, ...paths].filter(Boolean);\n      mapped$ = source$.pipe(pluck(pathOrMapFn, ...pathSlices));\n    } else if (typeof pathOrMapFn === 'function') {\n      mapped$ = source$.pipe(\n        map((source) => pathOrMapFn(source, <Props>propsOrPath))\n      );\n    } else {\n      throw new TypeError(\n        `Unexpected type '${typeof pathOrMapFn}' in select operator,` +\n          ` expected 'string' or 'function'`\n      );\n    }\n\n    return mapped$.pipe(distinctUntilChanged());\n  };\n}\n","export const RUNTIME_CHECK_URL =\n  'https://ngrx.io/guide/store/configuration/runtime-checks';\n\nexport function isUndefined(target: any): target is undefined {\n  return target === undefined;\n}\n\nexport function isNull(target: any): target is null {\n  return target === null;\n}\n\nexport function isArray(target: any): target is Array<any> {\n  return Array.isArray(target);\n}\n\nexport function isString(target: any): target is string {\n  return typeof target === 'string';\n}\n\nexport function isBoolean(target: any): target is boolean {\n  return typeof target === 'boolean';\n}\n\nexport function isNumber(target: any): target is number {\n  return typeof target === 'number';\n}\n\nexport function isObjectLike(target: any): target is object {\n  return typeof target === 'object' && target !== null;\n}\n\nexport function isObject(target: any): target is object {\n  return isObjectLike(target) && !isArray(target);\n}\n\nexport function isPlainObject(target: any): target is object {\n  if (!isObject(target)) {\n    return false;\n  }\n\n  const targetPrototype = Object.getPrototypeOf(target);\n  return targetPrototype === Object.prototype || targetPrototype === null;\n}\n\nexport function isFunction(target: any): target is () => void {\n  return typeof target === 'function';\n}\n\nexport function isComponent(target: any) {\n  return isFunction(target) && target.hasOwnProperty('ɵcmp');\n}\n\nexport function hasOwnProperty(target: object, propertyName: string): boolean {\n  return Object.prototype.hasOwnProperty.call(target, propertyName);\n}\n","let _ngrxMockEnvironment = false;\nexport function setNgrxMockEnvironment(value: boolean): void {\n  _ngrxMockEnvironment = value;\n}\nexport function isNgrxMockEnvironment(): boolean {\n  return _ngrxMockEnvironment;\n}\n","import { Selector, SelectorWithProps } from './models';\nimport { isDevMode } from '@angular/core';\nimport { isNgrxMockEnvironment } from './flags';\n\nexport type AnyFn = (...args: any[]) => any;\n\nexport type MemoizedProjection = {\n  memoized: AnyFn;\n  reset: () => void;\n  setResult: (result?: any) => void;\n  clearResult: () => void;\n};\n\nexport type MemoizeFn = (t: AnyFn) => MemoizedProjection;\n\nexport type ComparatorFn = (a: any, b: any) => boolean;\n\nexport type DefaultProjectorFn<T> = (...args: any[]) => T;\n\nexport interface MemoizedSelector<\n  State,\n  Result,\n  ProjectorFn = DefaultProjectorFn<Result>\n> extends Selector<State, Result> {\n  release(): void;\n  projector: ProjectorFn;\n  setResult: (result?: Result) => void;\n  clearResult: () => void;\n}\n\n/**\n * @deprecated Selectors with props are deprecated, for more info see {@link https://github.com/ngrx/platform/issues/2980 Github Issue}\n */\nexport interface MemoizedSelectorWithProps<\n  State,\n  Props,\n  Result,\n  ProjectorFn = DefaultProjectorFn<Result>\n> extends SelectorWithProps<State, Props, Result> {\n  release(): void;\n  projector: ProjectorFn;\n  setResult: (result?: Result) => void;\n  clearResult: () => void;\n}\n\nexport function isEqualCheck(a: any, b: any): boolean {\n  return a === b;\n}\n\nfunction isArgumentsChanged(\n  args: IArguments,\n  lastArguments: IArguments,\n  comparator: ComparatorFn\n) {\n  for (let i = 0; i < args.length; i++) {\n    if (!comparator(args[i], lastArguments[i])) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport function resultMemoize(\n  projectionFn: AnyFn,\n  isResultEqual: ComparatorFn\n) {\n  return defaultMemoize(projectionFn, isEqualCheck, isResultEqual);\n}\n\nexport function defaultMemoize(\n  projectionFn: AnyFn,\n  isArgumentsEqual = isEqualCheck,\n  isResultEqual = isEqualCheck\n): MemoizedProjection {\n  let lastArguments: null | IArguments = null;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, , , , ,\n  let lastResult: any = null;\n  let overrideResult: any;\n\n  function reset() {\n    lastArguments = null;\n    lastResult = null;\n  }\n\n  function setResult(result: any = undefined) {\n    overrideResult = { result };\n  }\n\n  function clearResult() {\n    overrideResult = undefined;\n  }\n\n  /* eslint-disable prefer-rest-params, prefer-spread */\n\n  // disabled because of the use of `arguments`\n  function memoized(): any {\n    if (overrideResult !== undefined) {\n      return overrideResult.result;\n    }\n\n    if (!lastArguments) {\n      lastResult = projectionFn.apply(null, arguments as any);\n      lastArguments = arguments;\n      return lastResult;\n    }\n\n    if (!isArgumentsChanged(arguments, lastArguments, isArgumentsEqual)) {\n      return lastResult;\n    }\n\n    const newResult = projectionFn.apply(null, arguments as any);\n    lastArguments = arguments;\n\n    if (isResultEqual(lastResult, newResult)) {\n      return lastResult;\n    }\n\n    lastResult = newResult;\n\n    return newResult;\n  }\n\n  return { memoized, reset, setResult, clearResult };\n}\n\nexport function createSelector<State, S1, Result>(\n  s1: Selector<State, S1>,\n  projector: (s1: S1) => Result\n): MemoizedSelector<State, Result, typeof projector>;\nexport function createSelector<State, S1, S2, Result>(\n  s1: Selector<State, S1>,\n  s2: Selector<State, S2>,\n  projector: (s1: S1, s2: S2) => Result\n): MemoizedSelector<State, Result, typeof projector>;\nexport function createSelector<State, S1, S2, S3, Result>(\n  s1: Selector<State, S1>,\n  s2: Selector<State, S2>,\n  s3: Selector<State, S3>,\n  projector: (s1: S1, s2: S2, s3: S3) => Result\n): MemoizedSelector<State, Result, typeof projector>;\nexport function createSelector<State, S1, S2, S3, S4, Result>(\n  s1: Selector<State, S1>,\n  s2: Selector<State, S2>,\n  s3: Selector<State, S3>,\n  s4: Selector<State, S4>,\n  projector: (s1: S1, s2: S2, s3: S3, s4: S4) => Result\n): MemoizedSelector<State, Result, typeof projector>;\nexport function createSelector<State, S1, S2, S3, S4, S5, Result>(\n  s1: Selector<State, S1>,\n  s2: Selector<State, S2>,\n  s3: Selector<State, S3>,\n  s4: Selector<State, S4>,\n  s5: Selector<State, S5>,\n  projector: (s1: S1, s2: S2, s3: S3, s4: S4, s5: S5) => Result\n): MemoizedSelector<State, Result, typeof projector>;\nexport function createSelector<State, S1, S2, S3, S4, S5, S6, Result>(\n  s1: Selector<State, S1>,\n  s2: Selector<State, S2>,\n  s3: Selector<State, S3>,\n  s4: Selector<State, S4>,\n  s5: Selector<State, S5>,\n  s6: Selector<State, S6>,\n  projector: (s1: S1, s2: S2, s3: S3, s4: S4, s5: S5, s6: S6) => Result\n): MemoizedSelector<State, Result, typeof projector>;\nexport function createSelector<State, S1, S2, S3, S4, S5, S6, S7, Result>(\n  s1: Selector<State, S1>,\n  s2: Selector<State, S2>,\n  s3: Selector<State, S3>,\n  s4: Selector<State, S4>,\n  s5: Selector<State, S5>,\n  s6: Selector<State, S6>,\n  s7: Selector<State, S7>,\n  projector: (s1: S1, s2: S2, s3: S3, s4: S4, s5: S5, s6: S6, s7: S7) => Result\n): MemoizedSelector<State, Result, typeof projector>;\nexport function createSelector<State, S1, S2, S3, S4, S5, S6, S7, S8, Result>(\n  s1: Selector<State, S1>,\n  s2: Selector<State, S2>,\n  s3: Selector<State, S3>,\n  s4: Selector<State, S4>,\n  s5: Selector<State, S5>,\n  s6: Selector<State, S6>,\n  s7: Selector<State, S7>,\n  s8: Selector<State, S8>,\n  projector: (\n    s1: S1,\n    s2: S2,\n    s3: S3,\n    s4: S4,\n    s5: S5,\n    s6: S6,\n    s7: S7,\n    s8: S8\n  ) => Result\n): MemoizedSelector<State, Result, typeof projector>;\n\nexport function createSelector<\n  Selectors extends Record<string, Selector<State, unknown>>,\n  State = Selectors extends Record<string, Selector<infer S, unknown>>\n    ? S\n    : never,\n  Result extends Record<string, unknown> = {\n    [Key in keyof Selectors]: Selectors[Key] extends Selector<State, infer R>\n      ? R\n      : never;\n  }\n>(selectors: Selectors): MemoizedSelector<State, Result, never>;\n\nexport function createSelector<State, Slices extends unknown[], Result>(\n  ...args: [...slices: Selector<State, unknown>[], projector: unknown] &\n    [\n      ...slices: { [i in keyof Slices]: Selector<State, Slices[i]> },\n      projector: (...s: Slices) => Result\n    ]\n): MemoizedSelector<State, Result, (...s: Slices) => Result>;\n\n/**\n * @deprecated Selectors with props are deprecated, for more info see {@link https://github.com/ngrx/platform/issues/2980 Github Issue}\n */\nexport function createSelector<State, Props, S1, Result>(\n  s1: SelectorWithProps<State, Props, S1>,\n  projector: (s1: S1, props: Props) => Result\n): MemoizedSelectorWithProps<State, Props, Result, typeof projector>;\n\n/**\n * @deprecated Selectors with props are deprecated, for more info see {@link https://github.com/ngrx/platform/issues/2980 Github Issue}\n */\nexport function createSelector<State, Props, S1, S2, Result>(\n  s1: SelectorWithProps<State, Props, S1>,\n  s2: SelectorWithProps<State, Props, S2>,\n  projector: (s1: S1, s2: S2, props: Props) => Result\n): MemoizedSelectorWithProps<State, Props, Result, typeof projector>;\n\n/**\n * @deprecated Selectors with props are deprecated, for more info see {@link https://github.com/ngrx/platform/issues/2980 Github Issue}\n */\nexport function createSelector<State, Props, S1, S2, S3, Result>(\n  s1: SelectorWithProps<State, Props, S1>,\n  s2: SelectorWithProps<State, Props, S2>,\n  s3: SelectorWithProps<State, Props, S3>,\n  projector: (s1: S1, s2: S2, s3: S3, props: Props) => Result\n): MemoizedSelectorWithProps<State, Props, Result, typeof projector>;\n\n/**\n * @deprecated Selectors with props are deprecated, for more info see {@link https://github.com/ngrx/platform/issues/2980 Github Issue}\n */\nexport function createSelector<State, Props, S1, S2, S3, S4, Result>(\n  s1: SelectorWithProps<State, Props, S1>,\n  s2: SelectorWithProps<State, Props, S2>,\n  s3: SelectorWithProps<State, Props, S3>,\n  s4: SelectorWithProps<State, Props, S4>,\n  projector: (s1: S1, s2: S2, s3: S3, s4: S4, props: Props) => Result\n): MemoizedSelectorWithProps<State, Props, Result, typeof projector>;\n\n/**\n * @deprecated Selectors with props are deprecated, for more info see {@link https://github.com/ngrx/platform/issues/2980 Github Issue}\n */\nexport function createSelector<State, Props, S1, S2, S3, S4, S5, Result>(\n  s1: SelectorWithProps<State, Props, S1>,\n  s2: SelectorWithProps<State, Props, S2>,\n  s3: SelectorWithProps<State, Props, S3>,\n  s4: SelectorWithProps<State, Props, S4>,\n  s5: SelectorWithProps<State, Props, S5>,\n  projector: (s1: S1, s2: S2, s3: S3, s4: S4, s5: S5, props: Props) => Result\n): MemoizedSelectorWithProps<State, Props, Result, typeof projector>;\n\n/**\n * @deprecated Selectors with props are deprecated, for more info see {@link https://github.com/ngrx/platform/issues/2980 Github Issue}\n */\nexport function createSelector<State, Props, S1, S2, S3, S4, S5, S6, Result>(\n  s1: SelectorWithProps<State, Props, S1>,\n  s2: SelectorWithProps<State, Props, S2>,\n  s3: SelectorWithProps<State, Props, S3>,\n  s4: SelectorWithProps<State, Props, S4>,\n  s5: SelectorWithProps<State, Props, S5>,\n  s6: SelectorWithProps<State, Props, S6>,\n  projector: (\n    s1: S1,\n    s2: S2,\n    s3: S3,\n    s4: S4,\n    s5: S5,\n    s6: S6,\n    props: Props\n  ) => Result\n): MemoizedSelectorWithProps<State, Props, Result, typeof projector>;\n\n/**\n * @deprecated Selectors with props are deprecated, for more info see {@link https://github.com/ngrx/platform/issues/2980 Github Issue}\n */\nexport function createSelector<\n  State,\n  Props,\n  S1,\n  S2,\n  S3,\n  S4,\n  S5,\n  S6,\n  S7,\n  Result\n>(\n  s1: SelectorWithProps<State, Props, S1>,\n  s2: SelectorWithProps<State, Props, S2>,\n  s3: SelectorWithProps<State, Props, S3>,\n  s4: SelectorWithProps<State, Props, S4>,\n  s5: SelectorWithProps<State, Props, S5>,\n  s6: SelectorWithProps<State, Props, S6>,\n  s7: SelectorWithProps<State, Props, S7>,\n  projector: (\n    s1: S1,\n    s2: S2,\n    s3: S3,\n    s4: S4,\n    s5: S5,\n    s6: S6,\n    s7: S7,\n    props: Props\n  ) => Result\n): MemoizedSelectorWithProps<State, Props, Result, typeof projector>;\n\n/**\n * @deprecated Selectors with props are deprecated, for more info see {@link https://github.com/ngrx/platform/issues/2980 Github Issue}\n */\nexport function createSelector<\n  State,\n  Props,\n  S1,\n  S2,\n  S3,\n  S4,\n  S5,\n  S6,\n  S7,\n  S8,\n  Result\n>(\n  s1: SelectorWithProps<State, Props, S1>,\n  s2: SelectorWithProps<State, Props, S2>,\n  s3: SelectorWithProps<State, Props, S3>,\n  s4: SelectorWithProps<State, Props, S4>,\n  s5: SelectorWithProps<State, Props, S5>,\n  s6: SelectorWithProps<State, Props, S6>,\n  s7: SelectorWithProps<State, Props, S7>,\n  s8: SelectorWithProps<State, Props, S8>,\n  projector: (\n    s1: S1,\n    s2: S2,\n    s3: S3,\n    s4: S4,\n    s5: S5,\n    s6: S6,\n    s7: S7,\n    s8: S8,\n    props: Props\n  ) => Result\n): MemoizedSelectorWithProps<State, Props, Result, typeof projector>;\n\nexport function createSelector<State, Slices extends unknown[], Result>(\n  selectors: Selector<State, unknown>[] &\n    [...{ [i in keyof Slices]: Selector<State, Slices[i]> }],\n  projector: (...s: Slices) => Result\n): MemoizedSelector<State, Result, (...s: Slices) => Result>;\n\n/**\n * @deprecated Selectors with props are deprecated, for more info see {@link https://github.com/ngrx/platform/issues/2980 Github Issue}\n */\nexport function createSelector<State, Props, S1, Result>(\n  selectors: [SelectorWithProps<State, Props, S1>],\n  projector: (s1: S1, props: Props) => Result\n): MemoizedSelectorWithProps<State, Props, Result, typeof projector>;\n\n/**\n * @deprecated Selectors with props are deprecated, for more info see {@link https://github.com/ngrx/platform/issues/2980 Github Issue}\n */\nexport function createSelector<State, Props, S1, S2, Result>(\n  selectors: [\n    SelectorWithProps<State, Props, S1>,\n    SelectorWithProps<State, Props, S2>\n  ],\n  projector: (s1: S1, s2: S2, props: Props) => Result\n): MemoizedSelectorWithProps<State, Props, Result, typeof projector>;\n\n/**\n * @deprecated Selectors with props are deprecated, for more info see {@link https://github.com/ngrx/platform/issues/2980 Github Issue}\n */\nexport function createSelector<State, Props, S1, S2, S3, Result>(\n  selectors: [\n    SelectorWithProps<State, Props, S1>,\n    SelectorWithProps<State, Props, S2>,\n    SelectorWithProps<State, Props, S3>\n  ],\n  projector: (s1: S1, s2: S2, s3: S3, props: Props) => Result\n): MemoizedSelectorWithProps<State, Props, Result, typeof projector>;\n\n/**\n * @deprecated Selectors with props are deprecated, for more info see {@link https://github.com/ngrx/platform/issues/2980 Github Issue}\n */\nexport function createSelector<State, Props, S1, S2, S3, S4, Result>(\n  selectors: [\n    SelectorWithProps<State, Props, S1>,\n    SelectorWithProps<State, Props, S2>,\n    SelectorWithProps<State, Props, S3>,\n    SelectorWithProps<State, Props, S4>\n  ],\n  projector: (s1: S1, s2: S2, s3: S3, s4: S4, props: Props) => Result\n): MemoizedSelectorWithProps<State, Props, Result, typeof projector>;\n\n/**\n * @deprecated Selectors with props are deprecated, for more info see {@link https://github.com/ngrx/platform/issues/2980 Github Issue}\n */\nexport function createSelector<State, Props, S1, S2, S3, S4, S5, Result>(\n  selectors: [\n    SelectorWithProps<State, Props, S1>,\n    SelectorWithProps<State, Props, S2>,\n    SelectorWithProps<State, Props, S3>,\n    SelectorWithProps<State, Props, S4>,\n    SelectorWithProps<State, Props, S5>\n  ],\n  projector: (s1: S1, s2: S2, s3: S3, s4: S4, s5: S5, props: Props) => Result\n): MemoizedSelectorWithProps<State, Props, Result, typeof projector>;\n\n/**\n * @deprecated Selectors with props are deprecated, for more info see {@link https://github.com/ngrx/platform/issues/2980 Github Issue}\n */\nexport function createSelector<State, Props, S1, S2, S3, S4, S5, S6, Result>(\n  selectors: [\n    SelectorWithProps<State, Props, S1>,\n    SelectorWithProps<State, Props, S2>,\n    SelectorWithProps<State, Props, S3>,\n    SelectorWithProps<State, Props, S4>,\n    SelectorWithProps<State, Props, S5>,\n    SelectorWithProps<State, Props, S6>\n  ],\n  projector: (\n    s1: S1,\n    s2: S2,\n    s3: S3,\n    s4: S4,\n    s5: S5,\n    s6: S6,\n    props: Props\n  ) => Result\n): MemoizedSelectorWithProps<State, Props, Result, typeof projector>;\n\n/**\n * @deprecated Selectors with props are deprecated, for more info see {@link https://github.com/ngrx/platform/issues/2980 Github Issue}\n */\nexport function createSelector<\n  State,\n  Props,\n  S1,\n  S2,\n  S3,\n  S4,\n  S5,\n  S6,\n  S7,\n  Result\n>(\n  selectors: [\n    SelectorWithProps<State, Props, S1>,\n    SelectorWithProps<State, Props, S2>,\n    SelectorWithProps<State, Props, S3>,\n    SelectorWithProps<State, Props, S4>,\n    SelectorWithProps<State, Props, S5>,\n    SelectorWithProps<State, Props, S6>,\n    SelectorWithProps<State, Props, S7>\n  ],\n  projector: (\n    s1: S1,\n    s2: S2,\n    s3: S3,\n    s4: S4,\n    s5: S5,\n    s6: S6,\n    s7: S7,\n    props: Props\n  ) => Result\n): MemoizedSelectorWithProps<State, Props, Result, typeof projector>;\n\n/**\n * @deprecated Selectors with props are deprecated, for more info see {@link https://github.com/ngrx/platform/issues/2980 Github Issue}\n */\nexport function createSelector<\n  State,\n  Props,\n  S1,\n  S2,\n  S3,\n  S4,\n  S5,\n  S6,\n  S7,\n  S8,\n  Result\n>(\n  selectors: [\n    SelectorWithProps<State, Props, S1>,\n    SelectorWithProps<State, Props, S2>,\n    SelectorWithProps<State, Props, S3>,\n    SelectorWithProps<State, Props, S4>,\n    SelectorWithProps<State, Props, S5>,\n    SelectorWithProps<State, Props, S6>,\n    SelectorWithProps<State, Props, S7>,\n    SelectorWithProps<State, Props, S8>\n  ],\n  projector: (\n    s1: S1,\n    s2: S2,\n    s3: S3,\n    s4: S4,\n    s5: S5,\n    s6: S6,\n    s7: S7,\n    s8: S8,\n    props: Props\n  ) => Result\n): MemoizedSelectorWithProps<State, Props, Result, typeof projector>;\n\nexport function createSelector(\n  ...input: any[]\n): MemoizedSelector<any, any> | MemoizedSelectorWithProps<any, any, any> {\n  return createSelectorFactory(defaultMemoize)(...input);\n}\n\nexport function defaultStateFn(\n  state: any,\n  selectors: Selector<any, any>[] | SelectorWithProps<any, any, any>[],\n  props: any,\n  memoizedProjector: MemoizedProjection\n): any {\n  if (props === undefined) {\n    const args = (<Selector<any, any>[]>selectors).map((fn) => fn(state));\n    return memoizedProjector.memoized.apply(null, args);\n  }\n\n  const args = (<SelectorWithProps<any, any, any>[]>selectors).map((fn) =>\n    fn(state, props)\n  );\n  return memoizedProjector.memoized.apply(null, [...args, props]);\n}\n\nexport type SelectorFactoryConfig<T = any, V = any> = {\n  stateFn: (\n    state: T,\n    selectors: Selector<any, any>[],\n    props: any,\n    memoizedProjector: MemoizedProjection\n  ) => V;\n};\n\nexport function createSelectorFactory<T = any, V = any>(\n  memoize: MemoizeFn\n): (...input: any[]) => MemoizedSelector<T, V>;\nexport function createSelectorFactory<T = any, V = any>(\n  memoize: MemoizeFn,\n  options: SelectorFactoryConfig<T, V>\n): (...input: any[]) => MemoizedSelector<T, V>;\n/**\n * @deprecated Selectors with props are deprecated, for more info see {@link https://github.com/ngrx/platform/issues/2980 Github Issue}\n */\nexport function createSelectorFactory<T = any, Props = any, V = any>(\n  memoize: MemoizeFn\n): (...input: any[]) => MemoizedSelectorWithProps<T, Props, V>;\n/**\n * @deprecated Selectors with props are deprecated, for more info see {@link https://github.com/ngrx/platform/issues/2980 Github Issue}\n */\nexport function createSelectorFactory<T = any, Props = any, V = any>(\n  memoize: MemoizeFn,\n  options: SelectorFactoryConfig<T, V>\n): (...input: any[]) => MemoizedSelectorWithProps<T, Props, V>;\n/**\n *\n * @param memoize The function used to memoize selectors\n * @param options Config Object that may include a `stateFn` function defining how to return the selector's value, given the entire `Store`'s state, parent `Selector`s, `Props`, and a `MemoizedProjection`\n *\n * @usageNotes\n *\n * **Creating a Selector Factory Where Array Order Does Not Matter**\n *\n * ```ts\n * function removeMatch(arr: string[], target: string): string[] {\n *   const matchIndex = arr.indexOf(target);\n *   return [...arr.slice(0, matchIndex), ...arr.slice(matchIndex + 1)];\n * }\n *\n * function orderDoesNotMatterComparer(a: any, b: any): boolean {\n *   if (!Array.isArray(a) || !Array.isArray(b)) {\n *     return a === b;\n *   }\n *   if (a.length !== b.length) {\n *     return false;\n *   }\n *   let tempB = [...b];\n *   function reduceToDetermineIfArraysContainSameContents(\n *     previousCallResult: boolean,\n *     arrayMember: any\n *   ): boolean {\n *     if (previousCallResult === false) {\n *       return false;\n *     }\n *     if (tempB.includes(arrayMember)) {\n *       tempB = removeMatch(tempB, arrayMember);\n *       return true;\n *     }\n *     return false;\n *   }\n *   return a.reduce(reduceToDetermineIfArraysContainSameContents, true);\n * }\n *\n * export const createOrderDoesNotMatterSelector = createSelectorFactory(\n *   (projectionFun) => defaultMemoize(\n *     projectionFun,\n *     orderDoesNotMatterComparer,\n *     orderDoesNotMatterComparer\n *   )\n * );\n * ```\n *\n * **Creating an Alternative Memoization Strategy**\n *\n * ```ts\n * function serialize(x: any): string {\n *   return JSON.stringify(x);\n * }\n *\n * export const createFullHistorySelector = createSelectorFactory(\n *  (projectionFunction) => {\n *    const cache = {};\n *\n *    function memoized() {\n *      const serializedArguments = serialize(...arguments);\n *       if (cache[serializedArguments] != null) {\n *         cache[serializedArguments] = projectionFunction.apply(null, arguments);\n *       }\n *       return cache[serializedArguments];\n *     }\n *     return {\n *       memoized,\n *       reset: () => {},\n *       setResult: () => {},\n *       clearResult: () => {},\n *     };\n *   }\n * );\n * ```\n */\nexport function createSelectorFactory(\n  memoize: MemoizeFn,\n  options: SelectorFactoryConfig<any, any> = {\n    stateFn: defaultStateFn,\n  }\n) {\n  return function (\n    ...input: any[]\n  ): MemoizedSelector<any, any> | MemoizedSelectorWithProps<any, any, any> {\n    let args = input;\n    if (Array.isArray(args[0])) {\n      const [head, ...tail] = args;\n      args = [...head, ...tail];\n    } else if (args.length === 1 && isSelectorsDictionary(args[0])) {\n      args = extractArgsFromSelectorsDictionary(args[0]);\n    }\n\n    const selectors = args.slice(0, args.length - 1);\n    const projector = args[args.length - 1];\n    const memoizedSelectors = selectors.filter(\n      (selector: any) =>\n        selector.release && typeof selector.release === 'function'\n    );\n\n    const memoizedProjector = memoize(function (...selectors: any[]) {\n      return projector.apply(null, selectors);\n    });\n\n    const memoizedState = defaultMemoize(function (state: any, props: any) {\n      return options.stateFn.apply(null, [\n        state,\n        selectors,\n        props,\n        memoizedProjector,\n      ]);\n    });\n\n    function release() {\n      memoizedState.reset();\n      memoizedProjector.reset();\n\n      memoizedSelectors.forEach((selector) => selector.release());\n    }\n\n    return Object.assign(memoizedState.memoized, {\n      release,\n      projector: memoizedProjector.memoized,\n      setResult: memoizedState.setResult,\n      clearResult: memoizedState.clearResult,\n    });\n  };\n}\n\nexport function createFeatureSelector<T>(\n  featureName: string\n): MemoizedSelector<object, T>;\n/**\n * @deprecated  Feature selectors with a root state are deprecated, for more info see {@link https://github.com/ngrx/platform/issues/3179 Github Issue}\n */\nexport function createFeatureSelector<T, V>(\n  featureName: keyof T\n): MemoizedSelector<T, V>;\nexport function createFeatureSelector(\n  featureName: any\n): MemoizedSelector<any, any> {\n  return createSelector(\n    (state: any) => {\n      const featureState = state[featureName];\n      if (!isNgrxMockEnvironment() && isDevMode() && !(featureName in state)) {\n        console.warn(\n          `@ngrx/store: The feature name \"${featureName}\" does ` +\n            'not exist in the state, therefore createFeatureSelector ' +\n            'cannot access it.  Be sure it is imported in a loaded module ' +\n            `using StoreModule.forRoot('${featureName}', ...) or ` +\n            `StoreModule.forFeature('${featureName}', ...).  If the default ` +\n            'state is intended to be undefined, as is the case with router ' +\n            'state, this development-only warning message can be ignored.'\n        );\n      }\n      return featureState;\n    },\n    (featureState: any) => featureState\n  );\n}\n\nfunction isSelectorsDictionary(\n  selectors: unknown\n): selectors is Record<string, Selector<unknown, unknown>> {\n  return (\n    !!selectors &&\n    typeof selectors === 'object' &&\n    Object.values(selectors).every((selector) => typeof selector === 'function')\n  );\n}\n\nfunction extractArgsFromSelectorsDictionary(\n  selectorsDictionary: Record<string, Selector<unknown, unknown>>\n): [\n  ...selectors: Selector<unknown, unknown>[],\n  projector: (...selectorResults: unknown[]) => unknown\n] {\n  const selectors = Object.values(selectorsDictionary);\n  const resultKeys = Object.keys(selectorsDictionary);\n  const projector = (...selectorResults: unknown[]) =>\n    resultKeys.reduce(\n      (result, key, index) => ({\n        ...result,\n        [key]: selectorResults[index],\n      }),\n      {}\n    );\n\n  return [...selectors, projector];\n}\n","import { capitalize } from './helpers';\nimport { ActionReducer, Prettify, Primitive, Selector } from './models';\nimport { isPlainObject } from './meta-reducers/utils';\nimport {\n  createFeatureSelector,\n  createSelector,\n  MemoizedSelector,\n} from './selector';\n\nexport interface FeatureConfig<FeatureName extends string, FeatureState> {\n  name: FeatureName;\n  reducer: ActionReducer<FeatureState>;\n}\n\ntype Feature<FeatureName extends string, FeatureState> = FeatureConfig<\n  FeatureName,\n  FeatureState\n> &\n  BaseSelectors<FeatureName, FeatureState>;\n\ntype FeatureWithExtraSelectors<\n  FeatureName extends string,\n  FeatureState,\n  ExtraSelectors extends SelectorsDictionary\n> = string extends keyof ExtraSelectors\n  ? Feature<FeatureName, FeatureState>\n  : Omit<Feature<FeatureName, FeatureState>, keyof ExtraSelectors> &\n      ExtraSelectors;\n\ntype FeatureSelector<FeatureName extends string, FeatureState> = {\n  [K in FeatureName as `select${Capitalize<K>}State`]: MemoizedSelector<\n    Record<string, any>,\n    FeatureState,\n    (featureState: FeatureState) => FeatureState\n  >;\n};\n\ntype NestedSelectors<FeatureState> = FeatureState extends\n  | Primitive\n  | unknown[]\n  | Date\n  ? {}\n  : {\n      [K in keyof FeatureState &\n        string as `select${Capitalize<K>}`]: MemoizedSelector<\n        Record<string, any>,\n        FeatureState[K],\n        (featureState: FeatureState) => FeatureState[K]\n      >;\n    };\n\ntype BaseSelectors<FeatureName extends string, FeatureState> = FeatureSelector<\n  FeatureName,\n  FeatureState\n> &\n  NestedSelectors<FeatureState>;\n\ntype SelectorsDictionary = Record<\n  string,\n  | Selector<Record<string, any>, unknown>\n  | ((...args: any[]) => Selector<Record<string, any>, unknown>)\n>;\n\ntype ExtraSelectorsFactory<\n  FeatureName extends string,\n  FeatureState,\n  ExtraSelectors extends SelectorsDictionary\n> = (baseSelectors: BaseSelectors<FeatureName, FeatureState>) => ExtraSelectors;\n\ntype NotAllowedFeatureStateCheck<FeatureState> =\n  FeatureState extends Required<FeatureState>\n    ? unknown\n    : 'optional properties are not allowed in the feature state';\n\n/**\n * Creates a feature object with extra selectors.\n *\n * @param featureConfig An object that contains a feature name, a feature\n * reducer, and extra selectors factory.\n * @returns An object that contains a feature name, a feature reducer,\n * a feature selector, a selector for each feature state property, and\n * extra selectors.\n */\nexport function createFeature<\n  FeatureName extends string,\n  FeatureState,\n  ExtraSelectors extends SelectorsDictionary\n>(\n  featureConfig: FeatureConfig<FeatureName, FeatureState> & {\n    extraSelectors: ExtraSelectorsFactory<\n      FeatureName,\n      FeatureState,\n      ExtraSelectors\n    >;\n  } & NotAllowedFeatureStateCheck<FeatureState>\n): Prettify<\n  FeatureWithExtraSelectors<FeatureName, FeatureState, ExtraSelectors>\n>;\n/**\n * Creates a feature object.\n *\n * @param featureConfig An object that contains a feature name and a feature\n * reducer.\n * @returns An object that contains a feature name, a feature reducer,\n * a feature selector, and a selector for each feature state property.\n */\nexport function createFeature<FeatureName extends string, FeatureState>(\n  featureConfig: FeatureConfig<FeatureName, FeatureState> &\n    NotAllowedFeatureStateCheck<FeatureState>\n): Prettify<Feature<FeatureName, FeatureState>>;\n/**\n * @description\n * A function that accepts a feature name and a feature reducer, and creates\n * a feature selector and a selector for each feature state property.\n * This function also provides the ability to add extra selectors to\n * the feature object.\n *\n * @param featureConfig An object that contains a feature name and a feature\n * reducer as required, and extra selectors factory as an optional argument.\n * @returns An object that contains a feature name, a feature reducer,\n * a feature selector, a selector for each feature state property, and extra\n * selectors.\n *\n * @usageNotes\n *\n * ```ts\n * interface ProductsState {\n *   products: Product[];\n *   selectedId: string | null;\n * }\n *\n * const initialState: ProductsState = {\n *   products: [],\n *   selectedId: null,\n * };\n *\n * const productsFeature = createFeature({\n *   name: 'products',\n *   reducer: createReducer(\n *     initialState,\n *     on(ProductsApiActions.loadSuccess(state, { products }) => ({\n *       ...state,\n *       products,\n *     }),\n *   ),\n * });\n *\n * const {\n *   name,\n *   reducer,\n *   // feature selector\n *   selectProductsState, // type: MemoizedSelector<Record<string, any>, ProductsState>\n *   // feature state properties selectors\n *   selectProducts, // type: MemoizedSelector<Record<string, any>, Product[]>\n *   selectSelectedId, // type: MemoizedSelector<Record<string, any>, string | null>\n * } = productsFeature;\n * ```\n *\n * **Creating Feature with Extra Selectors**\n *\n * ```ts\n * type CallState = 'init' | 'loading' | 'loaded' | { error: string };\n *\n * interface State extends EntityState<Product> {\n *   callState: CallState;\n * }\n *\n * const adapter = createEntityAdapter<Product>();\n * const initialState: State = adapter.getInitialState({\n *   callState: 'init',\n * });\n *\n * export const productsFeature = createFeature({\n *   name: 'products',\n *   reducer: createReducer(initialState),\n *   extraSelectors: ({ selectProductsState, selectCallState }) => ({\n *     ...adapter.getSelectors(selectProductsState),\n *     ...getCallStateSelectors(selectCallState)\n *   }),\n * });\n *\n * const {\n *   name,\n *   reducer,\n *   // feature selector\n *   selectProductsState,\n *   // feature state properties selectors\n *   selectIds,\n *   selectEntities,\n *   selectCallState,\n *   // selectors returned by `adapter.getSelectors`\n *   selectAll,\n *   selectTotal,\n *   // selectors returned by `getCallStateSelectors`\n *   selectIsLoading,\n *   selectIsLoaded,\n *   selectError,\n * } = productsFeature;\n * ```\n */\nexport function createFeature<\n  FeatureName extends string,\n  FeatureState,\n  ExtraSelectors extends SelectorsDictionary\n>(\n  featureConfig: FeatureConfig<FeatureName, FeatureState> & {\n    extraSelectors?: ExtraSelectorsFactory<\n      FeatureName,\n      FeatureState,\n      ExtraSelectors\n    >;\n  }\n): Feature<FeatureName, FeatureState> & ExtraSelectors {\n  const {\n    name,\n    reducer,\n    extraSelectors: extraSelectorsFactory,\n  } = featureConfig;\n\n  const featureSelector = createFeatureSelector<FeatureState>(name);\n  const nestedSelectors = createNestedSelectors(featureSelector, reducer);\n  const baseSelectors = {\n    [`select${capitalize(name)}State`]: featureSelector,\n    ...nestedSelectors,\n  } as BaseSelectors<FeatureName, FeatureState>;\n  const extraSelectors = extraSelectorsFactory\n    ? extraSelectorsFactory(baseSelectors)\n    : {};\n\n  return {\n    name,\n    reducer,\n    ...baseSelectors,\n    ...extraSelectors,\n  } as Feature<FeatureName, FeatureState> & ExtraSelectors;\n}\n\nfunction createNestedSelectors<FeatureState>(\n  featureSelector: MemoizedSelector<Record<string, any>, FeatureState>,\n  reducer: ActionReducer<FeatureState>\n): NestedSelectors<FeatureState> {\n  const initialState = getInitialState(reducer);\n  const nestedKeys = (\n    isPlainObject(initialState) ? Object.keys(initialState) : []\n  ) as Array<keyof FeatureState & string>;\n\n  return nestedKeys.reduce(\n    (nestedSelectors, nestedKey) => ({\n      ...nestedSelectors,\n      [`select${capitalize(nestedKey)}`]: createSelector(\n        featureSelector,\n        (parentState) => parentState?.[nestedKey]\n      ),\n    }),\n    {} as NestedSelectors<FeatureState>\n  );\n}\n\nfunction getInitialState<FeatureState>(\n  reducer: ActionReducer<FeatureState>\n): FeatureState {\n  return reducer(undefined, { type: '@ngrx/feature/init' });\n}\n","import { inject, InjectionToken } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  ActionReducerFactory,\n  StoreFeature,\n  InitialState,\n  MetaReducer,\n  RuntimeChecks,\n} from './models';\nimport { combineReducers } from './utils';\nimport { Store } from './store';\n\nexport interface StoreConfig<T, V extends Action = Action> {\n  initialState?: InitialState<T>;\n  reducerFactory?: ActionReducerFactory<T, V>;\n  metaReducers?: MetaReducer<{ [P in keyof T]: T[P] }, V>[];\n}\n\nexport interface RootStoreConfig<T, V extends Action = Action>\n  extends StoreConfig<T, V> {\n  runtimeChecks?: Partial<RuntimeChecks>;\n}\n\n/**\n * An object with the name and the reducer for the feature.\n */\nexport interface FeatureSlice<T, V extends Action = Action> {\n  name: string;\n  reducer: ActionReducer<T, V>;\n}\n\nexport function _createStoreReducers<T, V extends Action = Action>(\n  reducers: ActionReducerMap<T, V> | InjectionToken<ActionReducerMap<T, V>>\n): ActionReducerMap<T, V> {\n  return reducers instanceof InjectionToken ? inject(reducers) : reducers;\n}\n\nexport function _createFeatureStore<T, V extends Action = Action>(\n  configs: StoreConfig<T, V>[] | InjectionToken<StoreConfig<T, V>>[],\n  featureStores: StoreFeature<T, V>[]\n) {\n  return featureStores.map((feat, index) => {\n    if (configs[index] instanceof InjectionToken) {\n      const conf = inject(configs[index] as InjectionToken<StoreConfig<T, V>>);\n      return {\n        key: feat.key,\n        reducerFactory: conf.reducerFactory\n          ? conf.reducerFactory\n          : combineReducers,\n        metaReducers: conf.metaReducers ? conf.metaReducers : [],\n        initialState: conf.initialState,\n      };\n    }\n    return feat;\n  });\n}\n\nexport function _createFeatureReducers<T, V extends Action = Action>(\n  reducerCollection: Array<\n    ActionReducerMap<T, V> | InjectionToken<ActionReducerMap<T, V>>\n  >\n): ActionReducerMap<T, V>[] {\n  return reducerCollection.map((reducer) => {\n    return reducer instanceof InjectionToken ? inject(reducer) : reducer;\n  });\n}\n\nexport function _initialStateFactory(initialState: any): any {\n  if (typeof initialState === 'function') {\n    return initialState();\n  }\n\n  return initialState;\n}\n\nexport function _concatMetaReducers(\n  metaReducers: MetaReducer[],\n  userProvidedMetaReducers: MetaReducer[]\n): MetaReducer[] {\n  return metaReducers.concat(userProvidedMetaReducers);\n}\n\nexport function _provideForRootGuard(): unknown {\n  const store = inject(Store, { optional: true, skipSelf: true });\n  if (store) {\n    throw new TypeError(\n      `The root Store has been provided more than once. Feature modules should provide feature states instead.`\n    );\n  }\n  return 'guarded';\n}\n","import { ActionReducer, Action } from '../models';\nimport { isFunction, hasOwnProperty, isObjectLike } from './utils';\n\nexport function immutabilityCheckMetaReducer(\n  reducer: ActionReducer<any, any>,\n  checks: { action: (action: Action) => boolean; state: () => boolean }\n): ActionReducer<any, any> {\n  return function (state, action) {\n    const act = checks.action(action) ? freeze(action) : action;\n\n    const nextState = reducer(state, act);\n\n    return checks.state() ? freeze(nextState) : nextState;\n  };\n}\n\nfunction freeze(target: any) {\n  Object.freeze(target);\n\n  const targetIsFunction = isFunction(target);\n\n  Object.getOwnPropertyNames(target).forEach((prop) => {\n    // Ignore Ivy properties, ref: https://github.com/ngrx/platform/issues/2109#issuecomment-582689060\n    if (prop.startsWith('ɵ')) {\n      return;\n    }\n\n    if (\n      hasOwnProperty(target, prop) &&\n      (targetIsFunction\n        ? prop !== 'caller' && prop !== 'callee' && prop !== 'arguments'\n        : true)\n    ) {\n      const propValue = target[prop];\n\n      if (\n        (isObjectLike(propValue) || isFunction(propValue)) &&\n        !Object.isFrozen(propValue)\n      ) {\n        freeze(propValue);\n      }\n    }\n  });\n\n  return target;\n}\n","import { ActionReducer, Action } from '../models';\nimport {\n  isPlainObject,\n  isUndefined,\n  isNull,\n  isNumber,\n  isBoolean,\n  isString,\n  isArray,\n  RUNTIME_CHECK_URL,\n  isComponent,\n} from './utils';\n\nexport function serializationCheckMetaReducer(\n  reducer: ActionReducer<any, any>,\n  checks: { action: (action: Action) => boolean; state: () => boolean }\n): ActionReducer<any, any> {\n  return function (state, action) {\n    if (checks.action(action)) {\n      const unserializableAction = getUnserializable(action);\n      throwIfUnserializable(unserializableAction, 'action');\n    }\n\n    const nextState = reducer(state, action);\n\n    if (checks.state()) {\n      const unserializableState = getUnserializable(nextState);\n      throwIfUnserializable(unserializableState, 'state');\n    }\n\n    return nextState;\n  };\n}\n\nfunction getUnserializable(\n  target?: any,\n  path: string[] = []\n): false | { path: string[]; value: any } {\n  // Guard against undefined and null, e.g. a reducer that returns undefined\n  if ((isUndefined(target) || isNull(target)) && path.length === 0) {\n    return {\n      path: ['root'],\n      value: target,\n    };\n  }\n\n  const keys = Object.keys(target);\n  return keys.reduce<false | { path: string[]; value: any }>((result, key) => {\n    if (result) {\n      return result;\n    }\n\n    const value = (target as any)[key];\n\n    // Ignore Ivy components\n    if (isComponent(value)) {\n      return result;\n    }\n\n    if (\n      isUndefined(value) ||\n      isNull(value) ||\n      isNumber(value) ||\n      isBoolean(value) ||\n      isString(value) ||\n      isArray(value)\n    ) {\n      return false;\n    }\n\n    if (isPlainObject(value)) {\n      return getUnserializable(value, [...path, key]);\n    }\n\n    return {\n      path: [...path, key],\n      value,\n    };\n  }, false);\n}\n\nfunction throwIfUnserializable(\n  unserializable: false | { path: string[]; value: any },\n  context: 'state' | 'action'\n) {\n  if (unserializable === false) {\n    return;\n  }\n\n  const unserializablePath = unserializable.path.join('.');\n  const error: any = new Error(\n    `Detected unserializable ${context} at \"${unserializablePath}\". ${RUNTIME_CHECK_URL}#strict${context}serializability`\n  );\n  error.value = unserializable.value;\n  error.unserializablePath = unserializablePath;\n  throw error;\n}\n","import * as ngCore from '@angular/core';\nimport { Action, ActionReducer } from '../models';\nimport { RUNTIME_CHECK_URL } from './utils';\n\nexport function inNgZoneAssertMetaReducer(\n  reducer: ActionReducer<any, Action>,\n  checks: { action: (action: Action) => boolean }\n) {\n  return function (state: any, action: Action) {\n    if (checks.action(action) && !ngCore.NgZone.isInAngularZone()) {\n      throw new Error(\n        `Action '${action.type}' running outside NgZone. ${RUNTIME_CHECK_URL}#strictactionwithinngzone`\n      );\n    }\n    return reducer(state, action);\n  };\n}\n","import { isDevMode, Provider } from '@angular/core';\nimport {\n  serializationCheckMetaReducer,\n  immutabilityCheckMetaReducer,\n  inNgZoneAssertMetaReducer,\n} from './meta-reducers';\nimport { RuntimeChecks, MetaReducer, Action } from './models';\nimport {\n  _USER_RUNTIME_CHECKS,\n  ACTIVE_RUNTIME_CHECKS,\n  META_REDUCERS,\n  USER_RUNTIME_CHECKS,\n  _ACTION_TYPE_UNIQUENESS_CHECK,\n} from './tokens';\nimport { REGISTERED_ACTION_TYPES } from './globals';\nimport { RUNTIME_CHECK_URL } from './meta-reducers/utils';\n\nexport function createActiveRuntimeChecks(\n  runtimeChecks?: Partial<RuntimeChecks>\n): RuntimeChecks {\n  if (isDevMode()) {\n    return {\n      strictStateSerializability: false,\n      strictActionSerializability: false,\n      strictStateImmutability: true,\n      strictActionImmutability: true,\n      strictActionWithinNgZone: false,\n      strictActionTypeUniqueness: false,\n      ...runtimeChecks,\n    };\n  }\n\n  return {\n    strictStateSerializability: false,\n    strictActionSerializability: false,\n    strictStateImmutability: false,\n    strictActionImmutability: false,\n    strictActionWithinNgZone: false,\n    strictActionTypeUniqueness: false,\n  };\n}\n\nexport function createSerializationCheckMetaReducer({\n  strictActionSerializability,\n  strictStateSerializability,\n}: RuntimeChecks): MetaReducer {\n  return (reducer) =>\n    strictActionSerializability || strictStateSerializability\n      ? serializationCheckMetaReducer(reducer, {\n          action: (action) =>\n            strictActionSerializability && !ignoreNgrxAction(action),\n          state: () => strictStateSerializability,\n        })\n      : reducer;\n}\n\nexport function createImmutabilityCheckMetaReducer({\n  strictActionImmutability,\n  strictStateImmutability,\n}: RuntimeChecks): MetaReducer {\n  return (reducer) =>\n    strictActionImmutability || strictStateImmutability\n      ? immutabilityCheckMetaReducer(reducer, {\n          action: (action) =>\n            strictActionImmutability && !ignoreNgrxAction(action),\n          state: () => strictStateImmutability,\n        })\n      : reducer;\n}\n\nfunction ignoreNgrxAction(action: Action) {\n  return action.type.startsWith('@ngrx');\n}\n\nexport function createInNgZoneCheckMetaReducer({\n  strictActionWithinNgZone,\n}: RuntimeChecks): MetaReducer {\n  return (reducer) =>\n    strictActionWithinNgZone\n      ? inNgZoneAssertMetaReducer(reducer, {\n          action: (action) =>\n            strictActionWithinNgZone && !ignoreNgrxAction(action),\n        })\n      : reducer;\n}\n\nexport function provideRuntimeChecks(\n  runtimeChecks?: Partial<RuntimeChecks>\n): Provider[] {\n  return [\n    {\n      provide: _USER_RUNTIME_CHECKS,\n      useValue: runtimeChecks,\n    },\n    {\n      provide: USER_RUNTIME_CHECKS,\n      useFactory: _runtimeChecksFactory,\n      deps: [_USER_RUNTIME_CHECKS],\n    },\n    {\n      provide: ACTIVE_RUNTIME_CHECKS,\n      deps: [USER_RUNTIME_CHECKS],\n      useFactory: createActiveRuntimeChecks,\n    },\n    {\n      provide: META_REDUCERS,\n      multi: true,\n      deps: [ACTIVE_RUNTIME_CHECKS],\n      useFactory: createImmutabilityCheckMetaReducer,\n    },\n    {\n      provide: META_REDUCERS,\n      multi: true,\n      deps: [ACTIVE_RUNTIME_CHECKS],\n      useFactory: createSerializationCheckMetaReducer,\n    },\n    {\n      provide: META_REDUCERS,\n      multi: true,\n      deps: [ACTIVE_RUNTIME_CHECKS],\n      useFactory: createInNgZoneCheckMetaReducer,\n    },\n  ];\n}\n\nexport function checkForActionTypeUniqueness(): Provider[] {\n  return [\n    {\n      provide: _ACTION_TYPE_UNIQUENESS_CHECK,\n      multi: true,\n      deps: [ACTIVE_RUNTIME_CHECKS],\n      useFactory: _actionTypeUniquenessCheck,\n    },\n  ];\n}\n\nexport function _runtimeChecksFactory(\n  runtimeChecks: RuntimeChecks\n): RuntimeChecks {\n  return runtimeChecks;\n}\n\nexport function _actionTypeUniquenessCheck(config: RuntimeChecks): void {\n  if (!config.strictActionTypeUniqueness) {\n    return;\n  }\n\n  const duplicates = Object.entries(REGISTERED_ACTION_TYPES)\n    .filter(([, registrations]) => registrations > 1)\n    .map(([type]) => type);\n\n  if (duplicates.length) {\n    throw new Error(\n      `Action types are registered more than once, ${duplicates\n        .map((type) => `\"${type}\"`)\n        .join(', ')}. ${RUNTIME_CHECK_URL}#strictactiontypeuniqueness`\n    );\n  }\n}\n","import {\n  ENVIRONMENT_INITIALIZER,\n  EnvironmentProviders,\n  Inject,\n  inject,\n  InjectionToken,\n  makeEnvironmentProviders,\n  Provider,\n} from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  StoreFeature,\n} from './models';\nimport { combineReducers, createReducerFactory } from './utils';\nimport {\n  _ACTION_TYPE_UNIQUENESS_CHECK,\n  _FEATURE_CONFIGS,\n  _FEATURE_REDUCERS,\n  _FEATURE_REDUCERS_TOKEN,\n  _INITIAL_REDUCERS,\n  _INITIAL_STATE,\n  _REDUCER_FACTORY,\n  _RESOLVED_META_REDUCERS,\n  _ROOT_STORE_GUARD,\n  _STORE_FEATURES,\n  _STORE_REDUCERS,\n  FEATURE_REDUCERS,\n  FEATURE_STATE_PROVIDER,\n  INITIAL_REDUCERS,\n  INITIAL_STATE,\n  META_REDUCERS,\n  REDUCER_FACTORY,\n  ROOT_STORE_PROVIDER,\n  STORE_FEATURES,\n  USER_PROVIDED_META_REDUCERS,\n} from './tokens';\nimport { ACTIONS_SUBJECT_PROVIDERS, ActionsSubject } from './actions_subject';\nimport {\n  REDUCER_MANAGER_PROVIDERS,\n  ReducerManager,\n  ReducerObservable,\n} from './reducer_manager';\nimport {\n  SCANNED_ACTIONS_SUBJECT_PROVIDERS,\n  ScannedActionsSubject,\n} from './scanned_actions_subject';\nimport { STATE_PROVIDERS } from './state';\nimport { Store, STORE_PROVIDERS } from './store';\nimport {\n  checkForActionTypeUniqueness,\n  provideRuntimeChecks,\n} from './runtime_checks';\nimport {\n  _concatMetaReducers,\n  _createFeatureReducers,\n  _createFeatureStore,\n  _createStoreReducers,\n  _initialStateFactory,\n  _provideForRootGuard,\n  FeatureSlice,\n  RootStoreConfig,\n  StoreConfig,\n} from './store_config';\n\nexport function provideState<T, V extends Action = Action>(\n  featureName: string,\n  reducers: ActionReducerMap<T, V> | InjectionToken<ActionReducerMap<T, V>>,\n  config?: StoreConfig<T, V> | InjectionToken<StoreConfig<T, V>>\n): EnvironmentProviders;\nexport function provideState<T, V extends Action = Action>(\n  featureName: string,\n  reducer: ActionReducer<T, V> | InjectionToken<ActionReducer<T, V>>,\n  config?: StoreConfig<T, V> | InjectionToken<StoreConfig<T, V>>\n): EnvironmentProviders;\nexport function provideState<T, V extends Action = Action>(\n  slice: FeatureSlice<T, V>\n): EnvironmentProviders;\n/**\n * Provides additional slices of state in the Store.\n * These providers cannot be used at the component level.\n *\n * @usageNotes\n *\n * ### Providing Store Features\n *\n * ```ts\n * const booksRoutes: Route[] = [\n *   {\n *     path: '',\n *     providers: [provideState('books', booksReducer)],\n *     children: [\n *       { path: '', component: BookListComponent },\n *       { path: ':id', component: BookDetailsComponent },\n *     ],\n *   },\n * ];\n * ```\n */\nexport function provideState<T, V extends Action = Action>(\n  featureNameOrSlice: string | FeatureSlice<T, V>,\n  reducers?:\n    | ActionReducerMap<T, V>\n    | InjectionToken<ActionReducerMap<T, V>>\n    | ActionReducer<T, V>\n    | InjectionToken<ActionReducer<T, V>>,\n  config: StoreConfig<T, V> | InjectionToken<StoreConfig<T, V>> = {}\n): EnvironmentProviders {\n  return makeEnvironmentProviders([\n    ..._provideState(featureNameOrSlice, reducers, config),\n    ENVIRONMENT_STATE_PROVIDER,\n  ]);\n}\n\nexport function _provideStore<T, V extends Action = Action>(\n  reducers:\n    | ActionReducerMap<T, V>\n    | InjectionToken<ActionReducerMap<T, V>>\n    | Record<string, never> = {},\n  config: RootStoreConfig<T, V> = {}\n): Provider[] {\n  return [\n    {\n      provide: _ROOT_STORE_GUARD,\n      useFactory: _provideForRootGuard,\n    },\n    { provide: _INITIAL_STATE, useValue: config.initialState },\n    {\n      provide: INITIAL_STATE,\n      useFactory: _initialStateFactory,\n      deps: [_INITIAL_STATE],\n    },\n    { provide: _INITIAL_REDUCERS, useValue: reducers },\n    {\n      provide: _STORE_REDUCERS,\n      useExisting:\n        reducers instanceof InjectionToken ? reducers : _INITIAL_REDUCERS,\n    },\n    {\n      provide: INITIAL_REDUCERS,\n      deps: [_INITIAL_REDUCERS, [new Inject(_STORE_REDUCERS)]],\n      useFactory: _createStoreReducers,\n    },\n    {\n      provide: USER_PROVIDED_META_REDUCERS,\n      useValue: config.metaReducers ? config.metaReducers : [],\n    },\n    {\n      provide: _RESOLVED_META_REDUCERS,\n      deps: [META_REDUCERS, USER_PROVIDED_META_REDUCERS],\n      useFactory: _concatMetaReducers,\n    },\n    {\n      provide: _REDUCER_FACTORY,\n      useValue: config.reducerFactory ? config.reducerFactory : combineReducers,\n    },\n    {\n      provide: REDUCER_FACTORY,\n      deps: [_REDUCER_FACTORY, _RESOLVED_META_REDUCERS],\n      useFactory: createReducerFactory,\n    },\n    ACTIONS_SUBJECT_PROVIDERS,\n    REDUCER_MANAGER_PROVIDERS,\n    SCANNED_ACTIONS_SUBJECT_PROVIDERS,\n    STATE_PROVIDERS,\n    STORE_PROVIDERS,\n    provideRuntimeChecks(config.runtimeChecks),\n    checkForActionTypeUniqueness(),\n  ];\n}\n\nfunction rootStoreProviderFactory(): void {\n  inject(ActionsSubject);\n  inject(ReducerObservable);\n  inject(ScannedActionsSubject);\n  inject(Store);\n  inject(_ROOT_STORE_GUARD, { optional: true });\n  inject(_ACTION_TYPE_UNIQUENESS_CHECK, { optional: true });\n}\n\n/**\n * Environment Initializer used in the root\n * providers to initialize the Store\n */\nconst ENVIRONMENT_STORE_PROVIDER: Provider[] = [\n  { provide: ROOT_STORE_PROVIDER, useFactory: rootStoreProviderFactory },\n  {\n    provide: ENVIRONMENT_INITIALIZER,\n    multi: true,\n    useFactory() {\n      return () => inject(ROOT_STORE_PROVIDER);\n    },\n  },\n];\n\n/**\n * Provides the global Store providers and initializes\n * the Store.\n * These providers cannot be used at the component level.\n *\n * @usageNotes\n *\n * ### Providing the Global Store\n *\n * ```ts\n * bootstrapApplication(AppComponent, {\n *   providers: [provideStore()],\n * });\n * ```\n */\nexport function provideStore<T, V extends Action = Action>(\n  reducers?: ActionReducerMap<T, V> | InjectionToken<ActionReducerMap<T, V>>,\n  config?: RootStoreConfig<T, V>\n): EnvironmentProviders {\n  return makeEnvironmentProviders([\n    ..._provideStore(reducers, config),\n    ENVIRONMENT_STORE_PROVIDER,\n  ]);\n}\n\nfunction featureStateProviderFactory(): void {\n  inject(ROOT_STORE_PROVIDER);\n  const features = inject<StoreFeature<any, any>[]>(_STORE_FEATURES);\n  const featureReducers = inject<ActionReducerMap<any>[]>(FEATURE_REDUCERS);\n  const reducerManager = inject(ReducerManager);\n  inject(_ACTION_TYPE_UNIQUENESS_CHECK, { optional: true });\n\n  const feats = features.map((feature, index) => {\n    const featureReducerCollection = featureReducers.shift();\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const reducers = featureReducerCollection! /*TODO(#823)*/[index];\n\n    return {\n      ...feature,\n      reducers,\n      initialState: _initialStateFactory(feature.initialState),\n    };\n  });\n\n  reducerManager.addFeatures(feats);\n}\n\n/**\n * Environment Initializer used in the feature\n * providers to register state features\n */\nconst ENVIRONMENT_STATE_PROVIDER: Provider[] = [\n  {\n    provide: FEATURE_STATE_PROVIDER,\n    useFactory: featureStateProviderFactory,\n  },\n  {\n    provide: ENVIRONMENT_INITIALIZER,\n    multi: true,\n    useFactory() {\n      return () => inject(FEATURE_STATE_PROVIDER);\n    },\n  },\n];\n\nexport function _provideState<T, V extends Action = Action>(\n  featureNameOrSlice: string | FeatureSlice<T, V>,\n  reducers?:\n    | ActionReducerMap<T, V>\n    | InjectionToken<ActionReducerMap<T, V>>\n    | ActionReducer<T, V>\n    | InjectionToken<ActionReducer<T, V>>,\n  config: StoreConfig<T, V> | InjectionToken<StoreConfig<T, V>> = {}\n): Provider[] {\n  return [\n    {\n      provide: _FEATURE_CONFIGS,\n      multi: true,\n      useValue: featureNameOrSlice instanceof Object ? {} : config,\n    },\n    {\n      provide: STORE_FEATURES,\n      multi: true,\n      useValue: {\n        key:\n          featureNameOrSlice instanceof Object\n            ? featureNameOrSlice.name\n            : featureNameOrSlice,\n        reducerFactory:\n          !(config instanceof InjectionToken) && config.reducerFactory\n            ? config.reducerFactory\n            : combineReducers,\n        metaReducers:\n          !(config instanceof InjectionToken) && config.metaReducers\n            ? config.metaReducers\n            : [],\n        initialState:\n          !(config instanceof InjectionToken) && config.initialState\n            ? config.initialState\n            : undefined,\n      },\n    },\n    {\n      provide: _STORE_FEATURES,\n      deps: [_FEATURE_CONFIGS, STORE_FEATURES],\n      useFactory: _createFeatureStore,\n    },\n    {\n      provide: _FEATURE_REDUCERS,\n      multi: true,\n      useValue:\n        featureNameOrSlice instanceof Object\n          ? featureNameOrSlice.reducer\n          : reducers,\n    },\n    {\n      provide: _FEATURE_REDUCERS_TOKEN,\n      multi: true,\n      useExisting:\n        reducers instanceof InjectionToken ? reducers : _FEATURE_REDUCERS,\n    },\n    {\n      provide: FEATURE_REDUCERS,\n      multi: true,\n      deps: [_FEATURE_REDUCERS, [new Inject(_FEATURE_REDUCERS_TOKEN)]],\n      useFactory: _createFeatureReducers,\n    },\n    checkForActionTypeUniqueness(),\n  ];\n}\n","import {\n  Inject,\n  InjectionToken,\n  ModuleWithProviders,\n  NgModule,\n  OnDestroy,\n  Optional,\n} from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  StoreFeature,\n} from './models';\nimport {\n  _ACTION_TYPE_UNIQUENESS_CHECK,\n  _ROOT_STORE_GUARD,\n  _STORE_FEATURES,\n  FEATURE_REDUCERS,\n} from './tokens';\nimport { ActionsSubject } from './actions_subject';\nimport { ReducerManager, ReducerObservable } from './reducer_manager';\nimport { ScannedActionsSubject } from './scanned_actions_subject';\nimport { Store } from './store';\nimport {\n  _initialStateFactory,\n  FeatureSlice,\n  RootStoreConfig,\n  StoreConfig,\n} from './store_config';\nimport { _provideState, _provideStore } from './provide_store';\n\n@NgModule({})\nexport class StoreRootModule {\n  constructor(\n    actions$: ActionsSubject,\n    reducer$: ReducerObservable,\n    scannedActions$: ScannedActionsSubject,\n    store: Store<any>,\n    @Optional()\n    @Inject(_ROOT_STORE_GUARD)\n    guard: any,\n    @Optional()\n    @Inject(_ACTION_TYPE_UNIQUENESS_CHECK)\n    actionCheck: any\n  ) {}\n}\n\n@NgModule({})\nexport class StoreFeatureModule implements OnDestroy {\n  constructor(\n    @Inject(_STORE_FEATURES) private features: StoreFeature<any, any>[],\n    @Inject(FEATURE_REDUCERS) private featureReducers: ActionReducerMap<any>[],\n    private reducerManager: ReducerManager,\n    root: StoreRootModule,\n    @Optional()\n    @Inject(_ACTION_TYPE_UNIQUENESS_CHECK)\n    actionCheck: any\n  ) {\n    const feats = features.map((feature, index) => {\n      const featureReducerCollection = featureReducers.shift();\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const reducers = featureReducerCollection! /*TODO(#823)*/[index];\n\n      return {\n        ...feature,\n        reducers,\n        initialState: _initialStateFactory(feature.initialState),\n      };\n    });\n\n    reducerManager.addFeatures(feats);\n  }\n\n  // eslint-disable-next-line @angular-eslint/contextual-lifecycle\n  ngOnDestroy() {\n    this.reducerManager.removeFeatures(this.features);\n  }\n}\n\n@NgModule({})\nexport class StoreModule {\n  static forRoot<T, V extends Action = Action>(\n    reducers?: ActionReducerMap<T, V> | InjectionToken<ActionReducerMap<T, V>>,\n    config?: RootStoreConfig<T, V>\n  ): ModuleWithProviders<StoreRootModule> {\n    return {\n      ngModule: StoreRootModule,\n      providers: [..._provideStore(reducers, config)],\n    };\n  }\n\n  static forFeature<T, V extends Action = Action>(\n    featureName: string,\n    reducers: ActionReducerMap<T, V> | InjectionToken<ActionReducerMap<T, V>>,\n    config?: StoreConfig<T, V> | InjectionToken<StoreConfig<T, V>>\n  ): ModuleWithProviders<StoreFeatureModule>;\n  static forFeature<T, V extends Action = Action>(\n    featureName: string,\n    reducer: ActionReducer<T, V> | InjectionToken<ActionReducer<T, V>>,\n    config?: StoreConfig<T, V> | InjectionToken<StoreConfig<T, V>>\n  ): ModuleWithProviders<StoreFeatureModule>;\n  static forFeature<T, V extends Action = Action>(\n    slice: FeatureSlice<T, V>\n  ): ModuleWithProviders<StoreFeatureModule>;\n  static forFeature<T, V extends Action = Action>(\n    featureNameOrSlice: string | FeatureSlice<T, V>,\n    reducers?:\n      | ActionReducerMap<T, V>\n      | InjectionToken<ActionReducerMap<T, V>>\n      | ActionReducer<T, V>\n      | InjectionToken<ActionReducer<T, V>>,\n    config: StoreConfig<T, V> | InjectionToken<StoreConfig<T, V>> = {}\n  ): ModuleWithProviders<StoreFeatureModule> {\n    return {\n      ngModule: StoreFeatureModule,\n      providers: [..._provideState(featureNameOrSlice, reducers, config)],\n    };\n  }\n}\n","import { ActionCreator, ActionReducer, ActionType, Action } from './models';\n\n// Goes over the array of ActionCreators, pulls the action type out of each one\n// and returns the array of these action types.\ntype ExtractActionTypes<Creators extends readonly ActionCreator[]> = {\n  [Key in keyof Creators]: Creators[Key] extends ActionCreator<infer T>\n    ? T\n    : never;\n};\n\n/**\n * Return type of the `on` fn.\n * Contains the action reducer coupled to one or more action types.\n */\nexport interface ReducerTypes<\n  State,\n  Creators extends readonly ActionCreator[]\n> {\n  reducer: OnReducer<State, Creators>;\n  types: ExtractActionTypes<Creators>;\n}\n\n/**\n *  Specialized Reducer that is aware of the Action type it needs to handle\n */\nexport interface OnReducer<\n  // State type that is being passed from consumer of `on` fn, e.g. from `createReducer` factory\n  State,\n  Creators extends readonly ActionCreator[],\n  // Inferred type from within OnReducer function if `State` is unknown\n  InferredState = State,\n  // Resulting state would be either a State or if State is unknown then the inferred state from the function itself\n  ResultState = unknown extends State ? InferredState : State\n> {\n  (\n    // if State is unknown then set the InferredState type\n    state: unknown extends State ? InferredState : State,\n    action: ActionType<Creators[number]>\n  ): ResultState;\n}\n\n/**\n * @description\n * Associates actions with a given state change function.\n * A state change function must be provided as the last parameter.\n *\n * @param args `ActionCreator`'s followed by a state change function.\n *\n * @returns an association of action types with a state change function.\n *\n * @usageNotes\n * ```ts\n * on(AuthApiActions.loginSuccess, (state, { user }) => ({ ...state, user }))\n * ```\n */\nexport function on<\n  // State type that is being passed from `createReducer` when created within that factory function\n  State,\n  // Action creators\n  Creators extends readonly ActionCreator[],\n  // Inferred type from within OnReducer function if `State` is unknown. This is typically the case when `on` function\n  // is created outside of `createReducer` and state type is either explicitly set OR inferred by return type.\n  // For example: `const onFn = on(action, (state: State, {prop}) => ({ ...state, name: prop }));`\n  InferredState = State\n>(\n  ...args: [\n    ...creators: Creators,\n    reducer: OnReducer<\n      State extends infer S ? S : never,\n      Creators,\n      InferredState\n    >\n  ]\n): ReducerTypes<unknown extends State ? InferredState : State, Creators> {\n  const reducer = args.pop() as unknown as OnReducer<\n    unknown extends State ? InferredState : State,\n    Creators\n  >;\n  const types = (args as unknown as Creators).map(\n    (creator) => creator.type\n  ) as unknown as ExtractActionTypes<Creators>;\n  return { reducer, types };\n}\n\n/**\n * @description\n * Creates a reducer function to handle state transitions.\n *\n * Reducer creators reduce the explicitness of reducer functions with switch statements.\n *\n * @param initialState Provides a state value if the current state is `undefined`, as it is initially.\n * @param ons Associations between actions and state changes.\n * @returns A reducer function.\n *\n * @usageNotes\n *\n * - Must be used with `ActionCreator`'s (returned by `createAction`). Cannot be used with class-based action creators.\n * - The returned `ActionReducer` does not require being wrapped with another function.\n *\n * **Declaring a reducer creator**\n *\n * ```ts\n * export const reducer = createReducer(\n *   initialState,\n *   on(\n *     featureActions.actionOne,\n *     featureActions.actionTwo,\n *     (state, { updatedValue }) => ({ ...state, prop: updatedValue })\n *   ),\n *   on(featureActions.actionThree, () => initialState);\n * );\n * ```\n */\nexport function createReducer<\n  S,\n  A extends Action = Action,\n  // Additional generic for the return type is introduced to enable correct\n  // type inference when `createReducer` is used within `createFeature`.\n  // For more info see: https://github.com/microsoft/TypeScript/issues/52114\n  R extends ActionReducer<S, A> = ActionReducer<S, A>\n>(initialState: S, ...ons: ReducerTypes<S, readonly ActionCreator[]>[]): R {\n  const map = new Map<string, OnReducer<S, ActionCreator[]>>();\n  for (const on of ons) {\n    for (const type of on.types) {\n      const existingReducer = map.get(type);\n      if (existingReducer) {\n        const newReducer: typeof existingReducer = (state, action) =>\n          on.reducer(existingReducer(state, action), action);\n        map.set(type, newReducer);\n      } else {\n        map.set(type, on.reducer);\n      }\n    }\n  }\n\n  return function (state: S = initialState, action: A): S {\n    const reducer = map.get(action.type);\n    return reducer ? reducer(state, action) : state;\n  } as R;\n}\n","/**\n * DO NOT EDIT\n *\n * This file is automatically generated at build\n */\n\nexport * from './public_api';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}